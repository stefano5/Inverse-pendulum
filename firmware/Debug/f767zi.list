
f767zi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d10  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ad8  08007f10  08007f10  00017f10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099e8  080099e8  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  080099e8  080099e8  000199e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099f0  080099f0  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099f0  080099f0  000199f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099f4  080099f4  000199f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  080099f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000104  08009afc  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08009afc  00020260  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b27  00000000  00000000  00020132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026bf  00000000  00000000  00035c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  00038318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001050  00000000  00000000  00039460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029539  00000000  00000000  0003a4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014d96  00000000  00000000  000639e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fee51  00000000  00000000  0007877f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001775d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056e8  00000000  00000000  00177624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000104 	.word	0x20000104
 800021c:	00000000 	.word	0x00000000
 8000220:	08007ef8 	.word	0x08007ef8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000108 	.word	0x20000108
 800023c:	08007ef8 	.word	0x08007ef8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b0b2      	sub	sp, #200	; 0xc8
 80005ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f001 fc28 	bl	8001e42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f953 	bl	800089c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 fab5 	bl	8000b64 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005fa:	f000 fa83 	bl	8000b04 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80005fe:	f000 f9ff 	bl	8000a00 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000602:	f000 f9bd 	bl	8000980 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000606:	2100      	movs	r1, #0
 8000608:	4897      	ldr	r0, [pc, #604]	; (8000868 <main+0x280>)
 800060a:	f004 f849 	bl	80046a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800060e:	2108      	movs	r1, #8
 8000610:	4895      	ldr	r0, [pc, #596]	; (8000868 <main+0x280>)
 8000612:	f004 f845 	bl	80046a0 <HAL_TIM_PWM_Start>

  if (MPU6050_Init(&hi2c1) == 1) {
 8000616:	4895      	ldr	r0, [pc, #596]	; (800086c <main+0x284>)
 8000618:	f000 fbe6 	bl	8000de8 <MPU6050_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b01      	cmp	r3, #1
 8000620:	d103      	bne.n	800062a <main+0x42>
	printf("\nslave corretto\r\n\n");
 8000622:	4893      	ldr	r0, [pc, #588]	; (8000870 <main+0x288>)
 8000624:	f005 fe46 	bl	80062b4 <puts>
 8000628:	e002      	b.n	8000630 <main+0x48>
  } else {
	printf("\nslave errato\r\n\n");
 800062a:	4892      	ldr	r0, [pc, #584]	; (8000874 <main+0x28c>)
 800062c:	f005 fe42 	bl	80062b4 <puts>
  }

  HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDR, 10, i2c_timeout);
 8000630:	2364      	movs	r3, #100	; 0x64
 8000632:	220a      	movs	r2, #10
 8000634:	21d0      	movs	r1, #208	; 0xd0
 8000636:	488d      	ldr	r0, [pc, #564]	; (800086c <main+0x284>)
 8000638:	f002 f9fc 	bl	8002a34 <HAL_I2C_IsDeviceReady>
 800063c:	4603      	mov	r3, r0
 800063e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  if (status == HAL_OK) {
 8000642:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000646:	2b00      	cmp	r3, #0
 8000648:	d103      	bne.n	8000652 <main+0x6a>
	  printf("\n\n\n\nslave corretto\r\n\n\n\n\n");
 800064a:	488b      	ldr	r0, [pc, #556]	; (8000878 <main+0x290>)
 800064c:	f005 fe32 	bl	80062b4 <puts>
 8000650:	e002      	b.n	8000658 <main+0x70>
  } else {
	  printf("\n\n\n\nslave errato\r\n\n\n\n\n");
 8000652:	488a      	ldr	r0, [pc, #552]	; (800087c <main+0x294>)
 8000654:	f005 fe2e 	bl	80062b4 <puts>
  }


  MPU6050_t MPU6050;
  uint16_t count = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
  uint32_t start;
  printf("Initialization done\r\n");
 800065e:	4888      	ldr	r0, [pc, #544]	; (8000880 <main+0x298>)
 8000660:	f005 fe28 	bl	80062b4 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  start = HAL_GetTick();
 8000664:	f001 fc3e 	bl	8001ee4 <HAL_GetTick>
 8000668:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1) {
 800066c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000670:	4884      	ldr	r0, [pc, #528]	; (8000884 <main+0x29c>)
 8000672:	f001 fed5 	bl	8002420 <HAL_GPIO_ReadPin>
 8000676:	4603      	mov	r3, r0
 8000678:	2b01      	cmp	r3, #1
 800067a:	d104      	bne.n	8000686 <main+0x9e>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800067c:	2101      	movs	r1, #1
 800067e:	4882      	ldr	r0, [pc, #520]	; (8000888 <main+0x2a0>)
 8000680:	f001 feff 	bl	8002482 <HAL_GPIO_TogglePin>
 8000684:	e004      	b.n	8000690 <main+0xa8>
	  } else {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2101      	movs	r1, #1
 800068a:	487f      	ldr	r0, [pc, #508]	; (8000888 <main+0x2a0>)
 800068c:	f001 fee0 	bl	8002450 <HAL_GPIO_WritePin>
	  }

	  //https://github.com/leech001/MPU6050/tree/master/examples/STM32F401CCU6_MPU6050/Core/Src
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 8000690:	463b      	mov	r3, r7
 8000692:	4619      	mov	r1, r3
 8000694:	4875      	ldr	r0, [pc, #468]	; (800086c <main+0x284>)
 8000696:	f000 fbff 	bl	8000e98 <MPU6050_Read_All>

//	  printFloat("pitch: (%), roll: (%)", 2, 2, MPU6050.KalmanAngleY, MPU6050.KalmanAngleX);
	  double measurement_pitch = MPU6050.KalmanAngleY + 90;
 800069a:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 800069e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8000850 <main+0x268>
 80006a2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80006a6:	ed87 7b26 	vstr	d7, [r7, #152]	; 0x98

	  count++;
 80006aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80006ae:	3301      	adds	r3, #1
 80006b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
	  if (count > 100) {
 80006b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80006b8:	2b64      	cmp	r3, #100	; 0x64
 80006ba:	d914      	bls.n	80006e6 <main+0xfe>
		  count = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
		  printFloat("pitch: (%)", 2, 2, measurement_pitch);
 80006c2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80006c6:	e9cd 2300 	strd	r2, r3, [sp]
 80006ca:	2202      	movs	r2, #2
 80006cc:	2102      	movs	r1, #2
 80006ce:	486f      	ldr	r0, [pc, #444]	; (800088c <main+0x2a4>)
 80006d0:	f000 fe9c 	bl	800140c <printFloat>
		  //printFloat("gx: (%)", 2, 2, MPU6050.Gx);
		  printFloat("gy: (%)", 2, 2, MPU6050.Gy);
 80006d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80006d8:	e9cd 2300 	strd	r2, r3, [sp]
 80006dc:	2202      	movs	r2, #2
 80006de:	2102      	movs	r1, #2
 80006e0:	486b      	ldr	r0, [pc, #428]	; (8000890 <main+0x2a8>)
 80006e2:	f000 fe93 	bl	800140c <printFloat>
		  //printFloat("gz: (%)", 2, 2, MPU6050.Gz);

	  }

	  double ref = 0.0;
 80006e6:	f04f 0200 	mov.w	r2, #0
 80006ea:	f04f 0300 	mov.w	r3, #0
 80006ee:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	  double error_p = ref - measurement_pitch;
 80006f2:	ed97 6b24 	vldr	d6, [r7, #144]	; 0x90
 80006f6:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 80006fa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80006fe:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
	  double error_d = 0.0 - MPU6050.Gy;
 8000702:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8000706:	ed9f 6b54 	vldr	d6, [pc, #336]	; 8000858 <main+0x270>
 800070a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800070e:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80

	  int kp1 = 25;
 8000712:	2319      	movs	r3, #25
 8000714:	67fb      	str	r3, [r7, #124]	; 0x7c
	  int kp2 = 25;
 8000716:	2319      	movs	r3, #25
 8000718:	67bb      	str	r3, [r7, #120]	; 0x78
	  double kd1 = 5;
 800071a:	f04f 0200 	mov.w	r2, #0
 800071e:	4b5d      	ldr	r3, [pc, #372]	; (8000894 <main+0x2ac>)
 8000720:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	  double kd2 = 5;
 8000724:	f04f 0200 	mov.w	r2, #0
 8000728:	4b5a      	ldr	r3, [pc, #360]	; (8000894 <main+0x2ac>)
 800072a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	  double dt = HAL_GetTick() - start;
 800072e:	f001 fbd9 	bl	8001ee4 <HAL_GetTick>
 8000732:	4602      	mov	r2, r0
 8000734:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	ee07 3a90 	vmov	s15, r3
 800073e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000742:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60

	  double duty_1 = error_p * kp1 + error_d * kd1 + error_p * dt;
 8000746:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000748:	ee07 3a90 	vmov	s15, r3
 800074c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000750:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8000754:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000758:	ed97 5b20 	vldr	d5, [r7, #128]	; 0x80
 800075c:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8000760:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000764:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000768:	ed97 5b22 	vldr	d5, [r7, #136]	; 0x88
 800076c:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8000770:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000774:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000778:	ed87 7b2c 	vstr	d7, [r7, #176]	; 0xb0
	  double duty_2 = error_p * kp2 + error_d * kd2 + error_p * dt;
 800077c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800077e:	ee07 3a90 	vmov	s15, r3
 8000782:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000786:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 800078a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800078e:	ed97 5b20 	vldr	d5, [r7, #128]	; 0x80
 8000792:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8000796:	ee25 7b07 	vmul.f64	d7, d5, d7
 800079a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800079e:	ed97 5b22 	vldr	d5, [r7, #136]	; 0x88
 80007a2:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 80007a6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80007aa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80007ae:	ed87 7b2a 	vstr	d7, [r7, #168]	; 0xa8

	  int8_t sign_1 = sign(duty_1);
 80007b2:	ed97 0b2c 	vldr	d0, [r7, #176]	; 0xb0
 80007b6:	f000 ffad 	bl	8001714 <sign>
 80007ba:	4603      	mov	r3, r0
 80007bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	  int8_t sign_2 = sign(duty_2);
 80007c0:	ed97 0b2a 	vldr	d0, [r7, #168]	; 0xa8
 80007c4:	f000 ffa6 	bl	8001714 <sign>
 80007c8:	4603      	mov	r3, r0
 80007ca:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

	  if (duty_1 > 100)
 80007ce:	ed97 7b2c 	vldr	d7, [r7, #176]	; 0xb0
 80007d2:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8000860 <main+0x278>
 80007d6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80007da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007de:	dd04      	ble.n	80007ea <main+0x202>
		  duty_1 = 100;
 80007e0:	f04f 0200 	mov.w	r2, #0
 80007e4:	4b2c      	ldr	r3, [pc, #176]	; (8000898 <main+0x2b0>)
 80007e6:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0

	  if (duty_2 > 100)
 80007ea:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 80007ee:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8000860 <main+0x278>
 80007f2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80007f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007fa:	dd04      	ble.n	8000806 <main+0x21e>
		  duty_2 = 100;
 80007fc:	f04f 0200 	mov.w	r2, #0
 8000800:	4b25      	ldr	r3, [pc, #148]	; (8000898 <main+0x2b0>)
 8000802:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

	  control_H_bridge(sign_1, abs(duty_1), sign_2, abs(duty_2));
 8000806:	ed97 7b2c 	vldr	d7, [r7, #176]	; 0xb0
 800080a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800080e:	ee17 3a90 	vmov	r3, s15
 8000812:	2b00      	cmp	r3, #0
 8000814:	bfb8      	it	lt
 8000816:	425b      	neglt	r3, r3
 8000818:	b299      	uxth	r1, r3
 800081a:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 800081e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000822:	ee17 3a90 	vmov	r3, s15
 8000826:	2b00      	cmp	r3, #0
 8000828:	bfb8      	it	lt
 800082a:	425b      	neglt	r3, r3
 800082c:	b29b      	uxth	r3, r3
 800082e:	f997 205e 	ldrsb.w	r2, [r7, #94]	; 0x5e
 8000832:	f997 005f 	ldrsb.w	r0, [r7, #95]	; 0x5f
 8000836:	f000 ff8d 	bl	8001754 <control_H_bridge>

//	  HAL_Delay(10);
	  while (HAL_GetTick() - start < 5) ;
 800083a:	bf00      	nop
 800083c:	f001 fb52 	bl	8001ee4 <HAL_GetTick>
 8000840:	4602      	mov	r2, r0
 8000842:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000846:	1ad3      	subs	r3, r2, r3
 8000848:	2b04      	cmp	r3, #4
 800084a:	d9f7      	bls.n	800083c <main+0x254>
  {
 800084c:	e70a      	b.n	8000664 <main+0x7c>
 800084e:	bf00      	nop
 8000850:	00000000 	.word	0x00000000
 8000854:	40568000 	.word	0x40568000
	...
 8000864:	40590000 	.word	0x40590000
 8000868:	20000200 	.word	0x20000200
 800086c:	200001b4 	.word	0x200001b4
 8000870:	08007f10 	.word	0x08007f10
 8000874:	08007f24 	.word	0x08007f24
 8000878:	08007f34 	.word	0x08007f34
 800087c:	08007f4c 	.word	0x08007f4c
 8000880:	08007f64 	.word	0x08007f64
 8000884:	40020800 	.word	0x40020800
 8000888:	40020400 	.word	0x40020400
 800088c:	08007f7c 	.word	0x08007f7c
 8000890:	08007f88 	.word	0x08007f88
 8000894:	40140000 	.word	0x40140000
 8000898:	40590000 	.word	0x40590000

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b094      	sub	sp, #80	; 0x50
 80008a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	2234      	movs	r2, #52	; 0x34
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f005 fbca 	bl	8006044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b0:	f107 0308 	add.w	r3, r7, #8
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008c0:	f002 fcfe 	bl	80032c0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c4:	4b2c      	ldr	r3, [pc, #176]	; (8000978 <SystemClock_Config+0xdc>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c8:	4a2b      	ldr	r2, [pc, #172]	; (8000978 <SystemClock_Config+0xdc>)
 80008ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ce:	6413      	str	r3, [r2, #64]	; 0x40
 80008d0:	4b29      	ldr	r3, [pc, #164]	; (8000978 <SystemClock_Config+0xdc>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008dc:	4b27      	ldr	r3, [pc, #156]	; (800097c <SystemClock_Config+0xe0>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008e4:	4a25      	ldr	r2, [pc, #148]	; (800097c <SystemClock_Config+0xe0>)
 80008e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ea:	6013      	str	r3, [r2, #0]
 80008ec:	4b23      	ldr	r3, [pc, #140]	; (800097c <SystemClock_Config+0xe0>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f8:	2301      	movs	r3, #1
 80008fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008fc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000900:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000902:	2302      	movs	r3, #2
 8000904:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000906:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800090a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800090c:	2304      	movs	r3, #4
 800090e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000910:	2360      	movs	r3, #96	; 0x60
 8000912:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000914:	2302      	movs	r3, #2
 8000916:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000918:	2304      	movs	r3, #4
 800091a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800091c:	2302      	movs	r3, #2
 800091e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4618      	mov	r0, r3
 8000926:	f002 fd2b 	bl	8003380 <HAL_RCC_OscConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000930:	f000 fffe 	bl	8001930 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000934:	f002 fcd4 	bl	80032e0 <HAL_PWREx_EnableOverDrive>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800093e:	f000 fff7 	bl	8001930 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000942:	230f      	movs	r3, #15
 8000944:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000946:	2302      	movs	r3, #2
 8000948:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800094e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000952:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000958:	f107 0308 	add.w	r3, r7, #8
 800095c:	2103      	movs	r1, #3
 800095e:	4618      	mov	r0, r3
 8000960:	f002 ffbc 	bl	80038dc <HAL_RCC_ClockConfig>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800096a:	f000 ffe1 	bl	8001930 <Error_Handler>
  }
}
 800096e:	bf00      	nop
 8000970:	3750      	adds	r7, #80	; 0x50
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800
 800097c:	40007000 	.word	0x40007000

08000980 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000984:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <MX_I2C1_Init+0x74>)
 8000986:	4a1c      	ldr	r2, [pc, #112]	; (80009f8 <MX_I2C1_Init+0x78>)
 8000988:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800098a:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <MX_I2C1_Init+0x74>)
 800098c:	4a1b      	ldr	r2, [pc, #108]	; (80009fc <MX_I2C1_Init+0x7c>)
 800098e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000990:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <MX_I2C1_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000996:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <MX_I2C1_Init+0x74>)
 8000998:	2201      	movs	r2, #1
 800099a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800099c:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <MX_I2C1_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009a2:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <MX_I2C1_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <MX_I2C1_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_I2C1_Init+0x74>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_I2C1_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009ba:	480e      	ldr	r0, [pc, #56]	; (80009f4 <MX_I2C1_Init+0x74>)
 80009bc:	f001 fd7c 	bl	80024b8 <HAL_I2C_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009c6:	f000 ffb3 	bl	8001930 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ca:	2100      	movs	r1, #0
 80009cc:	4809      	ldr	r0, [pc, #36]	; (80009f4 <MX_I2C1_Init+0x74>)
 80009ce:	f002 fbdf 	bl	8003190 <HAL_I2CEx_ConfigAnalogFilter>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009d8:	f000 ffaa 	bl	8001930 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009dc:	2100      	movs	r1, #0
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_I2C1_Init+0x74>)
 80009e0:	f002 fc21 	bl	8003226 <HAL_I2CEx_ConfigDigitalFilter>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009ea:	f000 ffa1 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200001b4 	.word	0x200001b4
 80009f8:	40005400 	.word	0x40005400
 80009fc:	20303e5d 	.word	0x20303e5d

08000a00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08e      	sub	sp, #56	; 0x38
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a20:	463b      	mov	r3, r7
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]
 8000a2e:	615a      	str	r2, [r3, #20]
 8000a30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a32:	4b33      	ldr	r3, [pc, #204]	; (8000b00 <MX_TIM2_Init+0x100>)
 8000a34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a38:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 255;
 8000a3a:	4b31      	ldr	r3, [pc, #196]	; (8000b00 <MX_TIM2_Init+0x100>)
 8000a3c:	22ff      	movs	r2, #255	; 0xff
 8000a3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a40:	4b2f      	ldr	r3, [pc, #188]	; (8000b00 <MX_TIM2_Init+0x100>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000a46:	4b2e      	ldr	r3, [pc, #184]	; (8000b00 <MX_TIM2_Init+0x100>)
 8000a48:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a4c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4e:	4b2c      	ldr	r3, [pc, #176]	; (8000b00 <MX_TIM2_Init+0x100>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a54:	4b2a      	ldr	r3, [pc, #168]	; (8000b00 <MX_TIM2_Init+0x100>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a5a:	4829      	ldr	r0, [pc, #164]	; (8000b00 <MX_TIM2_Init+0x100>)
 8000a5c:	f003 fd68 	bl	8004530 <HAL_TIM_Base_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000a66:	f000 ff63 	bl	8001930 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a74:	4619      	mov	r1, r3
 8000a76:	4822      	ldr	r0, [pc, #136]	; (8000b00 <MX_TIM2_Init+0x100>)
 8000a78:	f004 f8a0 	bl	8004bbc <HAL_TIM_ConfigClockSource>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000a82:	f000 ff55 	bl	8001930 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a86:	481e      	ldr	r0, [pc, #120]	; (8000b00 <MX_TIM2_Init+0x100>)
 8000a88:	f003 fda9 	bl	80045de <HAL_TIM_PWM_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000a92:	f000 ff4d 	bl	8001930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4816      	ldr	r0, [pc, #88]	; (8000b00 <MX_TIM2_Init+0x100>)
 8000aa6:	f004 fd11 	bl	80054cc <HAL_TIMEx_MasterConfigSynchronization>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000ab0:	f000 ff3e 	bl	8001930 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ab4:	2360      	movs	r3, #96	; 0x60
 8000ab6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	4619      	mov	r1, r3
 8000aca:	480d      	ldr	r0, [pc, #52]	; (8000b00 <MX_TIM2_Init+0x100>)
 8000acc:	f003 ff62 	bl	8004994 <HAL_TIM_PWM_ConfigChannel>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000ad6:	f000 ff2b 	bl	8001930 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ada:	463b      	mov	r3, r7
 8000adc:	2208      	movs	r2, #8
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4807      	ldr	r0, [pc, #28]	; (8000b00 <MX_TIM2_Init+0x100>)
 8000ae2:	f003 ff57 	bl	8004994 <HAL_TIM_PWM_ConfigChannel>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000aec:	f000 ff20 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000af0:	4803      	ldr	r0, [pc, #12]	; (8000b00 <MX_TIM2_Init+0x100>)
 8000af2:	f000 ffe9 	bl	8001ac8 <HAL_TIM_MspPostInit>

}
 8000af6:	bf00      	nop
 8000af8:	3738      	adds	r7, #56	; 0x38
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000200 	.word	0x20000200

08000b04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b08:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <MX_USART3_UART_Init+0x58>)
 8000b0a:	4a15      	ldr	r2, [pc, #84]	; (8000b60 <MX_USART3_UART_Init+0x5c>)
 8000b0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b0e:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <MX_USART3_UART_Init+0x58>)
 8000b10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <MX_USART3_UART_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <MX_USART3_UART_Init+0x58>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <MX_USART3_UART_Init+0x58>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <MX_USART3_UART_Init+0x58>)
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <MX_USART3_UART_Init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_USART3_UART_Init+0x58>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <MX_USART3_UART_Init+0x58>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <MX_USART3_UART_Init+0x58>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_USART3_UART_Init+0x58>)
 8000b48:	f004 fd4e 	bl	80055e8 <HAL_UART_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b52:	f000 feed 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000130 	.word	0x20000130
 8000b60:	40004800 	.word	0x40004800

08000b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08c      	sub	sp, #48	; 0x30
 8000b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7a:	4b95      	ldr	r3, [pc, #596]	; (8000dd0 <MX_GPIO_Init+0x26c>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a94      	ldr	r2, [pc, #592]	; (8000dd0 <MX_GPIO_Init+0x26c>)
 8000b80:	f043 0304 	orr.w	r3, r3, #4
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b92      	ldr	r3, [pc, #584]	; (8000dd0 <MX_GPIO_Init+0x26c>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0304 	and.w	r3, r3, #4
 8000b8e:	61bb      	str	r3, [r7, #24]
 8000b90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b92:	4b8f      	ldr	r3, [pc, #572]	; (8000dd0 <MX_GPIO_Init+0x26c>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a8e      	ldr	r2, [pc, #568]	; (8000dd0 <MX_GPIO_Init+0x26c>)
 8000b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b8c      	ldr	r3, [pc, #560]	; (8000dd0 <MX_GPIO_Init+0x26c>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	4b89      	ldr	r3, [pc, #548]	; (8000dd0 <MX_GPIO_Init+0x26c>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a88      	ldr	r2, [pc, #544]	; (8000dd0 <MX_GPIO_Init+0x26c>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b86      	ldr	r3, [pc, #536]	; (8000dd0 <MX_GPIO_Init+0x26c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	4b83      	ldr	r3, [pc, #524]	; (8000dd0 <MX_GPIO_Init+0x26c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a82      	ldr	r2, [pc, #520]	; (8000dd0 <MX_GPIO_Init+0x26c>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b80      	ldr	r3, [pc, #512]	; (8000dd0 <MX_GPIO_Init+0x26c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bda:	4b7d      	ldr	r3, [pc, #500]	; (8000dd0 <MX_GPIO_Init+0x26c>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a7c      	ldr	r2, [pc, #496]	; (8000dd0 <MX_GPIO_Init+0x26c>)
 8000be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b7a      	ldr	r3, [pc, #488]	; (8000dd0 <MX_GPIO_Init+0x26c>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bf2:	4b77      	ldr	r3, [pc, #476]	; (8000dd0 <MX_GPIO_Init+0x26c>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a76      	ldr	r2, [pc, #472]	; (8000dd0 <MX_GPIO_Init+0x26c>)
 8000bf8:	f043 0310 	orr.w	r3, r3, #16
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b74      	ldr	r3, [pc, #464]	; (8000dd0 <MX_GPIO_Init+0x26c>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0310 	and.w	r3, r3, #16
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0a:	4b71      	ldr	r3, [pc, #452]	; (8000dd0 <MX_GPIO_Init+0x26c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a70      	ldr	r2, [pc, #448]	; (8000dd0 <MX_GPIO_Init+0x26c>)
 8000c10:	f043 0308 	orr.w	r3, r3, #8
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b6e      	ldr	r3, [pc, #440]	; (8000dd0 <MX_GPIO_Init+0x26c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0308 	and.w	r3, r3, #8
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2140      	movs	r1, #64	; 0x40
 8000c26:	486b      	ldr	r0, [pc, #428]	; (8000dd4 <MX_GPIO_Init+0x270>)
 8000c28:	f001 fc12 	bl	8002450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c32:	4869      	ldr	r0, [pc, #420]	; (8000dd8 <MX_GPIO_Init+0x274>)
 8000c34:	f001 fc0c 	bl	8002450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_SET);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	4867      	ldr	r0, [pc, #412]	; (8000ddc <MX_GPIO_Init+0x278>)
 8000c3e:	f001 fc07 	bl	8002450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c48:	4865      	ldr	r0, [pc, #404]	; (8000de0 <MX_GPIO_Init+0x27c>)
 8000c4a:	f001 fc01 	bl	8002450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c54:	4863      	ldr	r0, [pc, #396]	; (8000de4 <MX_GPIO_Init+0x280>)
 8000c56:	f001 fbfb 	bl	8002450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c60:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	4619      	mov	r1, r3
 8000c70:	485c      	ldr	r0, [pc, #368]	; (8000de4 <MX_GPIO_Init+0x280>)
 8000c72:	f001 fa29 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c76:	2332      	movs	r3, #50	; 0x32
 8000c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c82:	2303      	movs	r3, #3
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c86:	230b      	movs	r3, #11
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4854      	ldr	r0, [pc, #336]	; (8000de4 <MX_GPIO_Init+0x280>)
 8000c92:	f001 fa19 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c96:	2386      	movs	r3, #134	; 0x86
 8000c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ca6:	230b      	movs	r3, #11
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4848      	ldr	r0, [pc, #288]	; (8000dd4 <MX_GPIO_Init+0x270>)
 8000cb2:	f001 fa09 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cb6:	2340      	movs	r3, #64	; 0x40
 8000cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4841      	ldr	r0, [pc, #260]	; (8000dd4 <MX_GPIO_Init+0x270>)
 8000cce:	f001 f9fb 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000cd2:	f244 0381 	movw	r3, #16513	; 0x4081
 8000cd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce4:	f107 031c 	add.w	r3, r7, #28
 8000ce8:	4619      	mov	r1, r3
 8000cea:	483b      	ldr	r0, [pc, #236]	; (8000dd8 <MX_GPIO_Init+0x274>)
 8000cec:	f001 f9ec 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	4619      	mov	r1, r3
 8000d06:	4835      	ldr	r0, [pc, #212]	; (8000ddc <MX_GPIO_Init+0x278>)
 8000d08:	f001 f9de 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d12:	2301      	movs	r3, #1
 8000d14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d1e:	f107 031c 	add.w	r3, r7, #28
 8000d22:	4619      	mov	r1, r3
 8000d24:	482e      	ldr	r0, [pc, #184]	; (8000de0 <MX_GPIO_Init+0x27c>)
 8000d26:	f001 f9cf 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d3c:	230b      	movs	r3, #11
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	4619      	mov	r1, r3
 8000d46:	4824      	ldr	r0, [pc, #144]	; (8000dd8 <MX_GPIO_Init+0x274>)
 8000d48:	f001 f9be 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d52:	2301      	movs	r3, #1
 8000d54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	481f      	ldr	r0, [pc, #124]	; (8000de4 <MX_GPIO_Init+0x280>)
 8000d66:	f001 f9af 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d6a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d7c:	230a      	movs	r3, #10
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	4619      	mov	r1, r3
 8000d86:	4813      	ldr	r0, [pc, #76]	; (8000dd4 <MX_GPIO_Init+0x270>)
 8000d88:	f001 f99e 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d92:	2300      	movs	r3, #0
 8000d94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	4619      	mov	r1, r3
 8000da0:	480c      	ldr	r0, [pc, #48]	; (8000dd4 <MX_GPIO_Init+0x270>)
 8000da2:	f001 f991 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000da6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000db8:	230b      	movs	r3, #11
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dbc:	f107 031c 	add.w	r3, r7, #28
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4806      	ldr	r0, [pc, #24]	; (8000ddc <MX_GPIO_Init+0x278>)
 8000dc4:	f001 f980 	bl	80020c8 <HAL_GPIO_Init>

}
 8000dc8:	bf00      	nop
 8000dca:	3730      	adds	r7, #48	; 0x30
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	40020400 	.word	0x40020400
 8000ddc:	40021800 	.word	0x40021800
 8000de0:	40021000 	.word	0x40021000
 8000de4:	40020800 	.word	0x40020800

08000de8 <MPU6050_Init>:
}



uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b088      	sub	sp, #32
 8000dec:	af04      	add	r7, sp, #16
 8000dee:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8000df0:	2364      	movs	r3, #100	; 0x64
 8000df2:	9302      	str	r3, [sp, #8]
 8000df4:	2301      	movs	r3, #1
 8000df6:	9301      	str	r3, [sp, #4]
 8000df8:	f107 030f 	add.w	r3, r7, #15
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	2301      	movs	r3, #1
 8000e00:	2275      	movs	r2, #117	; 0x75
 8000e02:	21d0      	movs	r1, #208	; 0xd0
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f001 fcfb 	bl	8002800 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	2b68      	cmp	r3, #104	; 0x68
 8000e0e:	d13d      	bne.n	8000e8c <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8000e14:	2364      	movs	r3, #100	; 0x64
 8000e16:	9302      	str	r3, [sp, #8]
 8000e18:	2301      	movs	r3, #1
 8000e1a:	9301      	str	r3, [sp, #4]
 8000e1c:	f107 030e 	add.w	r3, r7, #14
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	2301      	movs	r3, #1
 8000e24:	226b      	movs	r2, #107	; 0x6b
 8000e26:	21d0      	movs	r1, #208	; 0xd0
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f001 fbd5 	bl	80025d8 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8000e2e:	2307      	movs	r3, #7
 8000e30:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8000e32:	2364      	movs	r3, #100	; 0x64
 8000e34:	9302      	str	r3, [sp, #8]
 8000e36:	2301      	movs	r3, #1
 8000e38:	9301      	str	r3, [sp, #4]
 8000e3a:	f107 030e 	add.w	r3, r7, #14
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	2301      	movs	r3, #1
 8000e42:	2219      	movs	r2, #25
 8000e44:	21d0      	movs	r1, #208	; 0xd0
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f001 fbc6 	bl	80025d8 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000e50:	2364      	movs	r3, #100	; 0x64
 8000e52:	9302      	str	r3, [sp, #8]
 8000e54:	2301      	movs	r3, #1
 8000e56:	9301      	str	r3, [sp, #4]
 8000e58:	f107 030e 	add.w	r3, r7, #14
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	2301      	movs	r3, #1
 8000e60:	221c      	movs	r2, #28
 8000e62:	21d0      	movs	r1, #208	; 0xd0
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f001 fbb7 	bl	80025d8 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000e6e:	2364      	movs	r3, #100	; 0x64
 8000e70:	9302      	str	r3, [sp, #8]
 8000e72:	2301      	movs	r3, #1
 8000e74:	9301      	str	r3, [sp, #4]
 8000e76:	f107 030e 	add.w	r3, r7, #14
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	221b      	movs	r2, #27
 8000e80:	21d0      	movs	r1, #208	; 0xd0
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f001 fba8 	bl	80025d8 <HAL_I2C_Mem_Write>
        return 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	e000      	b.n	8000e8e <MPU6050_Init+0xa6>
    }
    return 1;
 8000e8c:	2301      	movs	r3, #1
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <MPU6050_Read_All>:
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b094      	sub	sp, #80	; 0x50
 8000e9c:	af04      	add	r7, sp, #16
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8000ea2:	2364      	movs	r3, #100	; 0x64
 8000ea4:	9302      	str	r3, [sp, #8]
 8000ea6:	230e      	movs	r3, #14
 8000ea8:	9301      	str	r3, [sp, #4]
 8000eaa:	f107 0308 	add.w	r3, r7, #8
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	223b      	movs	r2, #59	; 0x3b
 8000eb4:	21d0      	movs	r1, #208	; 0xd0
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f001 fca2 	bl	8002800 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8000ebc:	7a3b      	ldrb	r3, [r7, #8]
 8000ebe:	021b      	lsls	r3, r3, #8
 8000ec0:	b21a      	sxth	r2, r3
 8000ec2:	7a7b      	ldrb	r3, [r7, #9]
 8000ec4:	b21b      	sxth	r3, r3
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	b21a      	sxth	r2, r3
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8000ece:	7abb      	ldrb	r3, [r7, #10]
 8000ed0:	021b      	lsls	r3, r3, #8
 8000ed2:	b21a      	sxth	r2, r3
 8000ed4:	7afb      	ldrb	r3, [r7, #11]
 8000ed6:	b21b      	sxth	r3, r3
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	b21a      	sxth	r2, r3
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8000ee0:	7b3b      	ldrb	r3, [r7, #12]
 8000ee2:	021b      	lsls	r3, r3, #8
 8000ee4:	b21a      	sxth	r2, r3
 8000ee6:	7b7b      	ldrb	r3, [r7, #13]
 8000ee8:	b21b      	sxth	r3, r3
 8000eea:	4313      	orrs	r3, r2
 8000eec:	b21a      	sxth	r2, r3
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8000ef2:	7bbb      	ldrb	r3, [r7, #14]
 8000ef4:	021b      	lsls	r3, r3, #8
 8000ef6:	b21a      	sxth	r2, r3
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	b21b      	sxth	r3, r3
 8000efc:	4313      	orrs	r3, r2
 8000efe:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8000f00:	7c3b      	ldrb	r3, [r7, #16]
 8000f02:	021b      	lsls	r3, r3, #8
 8000f04:	b21a      	sxth	r2, r3
 8000f06:	7c7b      	ldrb	r3, [r7, #17]
 8000f08:	b21b      	sxth	r3, r3
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	b21a      	sxth	r2, r3
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8000f12:	7cbb      	ldrb	r3, [r7, #18]
 8000f14:	021b      	lsls	r3, r3, #8
 8000f16:	b21a      	sxth	r2, r3
 8000f18:	7cfb      	ldrb	r3, [r7, #19]
 8000f1a:	b21b      	sxth	r3, r3
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	b21a      	sxth	r2, r3
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8000f24:	7d3b      	ldrb	r3, [r7, #20]
 8000f26:	021b      	lsls	r3, r3, #8
 8000f28:	b21a      	sxth	r2, r3
 8000f2a:	7d7b      	ldrb	r3, [r7, #21]
 8000f2c:	b21b      	sxth	r3, r3
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	b21a      	sxth	r2, r3
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f3c:	ee07 3a90 	vmov	s15, r3
 8000f40:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000f44:	ed9f 5b9e 	vldr	d5, [pc, #632]	; 80011c0 <MPU6050_Read_All+0x328>
 8000f48:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	ed83 7b02 	vstr	d7, [r3, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f58:	ee07 3a90 	vmov	s15, r3
 8000f5c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000f60:	ed9f 5b97 	vldr	d5, [pc, #604]	; 80011c0 <MPU6050_Read_All+0x328>
 8000f64:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	ed83 7b04 	vstr	d7, [r3, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f74:	ee07 3a90 	vmov	s15, r3
 8000f78:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000f7c:	ed9f 5b92 	vldr	d5, [pc, #584]	; 80011c8 <MPU6050_Read_All+0x330>
 8000f80:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	ed83 7b06 	vstr	d7, [r3, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8000f8a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8000f8e:	ee07 3a90 	vmov	s15, r3
 8000f92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f96:	eddf 6a98 	vldr	s13, [pc, #608]	; 80011f8 <MPU6050_Read_All+0x360>
 8000f9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f9e:	ed9f 7a97 	vldr	s14, [pc, #604]	; 80011fc <MPU6050_Read_All+0x364>
 8000fa2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000fb2:	ee07 3a90 	vmov	s15, r3
 8000fb6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fba:	ed9f 5b85 	vldr	d5, [pc, #532]	; 80011d0 <MPU6050_Read_All+0x338>
 8000fbe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8000fce:	ee07 3a90 	vmov	s15, r3
 8000fd2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fd6:	ed9f 5b7e 	vldr	d5, [pc, #504]	; 80011d0 <MPU6050_Read_All+0x338>
 8000fda:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8000fea:	ee07 3a90 	vmov	s15, r3
 8000fee:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000ff2:	ed9f 5b77 	vldr	d5, [pc, #476]	; 80011d0 <MPU6050_Read_All+0x338>
 8000ff6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001000:	f000 ff70 	bl	8001ee4 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	4b7e      	ldr	r3, [pc, #504]	; (8001200 <MPU6050_Read_All+0x368>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	ee07 3a90 	vmov	s15, r3
 8001010:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001014:	ed9f 5b70 	vldr	d5, [pc, #448]	; 80011d8 <MPU6050_Read_All+0x340>
 8001018:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800101c:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001020:	f000 ff60 	bl	8001ee4 <HAL_GetTick>
 8001024:	4603      	mov	r3, r0
 8001026:	4a76      	ldr	r2, [pc, #472]	; (8001200 <MPU6050_Read_All+0x368>)
 8001028:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001030:	461a      	mov	r2, r3
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001038:	fb03 f202 	mul.w	r2, r3, r2
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001042:	4619      	mov	r1, r3
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800104a:	fb03 f301 	mul.w	r3, r3, r1
 800104e:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001050:	ee07 3a90 	vmov	s15, r3
 8001054:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001058:	eeb0 0b47 	vmov.f64	d0, d7
 800105c:	f006 fddc 	bl	8007c18 <sqrt>
 8001060:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8001064:	ed97 7b08 	vldr	d7, [r7, #32]
 8001068:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800106c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001070:	d017      	beq.n	80010a2 <MPU6050_Read_All+0x20a>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001078:	ee07 3a90 	vmov	s15, r3
 800107c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001080:	ed97 7b08 	vldr	d7, [r7, #32]
 8001084:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001088:	eeb0 0b45 	vmov.f64	d0, d5
 800108c:	f006 fc8c 	bl	80079a8 <atan>
 8001090:	eeb0 7b40 	vmov.f64	d7, d0
 8001094:	ed9f 6b52 	vldr	d6, [pc, #328]	; 80011e0 <MPU6050_Read_All+0x348>
 8001098:	ee27 7b06 	vmul.f64	d7, d7, d6
 800109c:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80010a0:	e005      	b.n	80010ae <MPU6050_Read_All+0x216>
    }
    else
    {
        roll = 0.0;
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	f04f 0300 	mov.w	r3, #0
 80010aa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b4:	425b      	negs	r3, r3
 80010b6:	ee07 3a90 	vmov	s15, r3
 80010ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010c4:	ee06 3a90 	vmov	s13, r3
 80010c8:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80010cc:	eeb0 1b46 	vmov.f64	d1, d6
 80010d0:	eeb0 0b47 	vmov.f64	d0, d7
 80010d4:	f006 fd9c 	bl	8007c10 <atan2>
 80010d8:	eeb0 7b40 	vmov.f64	d7, d0
 80010dc:	ed9f 6b40 	vldr	d6, [pc, #256]	; 80011e0 <MPU6050_Read_All+0x348>
 80010e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010e4:	ed87 7b06 	vstr	d7, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 80010e8:	ed97 7b06 	vldr	d7, [r7, #24]
 80010ec:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 80011e8 <MPU6050_Read_All+0x350>
 80010f0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80010f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f8:	d509      	bpl.n	800110e <MPU6050_Read_All+0x276>
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8001100:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 80011f0 <MPU6050_Read_All+0x358>
 8001104:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800110c:	dc12      	bgt.n	8001134 <MPU6050_Read_All+0x29c>
 800110e:	ed97 7b06 	vldr	d7, [r7, #24]
 8001112:	ed9f 6b37 	vldr	d6, [pc, #220]	; 80011f0 <MPU6050_Read_All+0x358>
 8001116:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800111a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111e:	dd14      	ble.n	800114a <MPU6050_Read_All+0x2b2>
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8001126:	ed9f 6b30 	vldr	d6, [pc, #192]	; 80011e8 <MPU6050_Read_All+0x350>
 800112a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800112e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001132:	d50a      	bpl.n	800114a <MPU6050_Read_All+0x2b2>
    {
        KalmanY.angle = pitch;
 8001134:	4933      	ldr	r1, [pc, #204]	; (8001204 <MPU6050_Read_All+0x36c>)
 8001136:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800113a:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 800113e:	6839      	ldr	r1, [r7, #0]
 8001140:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001144:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001148:	e010      	b.n	800116c <MPU6050_Read_All+0x2d4>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001150:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001154:	eeb0 1b47 	vmov.f64	d1, d7
 8001158:	ed97 0b06 	vldr	d0, [r7, #24]
 800115c:	4829      	ldr	r0, [pc, #164]	; (8001204 <MPU6050_Read_All+0x36c>)
 800115e:	f000 f855 	bl	800120c <Kalman_getAngle>
 8001162:	eeb0 7b40 	vmov.f64	d7, d0
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8001172:	eeb0 7bc7 	vabs.f64	d7, d7
 8001176:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 80011f0 <MPU6050_Read_All+0x358>
 800117a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800117e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001182:	dd07      	ble.n	8001194 <MPU6050_Read_All+0x2fc>
        DataStruct->Gx = -DataStruct->Gx;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800118a:	eeb1 7b47 	vneg.f64	d7, d7
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800119a:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800119e:	eeb0 1b47 	vmov.f64	d1, d7
 80011a2:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80011a6:	4818      	ldr	r0, [pc, #96]	; (8001208 <MPU6050_Read_All+0x370>)
 80011a8:	f000 f830 	bl	800120c <Kalman_getAngle>
 80011ac:	eeb0 7b40 	vmov.f64	d7, d0
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 80011b6:	bf00      	nop
 80011b8:	3740      	adds	r7, #64	; 0x40
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	00000000 	.word	0x00000000
 80011c4:	40d00000 	.word	0x40d00000
 80011c8:	00000000 	.word	0x00000000
 80011cc:	40cc2900 	.word	0x40cc2900
 80011d0:	00000000 	.word	0x00000000
 80011d4:	40606000 	.word	0x40606000
 80011d8:	00000000 	.word	0x00000000
 80011dc:	408f4000 	.word	0x408f4000
 80011e0:	1a63c1f8 	.word	0x1a63c1f8
 80011e4:	404ca5dc 	.word	0x404ca5dc
 80011e8:	00000000 	.word	0x00000000
 80011ec:	c0568000 	.word	0xc0568000
 80011f0:	00000000 	.word	0x00000000
 80011f4:	40568000 	.word	0x40568000
 80011f8:	43aa0000 	.word	0x43aa0000
 80011fc:	42121eb8 	.word	0x42121eb8
 8001200:	2000012c 	.word	0x2000012c
 8001204:	20000048 	.word	0x20000048
 8001208:	20000000 	.word	0x20000000

0800120c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 800120c:	b480      	push	{r7}
 800120e:	b097      	sub	sp, #92	; 0x5c
 8001210:	af00      	add	r7, sp, #0
 8001212:	61f8      	str	r0, [r7, #28]
 8001214:	ed87 0b04 	vstr	d0, [r7, #16]
 8001218:	ed87 1b02 	vstr	d1, [r7, #8]
 800121c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	ed93 7b08 	vldr	d7, [r3, #32]
 8001226:	ed97 6b02 	vldr	d6, [r7, #8]
 800122a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800122e:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	ed93 6b06 	vldr	d6, [r3, #24]
 8001238:	ed97 5b00 	vldr	d5, [r7]
 800123c:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8001240:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001244:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	ed83 7b06 	vstr	d7, [r3, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 800125a:	ed97 7b00 	vldr	d7, [r7]
 800125e:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001268:	ee35 5b47 	vsub.f64	d5, d5, d7
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001272:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	ed93 7b00 	vldr	d7, [r3]
 800127c:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001280:	ed97 7b00 	vldr	d7, [r7]
 8001284:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001288:	ee36 7b07 	vadd.f64	d7, d6, d7
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 800129e:	ed97 7b00 	vldr	d7, [r7]
 80012a2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80012a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 80012bc:	ed97 7b00 	vldr	d7, [r7]
 80012c0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80012c4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	ed93 5b02 	vldr	d5, [r3, #8]
 80012da:	ed97 7b00 	vldr	d7, [r7]
 80012de:	ee25 7b07 	vmul.f64	d7, d5, d7
 80012e2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	ed93 7b04 	vldr	d7, [r3, #16]
 80012f8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80012fc:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 8001306:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 800130a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800130e:	ed87 7b08 	vstr	d7, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 8001318:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 800131c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001320:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	ed93 7b06 	vldr	d7, [r3, #24]
 800132a:	ed97 6b04 	vldr	d6, [r7, #16]
 800132e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001332:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	ed93 6b06 	vldr	d6, [r3, #24]
 800133c:	ed97 5b08 	vldr	d5, [r7, #32]
 8001340:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001344:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001348:	ee36 7b07 	vadd.f64	d7, d6, d7
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	ed83 7b06 	vstr	d7, [r3, #24]
    Kalman->bias += K[1] * y;
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	ed93 6b08 	vldr	d6, [r3, #32]
 8001358:	ed97 5b0a 	vldr	d5, [r7, #40]	; 0x28
 800135c:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001360:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001364:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	ed83 7b08 	vstr	d7, [r3, #32]

    double P00_temp = Kalman->P[0][0];
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001374:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800137e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8001388:	ed97 5b08 	vldr	d5, [r7, #32]
 800138c:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001390:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001394:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 80013a4:	ed97 5b08 	vldr	d5, [r7, #32]
 80013a8:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80013ac:	ee25 7b07 	vmul.f64	d7, d5, d7
 80013b0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 80013c0:	ed97 5b0a 	vldr	d5, [r7, #40]	; 0x28
 80013c4:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80013c8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80013cc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 80013dc:	ed97 5b0a 	vldr	d5, [r7, #40]	; 0x28
 80013e0:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80013e4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80013e8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

    return Kalman->angle;
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80013f8:	ec43 2b17 	vmov	d7, r2, r3
}
 80013fc:	eeb0 0b47 	vmov.f64	d0, d7
 8001400:	375c      	adds	r7, #92	; 0x5c
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <printFloat>:

void printFloat(char *text, int dec_prec, int numberFloatToPrint, ...){
 800140c:	b40c      	push	{r2, r3}
 800140e:	b580      	push	{r7, lr}
 8001410:	ed2d 8b02 	vpush	{d8}
 8001414:	b0da      	sub	sp, #360	; 0x168
 8001416:	af00      	add	r7, sp, #0
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	6018      	str	r0, [r3, #0]
 800141c:	463b      	mov	r3, r7
 800141e:	6019      	str	r1, [r3, #0]
        va_list par;
        va_start(par, numberFloatToPrint);
 8001420:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001424:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

        displayFloatToInt_t* out_value = (displayFloatToInt_t*)malloc(sizeof(displayFloatToInt_t) * numberFloatToPrint);
 8001428:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800142c:	011b      	lsls	r3, r3, #4
 800142e:	4618      	mov	r0, r3
 8001430:	f004 fdf8 	bl	8006024 <malloc>
 8001434:	4603      	mov	r3, r0
 8001436:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

        for (int i=0; i<numberFloatToPrint; i++){
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001440:	e0a0      	b.n	8001584 <printFloat+0x178>
                float val = (float)va_arg(par, double);
 8001442:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001446:	3307      	adds	r3, #7
 8001448:	f023 0307 	bic.w	r3, r3, #7
 800144c:	f103 0208 	add.w	r2, r3, #8
 8001450:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001454:	ed93 7b00 	vldr	d7, [r3]
 8001458:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800145c:	edc7 7a58 	vstr	s15, [r7, #352]	; 0x160
//              printf("val : %f\n", val);
                if(val > 0.0){
 8001460:	edd7 7a58 	vldr	s15, [r7, #352]	; 0x160
 8001464:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146c:	dd08      	ble.n	8001480 <printFloat+0x74>
                        out_value[i].sign = 0;
 800146e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001472:	011b      	lsls	r3, r3, #4
 8001474:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8001478:	4413      	add	r3, r2
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	e014      	b.n	80014aa <printFloat+0x9e>
                } else if (val == 0.0){
 8001480:	edd7 7a58 	vldr	s15, [r7, #352]	; 0x160
 8001484:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148c:	d074      	beq.n	8001578 <printFloat+0x16c>
                        continue;
                } else {
                        out_value[i].sign = 1;
 800148e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001492:	011b      	lsls	r3, r3, #4
 8001494:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8001498:	4413      	add	r3, r2
 800149a:	2201      	movs	r2, #1
 800149c:	601a      	str	r2, [r3, #0]
                        val *=-1; // = -in;
 800149e:	edd7 7a58 	vldr	s15, [r7, #352]	; 0x160
 80014a2:	eef1 7a67 	vneg.f32	s15, s15
 80014a6:	edc7 7a58 	vstr	s15, [r7, #352]	; 0x160
                }
                out_value[i].exp=0;
 80014aa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80014ae:	011b      	lsls	r3, r3, #4
 80014b0:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80014b4:	4413      	add	r3, r2
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
                while (val < 1.0){
 80014ba:	e010      	b.n	80014de <printFloat+0xd2>
                        out_value[i].exp++;
 80014bc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80014c0:	011b      	lsls	r3, r3, #4
 80014c2:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80014c6:	4413      	add	r3, r2
 80014c8:	68da      	ldr	r2, [r3, #12]
 80014ca:	3201      	adds	r2, #1
 80014cc:	60da      	str	r2, [r3, #12]
                        val *= 10;
 80014ce:	edd7 7a58 	vldr	s15, [r7, #352]	; 0x160
 80014d2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80014d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014da:	edc7 7a58 	vstr	s15, [r7, #352]	; 0x160
                while (val < 1.0){
 80014de:	edd7 7a58 	vldr	s15, [r7, #352]	; 0x160
 80014e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ee:	d4e5      	bmi.n	80014bc <printFloat+0xb0>
                }
                out_value[i].out_int = val;
 80014f0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80014f4:	011b      	lsls	r3, r3, #4
 80014f6:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80014fa:	4413      	add	r3, r2
 80014fc:	edd7 7a58 	vldr	s15, [r7, #352]	; 0x160
 8001500:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001504:	ee17 2a90 	vmov	r2, s15
 8001508:	605a      	str	r2, [r3, #4]
                val = val - (float)(out_value[i].out_int);
 800150a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800150e:	011b      	lsls	r3, r3, #4
 8001510:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8001514:	4413      	add	r3, r2
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	ee07 3a90 	vmov	s15, r3
 800151c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001520:	ed97 7a58 	vldr	s14, [r7, #352]	; 0x160
 8001524:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001528:	edc7 7a58 	vstr	s15, [r7, #352]	; 0x160
                out_value[i].out_dec = (int32_t)trunc(val * pow(10, dec_prec));
 800152c:	edd7 7a58 	vldr	s15, [r7, #352]	; 0x160
 8001530:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001534:	463b      	mov	r3, r7
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	ee07 3a90 	vmov	s15, r3
 800153c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001540:	eeb0 1b47 	vmov.f64	d1, d7
 8001544:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8001548:	f005 ff6a 	bl	8007420 <pow>
 800154c:	eeb0 7b40 	vmov.f64	d7, d0
 8001550:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001554:	eeb0 0b47 	vmov.f64	d0, d7
 8001558:	f006 fb2a 	bl	8007bb0 <trunc>
 800155c:	eeb0 7b40 	vmov.f64	d7, d0
 8001560:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001564:	011b      	lsls	r3, r3, #4
 8001566:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800156a:	4413      	add	r3, r2
 800156c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001570:	ee17 2a90 	vmov	r2, s15
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	e000      	b.n	800157a <printFloat+0x16e>
                        continue;
 8001578:	bf00      	nop
        for (int i=0; i<numberFloatToPrint; i++){
 800157a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800157e:	3301      	adds	r3, #1
 8001580:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001584:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001588:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800158c:	429a      	cmp	r2, r3
 800158e:	f6ff af58 	blt.w	8001442 <printFloat+0x36>
        }

        char toPrint[256]="";
 8001592:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	3304      	adds	r3, #4
 800159c:	22fc      	movs	r2, #252	; 0xfc
 800159e:	2100      	movs	r1, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f004 fd4f 	bl	8006044 <memset>
        char number[64]="";
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	3304      	adds	r3, #4
 80015b0:	223c      	movs	r2, #60	; 0x3c
 80015b2:	2100      	movs	r1, #0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f004 fd45 	bl	8006044 <memset>
        int n_float=0, _index=0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80015c0:	2300      	movs	r3, #0
 80015c2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        for (int i=0; i<strlen(text); i++){
 80015c6:	2300      	movs	r3, #0
 80015c8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80015cc:	e07c      	b.n	80016c8 <printFloat+0x2bc>
            if (text[i]=='%'){
 80015ce:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80015d2:	1d3a      	adds	r2, r7, #4
 80015d4:	6812      	ldr	r2, [r2, #0]
 80015d6:	4413      	add	r3, r2
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b25      	cmp	r3, #37	; 0x25
 80015dc:	d161      	bne.n	80016a2 <printFloat+0x296>
				if (out_value[n_float].sign==0){
 80015de:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80015e2:	011b      	lsls	r3, r3, #4
 80015e4:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80015e8:	4413      	add	r3, r2
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d114      	bne.n	800161a <printFloat+0x20e>
						sprintf(number, "%d.%d", out_value[n_float].out_int, out_value[n_float].out_dec);
 80015f0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80015f4:	011b      	lsls	r3, r3, #4
 80015f6:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80015fa:	4413      	add	r3, r2
 80015fc:	6859      	ldr	r1, [r3, #4]
 80015fe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8001608:	4413      	add	r3, r2
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f107 000c 	add.w	r0, r7, #12
 8001610:	460a      	mov	r2, r1
 8001612:	493c      	ldr	r1, [pc, #240]	; (8001704 <printFloat+0x2f8>)
 8001614:	f004 fe66 	bl	80062e4 <siprintf>
 8001618:	e013      	b.n	8001642 <printFloat+0x236>
				} else {
					sprintf(number, "-%d.%d", out_value[n_float].out_int, (int)out_value[n_float].out_dec);
 800161a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800161e:	011b      	lsls	r3, r3, #4
 8001620:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8001624:	4413      	add	r3, r2
 8001626:	6859      	ldr	r1, [r3, #4]
 8001628:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800162c:	011b      	lsls	r3, r3, #4
 800162e:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8001632:	4413      	add	r3, r2
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f107 000c 	add.w	r0, r7, #12
 800163a:	460a      	mov	r2, r1
 800163c:	4932      	ldr	r1, [pc, #200]	; (8001708 <printFloat+0x2fc>)
 800163e:	f004 fe51 	bl	80062e4 <siprintf>
				}

				if (out_value[n_float].exp > 0)
 8001642:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800164c:	4413      	add	r3, r2
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	2b00      	cmp	r3, #0
 8001652:	dd0d      	ble.n	8001670 <printFloat+0x264>
					sprintf(number, "%s x10^(-%d)", number, out_value[n_float].exp);
 8001654:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001658:	011b      	lsls	r3, r3, #4
 800165a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800165e:	4413      	add	r3, r2
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f107 020c 	add.w	r2, r7, #12
 8001666:	f107 000c 	add.w	r0, r7, #12
 800166a:	4928      	ldr	r1, [pc, #160]	; (800170c <printFloat+0x300>)
 800166c:	f004 fe3a 	bl	80062e4 <siprintf>
				n_float++;
 8001670:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001674:	3301      	adds	r3, #1
 8001676:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
                strcat(toPrint, number);
 800167a:	f107 020c 	add.w	r2, r7, #12
 800167e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f004 fe4d 	bl	8006324 <strcat>
                _index+=strlen(number);
 800168a:	f107 030c 	add.w	r3, r7, #12
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe fdd6 	bl	8000240 <strlen>
 8001694:	4602      	mov	r2, r0
 8001696:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800169a:	4413      	add	r3, r2
 800169c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80016a0:	e00d      	b.n	80016be <printFloat+0x2b2>
            } else {
            	toPrint[_index++] = text[i];
 80016a2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80016a6:	1d3a      	adds	r2, r7, #4
 80016a8:	6812      	ldr	r2, [r2, #0]
 80016aa:	441a      	add	r2, r3
 80016ac:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80016b0:	1c59      	adds	r1, r3, #1
 80016b2:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 80016b6:	7811      	ldrb	r1, [r2, #0]
 80016b8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80016bc:	54d1      	strb	r1, [r2, r3]
        for (int i=0; i<strlen(text); i++){
 80016be:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80016c2:	3301      	adds	r3, #1
 80016c4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	6818      	ldr	r0, [r3, #0]
 80016cc:	f7fe fdb8 	bl	8000240 <strlen>
 80016d0:	4602      	mov	r2, r0
 80016d2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80016d6:	429a      	cmp	r2, r3
 80016d8:	f63f af79 	bhi.w	80015ce <printFloat+0x1c2>
            }
        }
//        if (numberFloatToPrint!=n_float)
//                printf("Bad argument into printToFloat. Did you miss the %% ? \r\n");
        printf("%s\r\n", toPrint);
 80016dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016e0:	4619      	mov	r1, r3
 80016e2:	480b      	ldr	r0, [pc, #44]	; (8001710 <printFloat+0x304>)
 80016e4:	f004 fd60 	bl	80061a8 <iprintf>
        free(out_value);
 80016e8:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 80016ec:	f004 fca2 	bl	8006034 <free>
}
 80016f0:	bf00      	nop
 80016f2:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 80016f6:	46bd      	mov	sp, r7
 80016f8:	ecbd 8b02 	vpop	{d8}
 80016fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001700:	b002      	add	sp, #8
 8001702:	4770      	bx	lr
 8001704:	08007f90 	.word	0x08007f90
 8001708:	08007f98 	.word	0x08007f98
 800170c:	08007fa0 	.word	0x08007fa0
 8001710:	08007fb0 	.word	0x08007fb0

08001714 <sign>:





int sign(double v) {
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	ed87 0b00 	vstr	d0, [r7]
	if (v > 0)
 800171e:	ed97 7b00 	vldr	d7, [r7]
 8001722:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172a:	dd01      	ble.n	8001730 <sign+0x1c>
		return 1;
 800172c:	2301      	movs	r3, #1
 800172e:	e00a      	b.n	8001746 <sign+0x32>
	if (v < 0)
 8001730:	ed97 7b00 	vldr	d7, [r7]
 8001734:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173c:	d502      	bpl.n	8001744 <sign+0x30>
		return -1;
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
 8001742:	e000      	b.n	8001746 <sign+0x32>
	return 0;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
	...

08001754 <control_H_bridge>:

void control_H_bridge(int8_t dir_1, uint16_t duty_1, int8_t dir_2, uint16_t duty_2) {
 8001754:	b590      	push	{r4, r7, lr}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4604      	mov	r4, r0
 800175c:	4608      	mov	r0, r1
 800175e:	4611      	mov	r1, r2
 8001760:	461a      	mov	r2, r3
 8001762:	4623      	mov	r3, r4
 8001764:	71fb      	strb	r3, [r7, #7]
 8001766:	4603      	mov	r3, r0
 8001768:	80bb      	strh	r3, [r7, #4]
 800176a:	460b      	mov	r3, r1
 800176c:	71bb      	strb	r3, [r7, #6]
 800176e:	4613      	mov	r3, r2
 8001770:	807b      	strh	r3, [r7, #2]
	// motore 1
	// direction pin: 	PG0, PE15
	// pwm pin:			PB10
	switch (dir_1) {
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800177a:	d00d      	beq.n	8001798 <control_H_bridge+0x44>
 800177c:	2b01      	cmp	r3, #1
 800177e:	d117      	bne.n	80017b0 <control_H_bridge+0x5c>
	case 1:
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 0);
 8001780:	2200      	movs	r2, #0
 8001782:	2101      	movs	r1, #1
 8001784:	4826      	ldr	r0, [pc, #152]	; (8001820 <control_H_bridge+0xcc>)
 8001786:	f000 fe63 	bl	8002450 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 800178a:	2201      	movs	r2, #1
 800178c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001790:	4824      	ldr	r0, [pc, #144]	; (8001824 <control_H_bridge+0xd0>)
 8001792:	f000 fe5d 	bl	8002450 <HAL_GPIO_WritePin>
		break;
 8001796:	e012      	b.n	80017be <control_H_bridge+0x6a>
	case -1:
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 1);
 8001798:	2201      	movs	r2, #1
 800179a:	2101      	movs	r1, #1
 800179c:	4820      	ldr	r0, [pc, #128]	; (8001820 <control_H_bridge+0xcc>)
 800179e:	f000 fe57 	bl	8002450 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017a8:	481e      	ldr	r0, [pc, #120]	; (8001824 <control_H_bridge+0xd0>)
 80017aa:	f000 fe51 	bl	8002450 <HAL_GPIO_WritePin>
		break;
 80017ae:	e006      	b.n	80017be <control_H_bridge+0x6a>
	default:
		printf("control_H_bridge input error. dir_1=%d\r\n", dir_1);
 80017b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b4:	4619      	mov	r1, r3
 80017b6:	481c      	ldr	r0, [pc, #112]	; (8001828 <control_H_bridge+0xd4>)
 80017b8:	f004 fcf6 	bl	80061a8 <iprintf>
		while(1) ;
 80017bc:	e7fe      	b.n	80017bc <control_H_bridge+0x68>
	}

	// motore 2
	// direction pin: 	PC8, PA6
	// pwm pin:			PA5
	switch (dir_2) {
 80017be:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80017c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c6:	d00d      	beq.n	80017e4 <control_H_bridge+0x90>
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d117      	bne.n	80017fc <control_H_bridge+0xa8>
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 80017cc:	2200      	movs	r2, #0
 80017ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017d2:	4816      	ldr	r0, [pc, #88]	; (800182c <control_H_bridge+0xd8>)
 80017d4:	f000 fe3c 	bl	8002450 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80017d8:	2201      	movs	r2, #1
 80017da:	2140      	movs	r1, #64	; 0x40
 80017dc:	4814      	ldr	r0, [pc, #80]	; (8001830 <control_H_bridge+0xdc>)
 80017de:	f000 fe37 	bl	8002450 <HAL_GPIO_WritePin>
		break;
 80017e2:	e012      	b.n	800180a <control_H_bridge+0xb6>
	case -1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 80017e4:	2201      	movs	r2, #1
 80017e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ea:	4810      	ldr	r0, [pc, #64]	; (800182c <control_H_bridge+0xd8>)
 80017ec:	f000 fe30 	bl	8002450 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2140      	movs	r1, #64	; 0x40
 80017f4:	480e      	ldr	r0, [pc, #56]	; (8001830 <control_H_bridge+0xdc>)
 80017f6:	f000 fe2b 	bl	8002450 <HAL_GPIO_WritePin>
		break;
 80017fa:	e006      	b.n	800180a <control_H_bridge+0xb6>
	default:
		printf("control_H_bridge input error. dir_2=%d\r\n", dir_2);
 80017fc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001800:	4619      	mov	r1, r3
 8001802:	480c      	ldr	r0, [pc, #48]	; (8001834 <control_H_bridge+0xe0>)
 8001804:	f004 fcd0 	bl	80061a8 <iprintf>
		while(1) ;
 8001808:	e7fe      	b.n	8001808 <control_H_bridge+0xb4>
	}

	set_pwm(duty_1, duty_2);
 800180a:	88bb      	ldrh	r3, [r7, #4]
 800180c:	887a      	ldrh	r2, [r7, #2]
 800180e:	4611      	mov	r1, r2
 8001810:	4618      	mov	r0, r3
 8001812:	f000 f811 	bl	8001838 <set_pwm>
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	bd90      	pop	{r4, r7, pc}
 800181e:	bf00      	nop
 8001820:	40021800 	.word	0x40021800
 8001824:	40021000 	.word	0x40021000
 8001828:	08007fb8 	.word	0x08007fb8
 800182c:	40020800 	.word	0x40020800
 8001830:	40020000 	.word	0x40020000
 8001834:	08007fe4 	.word	0x08007fe4

08001838 <set_pwm>:


void set_pwm(uint32_t duty_1, uint32_t duty_2) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b090      	sub	sp, #64	; 0x40
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001842:	2100      	movs	r1, #0
 8001844:	482f      	ldr	r0, [pc, #188]	; (8001904 <set_pwm+0xcc>)
 8001846:	f003 f825 	bl	8004894 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 800184a:	2108      	movs	r1, #8
 800184c:	482d      	ldr	r0, [pc, #180]	; (8001904 <set_pwm+0xcc>)
 800184e:	f003 f821 	bl	8004894 <HAL_TIM_PWM_Stop>


	TIM_OC_InitTypeDef sConfigOC1 = {0};
 8001852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
 8001860:	611a      	str	r2, [r3, #16]
 8001862:	615a      	str	r2, [r3, #20]
 8001864:	619a      	str	r2, [r3, #24]
	TIM_OC_InitTypeDef sConfigOC2 = {0};
 8001866:	f107 0308 	add.w	r3, r7, #8
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]
 8001874:	611a      	str	r2, [r3, #16]
 8001876:	615a      	str	r2, [r3, #20]
 8001878:	619a      	str	r2, [r3, #24]

	sConfigOC1.OCMode = TIM_OCMODE_PWM1;
 800187a:	2360      	movs	r3, #96	; 0x60
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
//	sConfigOC1.Pulse = 93750;//htim2.Init.Period * duty_1 / 100;
	sConfigOC1.Pulse = (uint32_t)9999 * duty_1 / 100;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f242 720f 	movw	r2, #9999	; 0x270f
 8001884:	fb02 f303 	mul.w	r3, r2, r3
 8001888:	4a1f      	ldr	r2, [pc, #124]	; (8001908 <set_pwm+0xd0>)
 800188a:	fba2 2303 	umull	r2, r3, r2, r3
 800188e:	095b      	lsrs	r3, r3, #5
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC1.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001892:	2300      	movs	r3, #0
 8001894:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC1.OCFastMode = TIM_OCFAST_DISABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC1, TIM_CHANNEL_1) != HAL_OK)
 800189a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189e:	2200      	movs	r2, #0
 80018a0:	4619      	mov	r1, r3
 80018a2:	4818      	ldr	r0, [pc, #96]	; (8001904 <set_pwm+0xcc>)
 80018a4:	f003 f876 	bl	8004994 <HAL_TIM_PWM_ConfigChannel>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <set_pwm+0x7a>
	{
		Error_Handler();
 80018ae:	f000 f83f 	bl	8001930 <Error_Handler>
	}

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80018b2:	2100      	movs	r1, #0
 80018b4:	4813      	ldr	r0, [pc, #76]	; (8001904 <set_pwm+0xcc>)
 80018b6:	f002 fef3 	bl	80046a0 <HAL_TIM_PWM_Start>

	sConfigOC2.OCMode = TIM_OCMODE_PWM1;
 80018ba:	2360      	movs	r3, #96	; 0x60
 80018bc:	60bb      	str	r3, [r7, #8]
//	sConfigOC2.Pulse = 93750;//htim2.Init.Period * duty_2 / 100;
	sConfigOC2.Pulse = (uint32_t)9999 * duty_2 / 100;
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	f242 720f 	movw	r2, #9999	; 0x270f
 80018c4:	fb02 f303 	mul.w	r3, r2, r3
 80018c8:	4a0f      	ldr	r2, [pc, #60]	; (8001908 <set_pwm+0xd0>)
 80018ca:	fba2 2303 	umull	r2, r3, r2, r3
 80018ce:	095b      	lsrs	r3, r3, #5
 80018d0:	60fb      	str	r3, [r7, #12]
	sConfigOC2.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
	sConfigOC2.OCFastMode = TIM_OCFAST_DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]

	//printf("ch1: %d. input: %d\r\n", sConfigOC1.Pulse, duty_1);
	//printf("ch2: %d. input: %d\r\n", sConfigOC2.Pulse, duty_2);

	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC2, TIM_CHANNEL_3) != HAL_OK)
 80018da:	f107 0308 	add.w	r3, r7, #8
 80018de:	2208      	movs	r2, #8
 80018e0:	4619      	mov	r1, r3
 80018e2:	4808      	ldr	r0, [pc, #32]	; (8001904 <set_pwm+0xcc>)
 80018e4:	f003 f856 	bl	8004994 <HAL_TIM_PWM_ConfigChannel>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <set_pwm+0xba>
	{
		Error_Handler();
 80018ee:	f000 f81f 	bl	8001930 <Error_Handler>
	}
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80018f2:	2108      	movs	r1, #8
 80018f4:	4803      	ldr	r0, [pc, #12]	; (8001904 <set_pwm+0xcc>)
 80018f6:	f002 fed3 	bl	80046a0 <HAL_TIM_PWM_Start>


}
 80018fa:	bf00      	nop
 80018fc:	3740      	adds	r7, #64	; 0x40
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000200 	.word	0x20000200
 8001908:	51eb851f 	.word	0x51eb851f

0800190c <__io_putchar>:




PUTCHAR_PROTOTYPE
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001914:	1d39      	adds	r1, r7, #4
 8001916:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800191a:	2201      	movs	r2, #1
 800191c:	4803      	ldr	r0, [pc, #12]	; (800192c <__io_putchar+0x20>)
 800191e:	f003 feb1 	bl	8005684 <HAL_UART_Transmit>

  return ch;
 8001922:	687b      	ldr	r3, [r7, #4]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000130 	.word	0x20000130

08001930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001934:	b672      	cpsid	i
}
 8001936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001938:	e7fe      	b.n	8001938 <Error_Handler+0x8>
	...

0800193c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <HAL_MspInit+0x44>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	4a0e      	ldr	r2, [pc, #56]	; (8001980 <HAL_MspInit+0x44>)
 8001948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194c:	6413      	str	r3, [r2, #64]	; 0x40
 800194e:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <HAL_MspInit+0x44>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_MspInit+0x44>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195e:	4a08      	ldr	r2, [pc, #32]	; (8001980 <HAL_MspInit+0x44>)
 8001960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001964:	6453      	str	r3, [r2, #68]	; 0x44
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_MspInit+0x44>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800

08001984 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b0ae      	sub	sp, #184	; 0xb8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	2290      	movs	r2, #144	; 0x90
 80019a2:	2100      	movs	r1, #0
 80019a4:	4618      	mov	r0, r3
 80019a6:	f004 fb4d 	bl	8006044 <memset>
  if(hi2c->Instance==I2C1)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a22      	ldr	r2, [pc, #136]	; (8001a38 <HAL_I2C_MspInit+0xb4>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d13c      	bne.n	8001a2e <HAL_I2C_MspInit+0xaa>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80019b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019b8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019ba:	2300      	movs	r3, #0
 80019bc:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	4618      	mov	r0, r3
 80019c4:	f002 f98c 	bl	8003ce0 <HAL_RCCEx_PeriphCLKConfig>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80019ce:	f7ff ffaf 	bl	8001930 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d2:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <HAL_I2C_MspInit+0xb8>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a19      	ldr	r2, [pc, #100]	; (8001a3c <HAL_I2C_MspInit+0xb8>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <HAL_I2C_MspInit+0xb8>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019f2:	2312      	movs	r3, #18
 80019f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fe:	2303      	movs	r3, #3
 8001a00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a04:	2304      	movs	r3, #4
 8001a06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a0e:	4619      	mov	r1, r3
 8001a10:	480b      	ldr	r0, [pc, #44]	; (8001a40 <HAL_I2C_MspInit+0xbc>)
 8001a12:	f000 fb59 	bl	80020c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a16:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <HAL_I2C_MspInit+0xb8>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	4a08      	ldr	r2, [pc, #32]	; (8001a3c <HAL_I2C_MspInit+0xb8>)
 8001a1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a20:	6413      	str	r3, [r2, #64]	; 0x40
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_I2C_MspInit+0xb8>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a2e:	bf00      	nop
 8001a30:	37b8      	adds	r7, #184	; 0xb8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40005400 	.word	0x40005400
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40020400 	.word	0x40020400

08001a44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08a      	sub	sp, #40	; 0x28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a64:	d128      	bne.n	8001ab8 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a66:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <HAL_TIM_Base_MspInit+0x7c>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	4a15      	ldr	r2, [pc, #84]	; (8001ac0 <HAL_TIM_Base_MspInit+0x7c>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6413      	str	r3, [r2, #64]	; 0x40
 8001a72:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <HAL_TIM_Base_MspInit+0x7c>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7e:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <HAL_TIM_Base_MspInit+0x7c>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a0f      	ldr	r2, [pc, #60]	; (8001ac0 <HAL_TIM_Base_MspInit+0x7c>)
 8001a84:	f043 0302 	orr.w	r3, r3, #2
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <HAL_TIM_Base_MspInit+0x7c>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4804      	ldr	r0, [pc, #16]	; (8001ac4 <HAL_TIM_Base_MspInit+0x80>)
 8001ab4:	f000 fb08 	bl	80020c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ab8:	bf00      	nop
 8001aba:	3728      	adds	r7, #40	; 0x28
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40020400 	.word	0x40020400

08001ac8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	; 0x28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ae8:	d138      	bne.n	8001b5c <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aea:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <HAL_TIM_MspPostInit+0x9c>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a1d      	ldr	r2, [pc, #116]	; (8001b64 <HAL_TIM_MspPostInit+0x9c>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <HAL_TIM_MspPostInit+0x9c>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b02:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <HAL_TIM_MspPostInit+0x9c>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	4a17      	ldr	r2, [pc, #92]	; (8001b64 <HAL_TIM_MspPostInit+0x9c>)
 8001b08:	f043 0302 	orr.w	r3, r3, #2
 8001b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <HAL_TIM_MspPostInit+0x9c>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b1a:	2320      	movs	r3, #32
 8001b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b26:	2300      	movs	r3, #0
 8001b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2e:	f107 0314 	add.w	r3, r7, #20
 8001b32:	4619      	mov	r1, r3
 8001b34:	480c      	ldr	r0, [pc, #48]	; (8001b68 <HAL_TIM_MspPostInit+0xa0>)
 8001b36:	f000 fac7 	bl	80020c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b40:	2302      	movs	r3, #2
 8001b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	4619      	mov	r1, r3
 8001b56:	4805      	ldr	r0, [pc, #20]	; (8001b6c <HAL_TIM_MspPostInit+0xa4>)
 8001b58:	f000 fab6 	bl	80020c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b5c:	bf00      	nop
 8001b5e:	3728      	adds	r7, #40	; 0x28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40020000 	.word	0x40020000
 8001b6c:	40020400 	.word	0x40020400

08001b70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b0ae      	sub	sp, #184	; 0xb8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	2290      	movs	r2, #144	; 0x90
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f004 fa57 	bl	8006044 <memset>
  if(huart->Instance==USART3)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a22      	ldr	r2, [pc, #136]	; (8001c24 <HAL_UART_MspInit+0xb4>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d13c      	bne.n	8001c1a <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ba0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ba4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001baa:	f107 0314 	add.w	r3, r7, #20
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f002 f896 	bl	8003ce0 <HAL_RCCEx_PeriphCLKConfig>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001bba:	f7ff feb9 	bl	8001930 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bbe:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <HAL_UART_MspInit+0xb8>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	4a19      	ldr	r2, [pc, #100]	; (8001c28 <HAL_UART_MspInit+0xb8>)
 8001bc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bca:	4b17      	ldr	r3, [pc, #92]	; (8001c28 <HAL_UART_MspInit+0xb8>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bd6:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <HAL_UART_MspInit+0xb8>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a13      	ldr	r2, [pc, #76]	; (8001c28 <HAL_UART_MspInit+0xb8>)
 8001bdc:	f043 0308 	orr.w	r3, r3, #8
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <HAL_UART_MspInit+0xb8>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001bee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c02:	2303      	movs	r3, #3
 8001c04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c08:	2307      	movs	r3, #7
 8001c0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c0e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c12:	4619      	mov	r1, r3
 8001c14:	4805      	ldr	r0, [pc, #20]	; (8001c2c <HAL_UART_MspInit+0xbc>)
 8001c16:	f000 fa57 	bl	80020c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c1a:	bf00      	nop
 8001c1c:	37b8      	adds	r7, #184	; 0xb8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40004800 	.word	0x40004800
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40020c00 	.word	0x40020c00

08001c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c34:	e7fe      	b.n	8001c34 <NMI_Handler+0x4>

08001c36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c3a:	e7fe      	b.n	8001c3a <HardFault_Handler+0x4>

08001c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c40:	e7fe      	b.n	8001c40 <MemManage_Handler+0x4>

08001c42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c46:	e7fe      	b.n	8001c46 <BusFault_Handler+0x4>

08001c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <UsageFault_Handler+0x4>

08001c4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c7c:	f000 f91e 	bl	8001ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	e00a      	b.n	8001cac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c96:	f3af 8000 	nop.w
 8001c9a:	4601      	mov	r1, r0
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	60ba      	str	r2, [r7, #8]
 8001ca2:	b2ca      	uxtb	r2, r1
 8001ca4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	dbf0      	blt.n	8001c96 <_read+0x12>
	}

return len;
 8001cb4:	687b      	ldr	r3, [r7, #4]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b086      	sub	sp, #24
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	60f8      	str	r0, [r7, #12]
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	e009      	b.n	8001ce4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	60ba      	str	r2, [r7, #8]
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fe17 	bl	800190c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	dbf1      	blt.n	8001cd0 <_write+0x12>
	}
	return len;
 8001cec:	687b      	ldr	r3, [r7, #4]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <_close>:

int _close(int file)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
	return -1;
 8001cfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d1e:	605a      	str	r2, [r3, #4]
	return 0;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <_isatty>:

int _isatty(int file)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
	return 1;
 8001d36:	2301      	movs	r3, #1
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
	return 0;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d68:	4a14      	ldr	r2, [pc, #80]	; (8001dbc <_sbrk+0x5c>)
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <_sbrk+0x60>)
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d74:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <_sbrk+0x64>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d102      	bne.n	8001d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d7c:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <_sbrk+0x64>)
 8001d7e:	4a12      	ldr	r2, [pc, #72]	; (8001dc8 <_sbrk+0x68>)
 8001d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <_sbrk+0x64>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4413      	add	r3, r2
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d207      	bcs.n	8001da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d90:	f004 f91e 	bl	8005fd0 <__errno>
 8001d94:	4603      	mov	r3, r0
 8001d96:	220c      	movs	r2, #12
 8001d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9e:	e009      	b.n	8001db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001da0:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <_sbrk+0x64>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001da6:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <_sbrk+0x64>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	4a05      	ldr	r2, [pc, #20]	; (8001dc4 <_sbrk+0x64>)
 8001db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001db2:	68fb      	ldr	r3, [r7, #12]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20080000 	.word	0x20080000
 8001dc0:	00000400 	.word	0x00000400
 8001dc4:	20000120 	.word	0x20000120
 8001dc8:	20000260 	.word	0x20000260

08001dcc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <SystemInit+0x20>)
 8001dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dd6:	4a05      	ldr	r2, [pc, #20]	; (8001dec <SystemInit+0x20>)
 8001dd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001df0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001df4:	480d      	ldr	r0, [pc, #52]	; (8001e2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001df6:	490e      	ldr	r1, [pc, #56]	; (8001e30 <LoopFillZerobss+0x1a>)

  ldr r2, =_sidata
 8001df8:	4a0e      	ldr	r2, [pc, #56]	; (8001e34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dfc:	e002      	b.n	8001e04 <LoopCopyDataInit>

08001dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e02:	3304      	adds	r3, #4

08001e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e08:	d3f9      	bcc.n	8001dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e0a:	4a0b      	ldr	r2, [pc, #44]	; (8001e38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e0c:	4c0b      	ldr	r4, [pc, #44]	; (8001e3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e10:	e001      	b.n	8001e16 <LoopFillZerobss>

08001e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e14:	3204      	adds	r2, #4

08001e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e18:	d3fb      	bcc.n	8001e12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e1a:	f7ff ffd7 	bl	8001dcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e1e:	f004 f8dd 	bl	8005fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e22:	f7fe fbe1 	bl	80005e8 <main>
  bx  lr    
 8001e26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e28:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e30:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8001e34:	080099f8 	.word	0x080099f8
  ldr r2, =_sbss
 8001e38:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8001e3c:	20000260 	.word	0x20000260

08001e40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e40:	e7fe      	b.n	8001e40 <ADC_IRQHandler>

08001e42 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e46:	2003      	movs	r0, #3
 8001e48:	f000 f90a 	bl	8002060 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	f000 f805 	bl	8001e5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e52:	f7ff fd73 	bl	800193c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e64:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <HAL_InitTick+0x54>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_InitTick+0x58>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 f917 	bl	80020ae <HAL_SYSTICK_Config>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e00e      	b.n	8001ea8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b0f      	cmp	r3, #15
 8001e8e:	d80a      	bhi.n	8001ea6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e90:	2200      	movs	r2, #0
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	f04f 30ff 	mov.w	r0, #4294967295
 8001e98:	f000 f8ed 	bl	8002076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e9c:	4a06      	ldr	r2, [pc, #24]	; (8001eb8 <HAL_InitTick+0x5c>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e000      	b.n	8001ea8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000090 	.word	0x20000090
 8001eb4:	20000098 	.word	0x20000098
 8001eb8:	20000094 	.word	0x20000094

08001ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ec0:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_IncTick+0x20>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_IncTick+0x24>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4413      	add	r3, r2
 8001ecc:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <HAL_IncTick+0x24>)
 8001ece:	6013      	str	r3, [r2, #0]
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	20000098 	.word	0x20000098
 8001ee0:	2000024c 	.word	0x2000024c

08001ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <HAL_GetTick+0x14>)
 8001eea:	681b      	ldr	r3, [r3, #0]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	2000024c 	.word	0x2000024c

08001efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <__NVIC_SetPriorityGrouping+0x40>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <__NVIC_SetPriorityGrouping+0x44>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f2a:	4a04      	ldr	r2, [pc, #16]	; (8001f3c <__NVIC_SetPriorityGrouping+0x40>)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	60d3      	str	r3, [r2, #12]
}
 8001f30:	bf00      	nop
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	e000ed00 	.word	0xe000ed00
 8001f40:	05fa0000 	.word	0x05fa0000

08001f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f48:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <__NVIC_GetPriorityGrouping+0x18>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	0a1b      	lsrs	r3, r3, #8
 8001f4e:	f003 0307 	and.w	r3, r3, #7
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	6039      	str	r1, [r7, #0]
 8001f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	db0a      	blt.n	8001f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	490c      	ldr	r1, [pc, #48]	; (8001fac <__NVIC_SetPriority+0x4c>)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	0112      	lsls	r2, r2, #4
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	440b      	add	r3, r1
 8001f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f88:	e00a      	b.n	8001fa0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	4908      	ldr	r1, [pc, #32]	; (8001fb0 <__NVIC_SetPriority+0x50>)
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	3b04      	subs	r3, #4
 8001f98:	0112      	lsls	r2, r2, #4
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	761a      	strb	r2, [r3, #24]
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	e000e100 	.word	0xe000e100
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b089      	sub	sp, #36	; 0x24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f1c3 0307 	rsb	r3, r3, #7
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	bf28      	it	cs
 8001fd2:	2304      	movcs	r3, #4
 8001fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	2b06      	cmp	r3, #6
 8001fdc:	d902      	bls.n	8001fe4 <NVIC_EncodePriority+0x30>
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3b03      	subs	r3, #3
 8001fe2:	e000      	b.n	8001fe6 <NVIC_EncodePriority+0x32>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	fa01 f303 	lsl.w	r3, r1, r3
 8002006:	43d9      	mvns	r1, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200c:	4313      	orrs	r3, r2
         );
}
 800200e:	4618      	mov	r0, r3
 8002010:	3724      	adds	r7, #36	; 0x24
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3b01      	subs	r3, #1
 8002028:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800202c:	d301      	bcc.n	8002032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800202e:	2301      	movs	r3, #1
 8002030:	e00f      	b.n	8002052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002032:	4a0a      	ldr	r2, [pc, #40]	; (800205c <SysTick_Config+0x40>)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3b01      	subs	r3, #1
 8002038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800203a:	210f      	movs	r1, #15
 800203c:	f04f 30ff 	mov.w	r0, #4294967295
 8002040:	f7ff ff8e 	bl	8001f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <SysTick_Config+0x40>)
 8002046:	2200      	movs	r2, #0
 8002048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800204a:	4b04      	ldr	r3, [pc, #16]	; (800205c <SysTick_Config+0x40>)
 800204c:	2207      	movs	r2, #7
 800204e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	e000e010 	.word	0xe000e010

08002060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff ff47 	bl	8001efc <__NVIC_SetPriorityGrouping>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002076:	b580      	push	{r7, lr}
 8002078:	b086      	sub	sp, #24
 800207a:	af00      	add	r7, sp, #0
 800207c:	4603      	mov	r3, r0
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
 8002082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002088:	f7ff ff5c 	bl	8001f44 <__NVIC_GetPriorityGrouping>
 800208c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	68b9      	ldr	r1, [r7, #8]
 8002092:	6978      	ldr	r0, [r7, #20]
 8002094:	f7ff ff8e 	bl	8001fb4 <NVIC_EncodePriority>
 8002098:	4602      	mov	r2, r0
 800209a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800209e:	4611      	mov	r1, r2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff ff5d 	bl	8001f60 <__NVIC_SetPriority>
}
 80020a6:	bf00      	nop
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff ffb0 	bl	800201c <SysTick_Config>
 80020bc:	4603      	mov	r3, r0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b089      	sub	sp, #36	; 0x24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80020de:	2300      	movs	r3, #0
 80020e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
 80020e6:	e175      	b.n	80023d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80020e8:	2201      	movs	r2, #1
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	429a      	cmp	r2, r3
 8002102:	f040 8164 	bne.w	80023ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	2b01      	cmp	r3, #1
 8002110:	d005      	beq.n	800211e <HAL_GPIO_Init+0x56>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d130      	bne.n	8002180 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	2203      	movs	r2, #3
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002154:	2201      	movs	r2, #1
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	091b      	lsrs	r3, r3, #4
 800216a:	f003 0201 	and.w	r2, r3, #1
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	2b03      	cmp	r3, #3
 800218a:	d017      	beq.n	80021bc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	2203      	movs	r2, #3
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 0303 	and.w	r3, r3, #3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d123      	bne.n	8002210 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	08da      	lsrs	r2, r3, #3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3208      	adds	r2, #8
 80021d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	220f      	movs	r2, #15
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	691a      	ldr	r2, [r3, #16]
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	08da      	lsrs	r2, r3, #3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3208      	adds	r2, #8
 800220a:	69b9      	ldr	r1, [r7, #24]
 800220c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	2203      	movs	r2, #3
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 0203 	and.w	r2, r3, #3
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 80be 	beq.w	80023ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002252:	4b66      	ldr	r3, [pc, #408]	; (80023ec <HAL_GPIO_Init+0x324>)
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	4a65      	ldr	r2, [pc, #404]	; (80023ec <HAL_GPIO_Init+0x324>)
 8002258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800225c:	6453      	str	r3, [r2, #68]	; 0x44
 800225e:	4b63      	ldr	r3, [pc, #396]	; (80023ec <HAL_GPIO_Init+0x324>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800226a:	4a61      	ldr	r2, [pc, #388]	; (80023f0 <HAL_GPIO_Init+0x328>)
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	089b      	lsrs	r3, r3, #2
 8002270:	3302      	adds	r3, #2
 8002272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	220f      	movs	r2, #15
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43db      	mvns	r3, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a58      	ldr	r2, [pc, #352]	; (80023f4 <HAL_GPIO_Init+0x32c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d037      	beq.n	8002306 <HAL_GPIO_Init+0x23e>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a57      	ldr	r2, [pc, #348]	; (80023f8 <HAL_GPIO_Init+0x330>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d031      	beq.n	8002302 <HAL_GPIO_Init+0x23a>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a56      	ldr	r2, [pc, #344]	; (80023fc <HAL_GPIO_Init+0x334>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d02b      	beq.n	80022fe <HAL_GPIO_Init+0x236>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a55      	ldr	r2, [pc, #340]	; (8002400 <HAL_GPIO_Init+0x338>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d025      	beq.n	80022fa <HAL_GPIO_Init+0x232>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a54      	ldr	r2, [pc, #336]	; (8002404 <HAL_GPIO_Init+0x33c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d01f      	beq.n	80022f6 <HAL_GPIO_Init+0x22e>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a53      	ldr	r2, [pc, #332]	; (8002408 <HAL_GPIO_Init+0x340>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d019      	beq.n	80022f2 <HAL_GPIO_Init+0x22a>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a52      	ldr	r2, [pc, #328]	; (800240c <HAL_GPIO_Init+0x344>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d013      	beq.n	80022ee <HAL_GPIO_Init+0x226>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a51      	ldr	r2, [pc, #324]	; (8002410 <HAL_GPIO_Init+0x348>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d00d      	beq.n	80022ea <HAL_GPIO_Init+0x222>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a50      	ldr	r2, [pc, #320]	; (8002414 <HAL_GPIO_Init+0x34c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d007      	beq.n	80022e6 <HAL_GPIO_Init+0x21e>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a4f      	ldr	r2, [pc, #316]	; (8002418 <HAL_GPIO_Init+0x350>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d101      	bne.n	80022e2 <HAL_GPIO_Init+0x21a>
 80022de:	2309      	movs	r3, #9
 80022e0:	e012      	b.n	8002308 <HAL_GPIO_Init+0x240>
 80022e2:	230a      	movs	r3, #10
 80022e4:	e010      	b.n	8002308 <HAL_GPIO_Init+0x240>
 80022e6:	2308      	movs	r3, #8
 80022e8:	e00e      	b.n	8002308 <HAL_GPIO_Init+0x240>
 80022ea:	2307      	movs	r3, #7
 80022ec:	e00c      	b.n	8002308 <HAL_GPIO_Init+0x240>
 80022ee:	2306      	movs	r3, #6
 80022f0:	e00a      	b.n	8002308 <HAL_GPIO_Init+0x240>
 80022f2:	2305      	movs	r3, #5
 80022f4:	e008      	b.n	8002308 <HAL_GPIO_Init+0x240>
 80022f6:	2304      	movs	r3, #4
 80022f8:	e006      	b.n	8002308 <HAL_GPIO_Init+0x240>
 80022fa:	2303      	movs	r3, #3
 80022fc:	e004      	b.n	8002308 <HAL_GPIO_Init+0x240>
 80022fe:	2302      	movs	r3, #2
 8002300:	e002      	b.n	8002308 <HAL_GPIO_Init+0x240>
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <HAL_GPIO_Init+0x240>
 8002306:	2300      	movs	r3, #0
 8002308:	69fa      	ldr	r2, [r7, #28]
 800230a:	f002 0203 	and.w	r2, r2, #3
 800230e:	0092      	lsls	r2, r2, #2
 8002310:	4093      	lsls	r3, r2
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002318:	4935      	ldr	r1, [pc, #212]	; (80023f0 <HAL_GPIO_Init+0x328>)
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	089b      	lsrs	r3, r3, #2
 800231e:	3302      	adds	r3, #2
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002326:	4b3d      	ldr	r3, [pc, #244]	; (800241c <HAL_GPIO_Init+0x354>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	43db      	mvns	r3, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4013      	ands	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800234a:	4a34      	ldr	r2, [pc, #208]	; (800241c <HAL_GPIO_Init+0x354>)
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002350:	4b32      	ldr	r3, [pc, #200]	; (800241c <HAL_GPIO_Init+0x354>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002374:	4a29      	ldr	r2, [pc, #164]	; (800241c <HAL_GPIO_Init+0x354>)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800237a:	4b28      	ldr	r3, [pc, #160]	; (800241c <HAL_GPIO_Init+0x354>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	43db      	mvns	r3, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4013      	ands	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800239e:	4a1f      	ldr	r2, [pc, #124]	; (800241c <HAL_GPIO_Init+0x354>)
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023a4:	4b1d      	ldr	r3, [pc, #116]	; (800241c <HAL_GPIO_Init+0x354>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023c8:	4a14      	ldr	r2, [pc, #80]	; (800241c <HAL_GPIO_Init+0x354>)
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3301      	adds	r3, #1
 80023d2:	61fb      	str	r3, [r7, #28]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	2b0f      	cmp	r3, #15
 80023d8:	f67f ae86 	bls.w	80020e8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80023dc:	bf00      	nop
 80023de:	bf00      	nop
 80023e0:	3724      	adds	r7, #36	; 0x24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40023800 	.word	0x40023800
 80023f0:	40013800 	.word	0x40013800
 80023f4:	40020000 	.word	0x40020000
 80023f8:	40020400 	.word	0x40020400
 80023fc:	40020800 	.word	0x40020800
 8002400:	40020c00 	.word	0x40020c00
 8002404:	40021000 	.word	0x40021000
 8002408:	40021400 	.word	0x40021400
 800240c:	40021800 	.word	0x40021800
 8002410:	40021c00 	.word	0x40021c00
 8002414:	40022000 	.word	0x40022000
 8002418:	40022400 	.word	0x40022400
 800241c:	40013c00 	.word	0x40013c00

08002420 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	460b      	mov	r3, r1
 800242a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691a      	ldr	r2, [r3, #16]
 8002430:	887b      	ldrh	r3, [r7, #2]
 8002432:	4013      	ands	r3, r2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d002      	beq.n	800243e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002438:	2301      	movs	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
 800243c:	e001      	b.n	8002442 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800243e:	2300      	movs	r3, #0
 8002440:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002442:	7bfb      	ldrb	r3, [r7, #15]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	807b      	strh	r3, [r7, #2]
 800245c:	4613      	mov	r3, r2
 800245e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002460:	787b      	ldrb	r3, [r7, #1]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002466:	887a      	ldrh	r2, [r7, #2]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800246c:	e003      	b.n	8002476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800246e:	887b      	ldrh	r3, [r7, #2]
 8002470:	041a      	lsls	r2, r3, #16
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	619a      	str	r2, [r3, #24]
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002482:	b480      	push	{r7}
 8002484:	b085      	sub	sp, #20
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	460b      	mov	r3, r1
 800248c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002494:	887a      	ldrh	r2, [r7, #2]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	4013      	ands	r3, r2
 800249a:	041a      	lsls	r2, r3, #16
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	43d9      	mvns	r1, r3
 80024a0:	887b      	ldrh	r3, [r7, #2]
 80024a2:	400b      	ands	r3, r1
 80024a4:	431a      	orrs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	619a      	str	r2, [r3, #24]
}
 80024aa:	bf00      	nop
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
	...

080024b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e07f      	b.n	80025ca <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d106      	bne.n	80024e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff fa50 	bl	8001984 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2224      	movs	r2, #36	; 0x24
 80024e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0201 	bic.w	r2, r2, #1
 80024fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002508:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002518:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d107      	bne.n	8002532 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	e006      	b.n	8002540 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800253e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	2b02      	cmp	r3, #2
 8002546:	d104      	bne.n	8002552 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002550:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6859      	ldr	r1, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <HAL_I2C_Init+0x11c>)
 800255e:	430b      	orrs	r3, r1
 8002560:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002570:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691a      	ldr	r2, [r3, #16]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69d9      	ldr	r1, [r3, #28]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a1a      	ldr	r2, [r3, #32]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0201 	orr.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2220      	movs	r2, #32
 80025b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	02008000 	.word	0x02008000

080025d8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b088      	sub	sp, #32
 80025dc:	af02      	add	r7, sp, #8
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	4608      	mov	r0, r1
 80025e2:	4611      	mov	r1, r2
 80025e4:	461a      	mov	r2, r3
 80025e6:	4603      	mov	r3, r0
 80025e8:	817b      	strh	r3, [r7, #10]
 80025ea:	460b      	mov	r3, r1
 80025ec:	813b      	strh	r3, [r7, #8]
 80025ee:	4613      	mov	r3, r2
 80025f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b20      	cmp	r3, #32
 80025fc:	f040 80f9 	bne.w	80027f2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <HAL_I2C_Mem_Write+0x34>
 8002606:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002608:	2b00      	cmp	r3, #0
 800260a:	d105      	bne.n	8002618 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002612:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0ed      	b.n	80027f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800261e:	2b01      	cmp	r3, #1
 8002620:	d101      	bne.n	8002626 <HAL_I2C_Mem_Write+0x4e>
 8002622:	2302      	movs	r3, #2
 8002624:	e0e6      	b.n	80027f4 <HAL_I2C_Mem_Write+0x21c>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800262e:	f7ff fc59 	bl	8001ee4 <HAL_GetTick>
 8002632:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	2319      	movs	r3, #25
 800263a:	2201      	movs	r2, #1
 800263c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 fbcb 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e0d1      	b.n	80027f4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2221      	movs	r2, #33	; 0x21
 8002654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2240      	movs	r2, #64	; 0x40
 800265c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6a3a      	ldr	r2, [r7, #32]
 800266a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002670:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002678:	88f8      	ldrh	r0, [r7, #6]
 800267a:	893a      	ldrh	r2, [r7, #8]
 800267c:	8979      	ldrh	r1, [r7, #10]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	9301      	str	r3, [sp, #4]
 8002682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	4603      	mov	r3, r0
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 fadb 	bl	8002c44 <I2C_RequestMemoryWrite>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e0a9      	b.n	80027f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	2bff      	cmp	r3, #255	; 0xff
 80026a8:	d90e      	bls.n	80026c8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	22ff      	movs	r2, #255	; 0xff
 80026ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	8979      	ldrh	r1, [r7, #10]
 80026b8:	2300      	movs	r3, #0
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 fd33 	bl	800312c <I2C_TransferConfig>
 80026c6:	e00f      	b.n	80026e8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	8979      	ldrh	r1, [r7, #10]
 80026da:	2300      	movs	r3, #0
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 fd22 	bl	800312c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f000 fbb5 	bl	8002e5c <I2C_WaitOnTXISFlagUntilTimeout>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e07b      	b.n	80027f4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	781a      	ldrb	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	1c5a      	adds	r2, r3, #1
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002716:	b29b      	uxth	r3, r3
 8002718:	3b01      	subs	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002724:	3b01      	subs	r3, #1
 8002726:	b29a      	uxth	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002730:	b29b      	uxth	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d034      	beq.n	80027a0 <HAL_I2C_Mem_Write+0x1c8>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273a:	2b00      	cmp	r3, #0
 800273c:	d130      	bne.n	80027a0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002744:	2200      	movs	r2, #0
 8002746:	2180      	movs	r1, #128	; 0x80
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 fb47 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e04d      	b.n	80027f4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275c:	b29b      	uxth	r3, r3
 800275e:	2bff      	cmp	r3, #255	; 0xff
 8002760:	d90e      	bls.n	8002780 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	22ff      	movs	r2, #255	; 0xff
 8002766:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276c:	b2da      	uxtb	r2, r3
 800276e:	8979      	ldrh	r1, [r7, #10]
 8002770:	2300      	movs	r3, #0
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 fcd7 	bl	800312c <I2C_TransferConfig>
 800277e:	e00f      	b.n	80027a0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002784:	b29a      	uxth	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278e:	b2da      	uxtb	r2, r3
 8002790:	8979      	ldrh	r1, [r7, #10]
 8002792:	2300      	movs	r3, #0
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 fcc6 	bl	800312c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d19e      	bne.n	80026e8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 fb94 	bl	8002edc <I2C_WaitOnSTOPFlagUntilTimeout>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e01a      	b.n	80027f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2220      	movs	r2, #32
 80027c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6859      	ldr	r1, [r3, #4]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <HAL_I2C_Mem_Write+0x224>)
 80027d2:	400b      	ands	r3, r1
 80027d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2220      	movs	r2, #32
 80027da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	e000      	b.n	80027f4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80027f2:	2302      	movs	r3, #2
  }
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	fe00e800 	.word	0xfe00e800

08002800 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af02      	add	r7, sp, #8
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	4608      	mov	r0, r1
 800280a:	4611      	mov	r1, r2
 800280c:	461a      	mov	r2, r3
 800280e:	4603      	mov	r3, r0
 8002810:	817b      	strh	r3, [r7, #10]
 8002812:	460b      	mov	r3, r1
 8002814:	813b      	strh	r3, [r7, #8]
 8002816:	4613      	mov	r3, r2
 8002818:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b20      	cmp	r3, #32
 8002824:	f040 80fd 	bne.w	8002a22 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d002      	beq.n	8002834 <HAL_I2C_Mem_Read+0x34>
 800282e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002830:	2b00      	cmp	r3, #0
 8002832:	d105      	bne.n	8002840 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800283a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e0f1      	b.n	8002a24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002846:	2b01      	cmp	r3, #1
 8002848:	d101      	bne.n	800284e <HAL_I2C_Mem_Read+0x4e>
 800284a:	2302      	movs	r3, #2
 800284c:	e0ea      	b.n	8002a24 <HAL_I2C_Mem_Read+0x224>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002856:	f7ff fb45 	bl	8001ee4 <HAL_GetTick>
 800285a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	2319      	movs	r3, #25
 8002862:	2201      	movs	r2, #1
 8002864:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 fab7 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e0d5      	b.n	8002a24 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2222      	movs	r2, #34	; 0x22
 800287c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2240      	movs	r2, #64	; 0x40
 8002884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a3a      	ldr	r2, [r7, #32]
 8002892:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002898:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028a0:	88f8      	ldrh	r0, [r7, #6]
 80028a2:	893a      	ldrh	r2, [r7, #8]
 80028a4:	8979      	ldrh	r1, [r7, #10]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	9301      	str	r3, [sp, #4]
 80028aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	4603      	mov	r3, r0
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 fa1b 	bl	8002cec <I2C_RequestMemoryRead>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0ad      	b.n	8002a24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	2bff      	cmp	r3, #255	; 0xff
 80028d0:	d90e      	bls.n	80028f0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	22ff      	movs	r2, #255	; 0xff
 80028d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	8979      	ldrh	r1, [r7, #10]
 80028e0:	4b52      	ldr	r3, [pc, #328]	; (8002a2c <HAL_I2C_Mem_Read+0x22c>)
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 fc1f 	bl	800312c <I2C_TransferConfig>
 80028ee:	e00f      	b.n	8002910 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	8979      	ldrh	r1, [r7, #10]
 8002902:	4b4a      	ldr	r3, [pc, #296]	; (8002a2c <HAL_I2C_Mem_Read+0x22c>)
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 fc0e 	bl	800312c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002916:	2200      	movs	r2, #0
 8002918:	2104      	movs	r1, #4
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 fa5e 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e07c      	b.n	8002a24 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002946:	3b01      	subs	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002952:	b29b      	uxth	r3, r3
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002960:	b29b      	uxth	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d034      	beq.n	80029d0 <HAL_I2C_Mem_Read+0x1d0>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296a:	2b00      	cmp	r3, #0
 800296c:	d130      	bne.n	80029d0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002974:	2200      	movs	r2, #0
 8002976:	2180      	movs	r1, #128	; 0x80
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 fa2f 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e04d      	b.n	8002a24 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298c:	b29b      	uxth	r3, r3
 800298e:	2bff      	cmp	r3, #255	; 0xff
 8002990:	d90e      	bls.n	80029b0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	22ff      	movs	r2, #255	; 0xff
 8002996:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299c:	b2da      	uxtb	r2, r3
 800299e:	8979      	ldrh	r1, [r7, #10]
 80029a0:	2300      	movs	r3, #0
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 fbbf 	bl	800312c <I2C_TransferConfig>
 80029ae:	e00f      	b.n	80029d0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	8979      	ldrh	r1, [r7, #10]
 80029c2:	2300      	movs	r3, #0
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 fbae 	bl	800312c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d19a      	bne.n	8002910 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 fa7c 	bl	8002edc <I2C_WaitOnSTOPFlagUntilTimeout>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e01a      	b.n	8002a24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2220      	movs	r2, #32
 80029f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6859      	ldr	r1, [r3, #4]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <HAL_I2C_Mem_Read+0x230>)
 8002a02:	400b      	ands	r3, r1
 8002a04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	e000      	b.n	8002a24 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002a22:	2302      	movs	r3, #2
  }
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	80002400 	.word	0x80002400
 8002a30:	fe00e800 	.word	0xfe00e800

08002a34 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08a      	sub	sp, #40	; 0x28
 8002a38:	af02      	add	r7, sp, #8
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	607a      	str	r2, [r7, #4]
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	460b      	mov	r3, r1
 8002a42:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b20      	cmp	r3, #32
 8002a52:	f040 80ef 	bne.w	8002c34 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a64:	d101      	bne.n	8002a6a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002a66:	2302      	movs	r3, #2
 8002a68:	e0e5      	b.n	8002c36 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <HAL_I2C_IsDeviceReady+0x44>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e0de      	b.n	8002c36 <HAL_I2C_IsDeviceReady+0x202>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2224      	movs	r2, #36	; 0x24
 8002a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d105      	bne.n	8002aa2 <HAL_I2C_IsDeviceReady+0x6e>
 8002a96:	897b      	ldrh	r3, [r7, #10]
 8002a98:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a9c:	4b68      	ldr	r3, [pc, #416]	; (8002c40 <HAL_I2C_IsDeviceReady+0x20c>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	e004      	b.n	8002aac <HAL_I2C_IsDeviceReady+0x78>
 8002aa2:	897b      	ldrh	r3, [r7, #10]
 8002aa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aa8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	6812      	ldr	r2, [r2, #0]
 8002ab0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002ab2:	f7ff fa17 	bl	8001ee4 <HAL_GetTick>
 8002ab6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	f003 0320 	and.w	r3, r3, #32
 8002ac2:	2b20      	cmp	r3, #32
 8002ac4:	bf0c      	ite	eq
 8002ac6:	2301      	moveq	r3, #1
 8002ac8:	2300      	movne	r3, #0
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	f003 0310 	and.w	r3, r3, #16
 8002ad8:	2b10      	cmp	r3, #16
 8002ada:	bf0c      	ite	eq
 8002adc:	2301      	moveq	r3, #1
 8002ade:	2300      	movne	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002ae4:	e034      	b.n	8002b50 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aec:	d01a      	beq.n	8002b24 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002aee:	f7ff f9f9 	bl	8001ee4 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d302      	bcc.n	8002b04 <HAL_I2C_IsDeviceReady+0xd0>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10f      	bne.n	8002b24 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b10:	f043 0220 	orr.w	r2, r3, #32
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e088      	b.n	8002c36 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	f003 0320 	and.w	r3, r3, #32
 8002b2e:	2b20      	cmp	r3, #32
 8002b30:	bf0c      	ite	eq
 8002b32:	2301      	moveq	r3, #1
 8002b34:	2300      	movne	r3, #0
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b10      	cmp	r3, #16
 8002b46:	bf0c      	ite	eq
 8002b48:	2301      	moveq	r3, #1
 8002b4a:	2300      	movne	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002b50:	7ffb      	ldrb	r3, [r7, #31]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d102      	bne.n	8002b5c <HAL_I2C_IsDeviceReady+0x128>
 8002b56:	7fbb      	ldrb	r3, [r7, #30]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0c4      	beq.n	8002ae6 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	f003 0310 	and.w	r3, r3, #16
 8002b66:	2b10      	cmp	r3, #16
 8002b68:	d01a      	beq.n	8002ba0 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	2200      	movs	r2, #0
 8002b72:	2120      	movs	r1, #32
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 f931 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e058      	b.n	8002c36 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	e04a      	b.n	8002c36 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2120      	movs	r1, #32
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 f916 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e03d      	b.n	8002c36 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2210      	movs	r2, #16
 8002bc0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d118      	bne.n	8002c04 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002be0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2200      	movs	r2, #0
 8002bea:	2120      	movs	r1, #32
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 f8f5 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e01c      	b.n	8002c36 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2220      	movs	r2, #32
 8002c02:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	3301      	adds	r3, #1
 8002c08:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	f63f af3d 	bhi.w	8002a8e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c20:	f043 0220 	orr.w	r2, r3, #32
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e000      	b.n	8002c36 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8002c34:	2302      	movs	r3, #2
  }
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3720      	adds	r7, #32
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	02002000 	.word	0x02002000

08002c44 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af02      	add	r7, sp, #8
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	4608      	mov	r0, r1
 8002c4e:	4611      	mov	r1, r2
 8002c50:	461a      	mov	r2, r3
 8002c52:	4603      	mov	r3, r0
 8002c54:	817b      	strh	r3, [r7, #10]
 8002c56:	460b      	mov	r3, r1
 8002c58:	813b      	strh	r3, [r7, #8]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002c5e:	88fb      	ldrh	r3, [r7, #6]
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	8979      	ldrh	r1, [r7, #10]
 8002c64:	4b20      	ldr	r3, [pc, #128]	; (8002ce8 <I2C_RequestMemoryWrite+0xa4>)
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 fa5d 	bl	800312c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c72:	69fa      	ldr	r2, [r7, #28]
 8002c74:	69b9      	ldr	r1, [r7, #24]
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f8f0 	bl	8002e5c <I2C_WaitOnTXISFlagUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e02c      	b.n	8002ce0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c86:	88fb      	ldrh	r3, [r7, #6]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d105      	bne.n	8002c98 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c8c:	893b      	ldrh	r3, [r7, #8]
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	629a      	str	r2, [r3, #40]	; 0x28
 8002c96:	e015      	b.n	8002cc4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c98:	893b      	ldrh	r3, [r7, #8]
 8002c9a:	0a1b      	lsrs	r3, r3, #8
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ca6:	69fa      	ldr	r2, [r7, #28]
 8002ca8:	69b9      	ldr	r1, [r7, #24]
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 f8d6 	bl	8002e5c <I2C_WaitOnTXISFlagUntilTimeout>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e012      	b.n	8002ce0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cba:	893b      	ldrh	r3, [r7, #8]
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2180      	movs	r1, #128	; 0x80
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 f884 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	80002000 	.word	0x80002000

08002cec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af02      	add	r7, sp, #8
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	4608      	mov	r0, r1
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	817b      	strh	r3, [r7, #10]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	813b      	strh	r3, [r7, #8]
 8002d02:	4613      	mov	r3, r2
 8002d04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002d06:	88fb      	ldrh	r3, [r7, #6]
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	8979      	ldrh	r1, [r7, #10]
 8002d0c:	4b20      	ldr	r3, [pc, #128]	; (8002d90 <I2C_RequestMemoryRead+0xa4>)
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	2300      	movs	r3, #0
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 fa0a 	bl	800312c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d18:	69fa      	ldr	r2, [r7, #28]
 8002d1a:	69b9      	ldr	r1, [r7, #24]
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 f89d 	bl	8002e5c <I2C_WaitOnTXISFlagUntilTimeout>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e02c      	b.n	8002d86 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d2c:	88fb      	ldrh	r3, [r7, #6]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d105      	bne.n	8002d3e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d32:	893b      	ldrh	r3, [r7, #8]
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	629a      	str	r2, [r3, #40]	; 0x28
 8002d3c:	e015      	b.n	8002d6a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d3e:	893b      	ldrh	r3, [r7, #8]
 8002d40:	0a1b      	lsrs	r3, r3, #8
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d4c:	69fa      	ldr	r2, [r7, #28]
 8002d4e:	69b9      	ldr	r1, [r7, #24]
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 f883 	bl	8002e5c <I2C_WaitOnTXISFlagUntilTimeout>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e012      	b.n	8002d86 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d60:	893b      	ldrh	r3, [r7, #8]
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	2200      	movs	r2, #0
 8002d72:	2140      	movs	r1, #64	; 0x40
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 f831 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e000      	b.n	8002d86 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	80002000 	.word	0x80002000

08002d94 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d103      	bne.n	8002db2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2200      	movs	r2, #0
 8002db0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d007      	beq.n	8002dd0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	699a      	ldr	r2, [r3, #24]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0201 	orr.w	r2, r2, #1
 8002dce:	619a      	str	r2, [r3, #24]
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	603b      	str	r3, [r7, #0]
 8002de8:	4613      	mov	r3, r2
 8002dea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dec:	e022      	b.n	8002e34 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df4:	d01e      	beq.n	8002e34 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df6:	f7ff f875 	bl	8001ee4 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d302      	bcc.n	8002e0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d113      	bne.n	8002e34 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e10:	f043 0220 	orr.w	r2, r3, #32
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e00f      	b.n	8002e54 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	699a      	ldr	r2, [r3, #24]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	bf0c      	ite	eq
 8002e44:	2301      	moveq	r3, #1
 8002e46:	2300      	movne	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	79fb      	ldrb	r3, [r7, #7]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d0cd      	beq.n	8002dee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e68:	e02c      	b.n	8002ec4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	68b9      	ldr	r1, [r7, #8]
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 f870 	bl	8002f54 <I2C_IsErrorOccurred>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e02a      	b.n	8002ed4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e84:	d01e      	beq.n	8002ec4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e86:	f7ff f82d 	bl	8001ee4 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d302      	bcc.n	8002e9c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d113      	bne.n	8002ec4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea0:	f043 0220 	orr.w	r2, r3, #32
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e007      	b.n	8002ed4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d1cb      	bne.n	8002e6a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ee8:	e028      	b.n	8002f3c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	68b9      	ldr	r1, [r7, #8]
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f830 	bl	8002f54 <I2C_IsErrorOccurred>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e026      	b.n	8002f4c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002efe:	f7fe fff1 	bl	8001ee4 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d302      	bcc.n	8002f14 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d113      	bne.n	8002f3c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f18:	f043 0220 	orr.w	r2, r3, #32
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e007      	b.n	8002f4c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	f003 0320 	and.w	r3, r3, #32
 8002f46:	2b20      	cmp	r3, #32
 8002f48:	d1cf      	bne.n	8002eea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08a      	sub	sp, #40	; 0x28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f60:	2300      	movs	r3, #0
 8002f62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	f003 0310 	and.w	r3, r3, #16
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d075      	beq.n	800306c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2210      	movs	r2, #16
 8002f86:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f88:	e056      	b.n	8003038 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f90:	d052      	beq.n	8003038 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f92:	f7fe ffa7 	bl	8001ee4 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d302      	bcc.n	8002fa8 <I2C_IsErrorOccurred+0x54>
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d147      	bne.n	8003038 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fb2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fca:	d12e      	bne.n	800302a <I2C_IsErrorOccurred+0xd6>
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fd2:	d02a      	beq.n	800302a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002fd4:	7cfb      	ldrb	r3, [r7, #19]
 8002fd6:	2b20      	cmp	r3, #32
 8002fd8:	d027      	beq.n	800302a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fe8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002fea:	f7fe ff7b 	bl	8001ee4 <HAL_GetTick>
 8002fee:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ff0:	e01b      	b.n	800302a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ff2:	f7fe ff77 	bl	8001ee4 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b19      	cmp	r3, #25
 8002ffe:	d914      	bls.n	800302a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003004:	f043 0220 	orr.w	r2, r3, #32
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	f003 0320 	and.w	r3, r3, #32
 8003034:	2b20      	cmp	r3, #32
 8003036:	d1dc      	bne.n	8002ff2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	2b20      	cmp	r3, #32
 8003044:	d003      	beq.n	800304e <I2C_IsErrorOccurred+0xfa>
 8003046:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800304a:	2b00      	cmp	r3, #0
 800304c:	d09d      	beq.n	8002f8a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800304e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003052:	2b00      	cmp	r3, #0
 8003054:	d103      	bne.n	800305e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2220      	movs	r2, #32
 800305c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	f043 0304 	orr.w	r3, r3, #4
 8003064:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00b      	beq.n	8003096 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800308e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00b      	beq.n	80030b8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	f043 0308 	orr.w	r3, r3, #8
 80030a6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00b      	beq.n	80030da <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80030c2:	6a3b      	ldr	r3, [r7, #32]
 80030c4:	f043 0302 	orr.w	r3, r3, #2
 80030c8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80030da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d01c      	beq.n	800311c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f7ff fe56 	bl	8002d94 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6859      	ldr	r1, [r3, #4]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	4b0d      	ldr	r3, [pc, #52]	; (8003128 <I2C_IsErrorOccurred+0x1d4>)
 80030f4:	400b      	ands	r3, r1
 80030f6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	431a      	orrs	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2220      	movs	r2, #32
 8003108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800311c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003120:	4618      	mov	r0, r3
 8003122:	3728      	adds	r7, #40	; 0x28
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	fe00e800 	.word	0xfe00e800

0800312c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800312c:	b480      	push	{r7}
 800312e:	b087      	sub	sp, #28
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	607b      	str	r3, [r7, #4]
 8003136:	460b      	mov	r3, r1
 8003138:	817b      	strh	r3, [r7, #10]
 800313a:	4613      	mov	r3, r2
 800313c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800313e:	897b      	ldrh	r3, [r7, #10]
 8003140:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003144:	7a7b      	ldrb	r3, [r7, #9]
 8003146:	041b      	lsls	r3, r3, #16
 8003148:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800314c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003152:	6a3b      	ldr	r3, [r7, #32]
 8003154:	4313      	orrs	r3, r2
 8003156:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800315a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	0d5b      	lsrs	r3, r3, #21
 8003166:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800316a:	4b08      	ldr	r3, [pc, #32]	; (800318c <I2C_TransferConfig+0x60>)
 800316c:	430b      	orrs	r3, r1
 800316e:	43db      	mvns	r3, r3
 8003170:	ea02 0103 	and.w	r1, r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	430a      	orrs	r2, r1
 800317c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800317e:	bf00      	nop
 8003180:	371c      	adds	r7, #28
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	03ff63ff 	.word	0x03ff63ff

08003190 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b20      	cmp	r3, #32
 80031a4:	d138      	bne.n	8003218 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d101      	bne.n	80031b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031b0:	2302      	movs	r3, #2
 80031b2:	e032      	b.n	800321a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2224      	movs	r2, #36	; 0x24
 80031c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0201 	bic.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6819      	ldr	r1, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0201 	orr.w	r2, r2, #1
 8003202:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2220      	movs	r2, #32
 8003208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003214:	2300      	movs	r3, #0
 8003216:	e000      	b.n	800321a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003218:	2302      	movs	r3, #2
  }
}
 800321a:	4618      	mov	r0, r3
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003226:	b480      	push	{r7}
 8003228:	b085      	sub	sp, #20
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
 800322e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b20      	cmp	r3, #32
 800323a:	d139      	bne.n	80032b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003242:	2b01      	cmp	r3, #1
 8003244:	d101      	bne.n	800324a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003246:	2302      	movs	r3, #2
 8003248:	e033      	b.n	80032b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2224      	movs	r2, #36	; 0x24
 8003256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0201 	bic.w	r2, r2, #1
 8003268:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003278:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	021b      	lsls	r3, r3, #8
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4313      	orrs	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	e000      	b.n	80032b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032b0:	2302      	movs	r3, #2
  }
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
	...

080032c0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032c4:	4b05      	ldr	r3, [pc, #20]	; (80032dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a04      	ldr	r2, [pc, #16]	; (80032dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ce:	6013      	str	r3, [r2, #0]
}
 80032d0:	bf00      	nop
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40007000 	.word	0x40007000

080032e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80032e6:	2300      	movs	r3, #0
 80032e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80032ea:	4b23      	ldr	r3, [pc, #140]	; (8003378 <HAL_PWREx_EnableOverDrive+0x98>)
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	4a22      	ldr	r2, [pc, #136]	; (8003378 <HAL_PWREx_EnableOverDrive+0x98>)
 80032f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f4:	6413      	str	r3, [r2, #64]	; 0x40
 80032f6:	4b20      	ldr	r3, [pc, #128]	; (8003378 <HAL_PWREx_EnableOverDrive+0x98>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fe:	603b      	str	r3, [r7, #0]
 8003300:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003302:	4b1e      	ldr	r3, [pc, #120]	; (800337c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a1d      	ldr	r2, [pc, #116]	; (800337c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800330c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800330e:	f7fe fde9 	bl	8001ee4 <HAL_GetTick>
 8003312:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003314:	e009      	b.n	800332a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003316:	f7fe fde5 	bl	8001ee4 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003324:	d901      	bls.n	800332a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e022      	b.n	8003370 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800332a:	4b14      	ldr	r3, [pc, #80]	; (800337c <HAL_PWREx_EnableOverDrive+0x9c>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003336:	d1ee      	bne.n	8003316 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003338:	4b10      	ldr	r3, [pc, #64]	; (800337c <HAL_PWREx_EnableOverDrive+0x9c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a0f      	ldr	r2, [pc, #60]	; (800337c <HAL_PWREx_EnableOverDrive+0x9c>)
 800333e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003342:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003344:	f7fe fdce 	bl	8001ee4 <HAL_GetTick>
 8003348:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800334a:	e009      	b.n	8003360 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800334c:	f7fe fdca 	bl	8001ee4 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800335a:	d901      	bls.n	8003360 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e007      	b.n	8003370 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003360:	4b06      	ldr	r3, [pc, #24]	; (800337c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003368:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800336c:	d1ee      	bne.n	800334c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40023800 	.word	0x40023800
 800337c:	40007000 	.word	0x40007000

08003380 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003388:	2300      	movs	r3, #0
 800338a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e29b      	b.n	80038ce <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 8087 	beq.w	80034b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033a4:	4b96      	ldr	r3, [pc, #600]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 030c 	and.w	r3, r3, #12
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	d00c      	beq.n	80033ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033b0:	4b93      	ldr	r3, [pc, #588]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 030c 	and.w	r3, r3, #12
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d112      	bne.n	80033e2 <HAL_RCC_OscConfig+0x62>
 80033bc:	4b90      	ldr	r3, [pc, #576]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033c8:	d10b      	bne.n	80033e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ca:	4b8d      	ldr	r3, [pc, #564]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d06c      	beq.n	80034b0 <HAL_RCC_OscConfig+0x130>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d168      	bne.n	80034b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e275      	b.n	80038ce <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ea:	d106      	bne.n	80033fa <HAL_RCC_OscConfig+0x7a>
 80033ec:	4b84      	ldr	r3, [pc, #528]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a83      	ldr	r2, [pc, #524]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80033f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f6:	6013      	str	r3, [r2, #0]
 80033f8:	e02e      	b.n	8003458 <HAL_RCC_OscConfig+0xd8>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10c      	bne.n	800341c <HAL_RCC_OscConfig+0x9c>
 8003402:	4b7f      	ldr	r3, [pc, #508]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a7e      	ldr	r2, [pc, #504]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 8003408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	4b7c      	ldr	r3, [pc, #496]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a7b      	ldr	r2, [pc, #492]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 8003414:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	e01d      	b.n	8003458 <HAL_RCC_OscConfig+0xd8>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003424:	d10c      	bne.n	8003440 <HAL_RCC_OscConfig+0xc0>
 8003426:	4b76      	ldr	r3, [pc, #472]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a75      	ldr	r2, [pc, #468]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 800342c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	4b73      	ldr	r3, [pc, #460]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a72      	ldr	r2, [pc, #456]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 8003438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	e00b      	b.n	8003458 <HAL_RCC_OscConfig+0xd8>
 8003440:	4b6f      	ldr	r3, [pc, #444]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a6e      	ldr	r2, [pc, #440]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 8003446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800344a:	6013      	str	r3, [r2, #0]
 800344c:	4b6c      	ldr	r3, [pc, #432]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a6b      	ldr	r2, [pc, #428]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 8003452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d013      	beq.n	8003488 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003460:	f7fe fd40 	bl	8001ee4 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003468:	f7fe fd3c 	bl	8001ee4 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b64      	cmp	r3, #100	; 0x64
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e229      	b.n	80038ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347a:	4b61      	ldr	r3, [pc, #388]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0xe8>
 8003486:	e014      	b.n	80034b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003488:	f7fe fd2c 	bl	8001ee4 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003490:	f7fe fd28 	bl	8001ee4 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b64      	cmp	r3, #100	; 0x64
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e215      	b.n	80038ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034a2:	4b57      	ldr	r3, [pc, #348]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0x110>
 80034ae:	e000      	b.n	80034b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d069      	beq.n	8003592 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034be:	4b50      	ldr	r3, [pc, #320]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 030c 	and.w	r3, r3, #12
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00b      	beq.n	80034e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ca:	4b4d      	ldr	r3, [pc, #308]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 030c 	and.w	r3, r3, #12
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d11c      	bne.n	8003510 <HAL_RCC_OscConfig+0x190>
 80034d6:	4b4a      	ldr	r3, [pc, #296]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d116      	bne.n	8003510 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034e2:	4b47      	ldr	r3, [pc, #284]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d005      	beq.n	80034fa <HAL_RCC_OscConfig+0x17a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d001      	beq.n	80034fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e1e9      	b.n	80038ce <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fa:	4b41      	ldr	r3, [pc, #260]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	493d      	ldr	r1, [pc, #244]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 800350a:	4313      	orrs	r3, r2
 800350c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350e:	e040      	b.n	8003592 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d023      	beq.n	8003560 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003518:	4b39      	ldr	r3, [pc, #228]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a38      	ldr	r2, [pc, #224]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 800351e:	f043 0301 	orr.w	r3, r3, #1
 8003522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003524:	f7fe fcde 	bl	8001ee4 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800352c:	f7fe fcda 	bl	8001ee4 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e1c7      	b.n	80038ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353e:	4b30      	ldr	r3, [pc, #192]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0f0      	beq.n	800352c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800354a:	4b2d      	ldr	r3, [pc, #180]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	4929      	ldr	r1, [pc, #164]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 800355a:	4313      	orrs	r3, r2
 800355c:	600b      	str	r3, [r1, #0]
 800355e:	e018      	b.n	8003592 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003560:	4b27      	ldr	r3, [pc, #156]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a26      	ldr	r2, [pc, #152]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 8003566:	f023 0301 	bic.w	r3, r3, #1
 800356a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356c:	f7fe fcba 	bl	8001ee4 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003574:	f7fe fcb6 	bl	8001ee4 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e1a3      	b.n	80038ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003586:	4b1e      	ldr	r3, [pc, #120]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f0      	bne.n	8003574 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	d038      	beq.n	8003610 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d019      	beq.n	80035da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035a6:	4b16      	ldr	r3, [pc, #88]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80035a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035aa:	4a15      	ldr	r2, [pc, #84]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b2:	f7fe fc97 	bl	8001ee4 <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035b8:	e008      	b.n	80035cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ba:	f7fe fc93 	bl	8001ee4 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e180      	b.n	80038ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035cc:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80035ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0f0      	beq.n	80035ba <HAL_RCC_OscConfig+0x23a>
 80035d8:	e01a      	b.n	8003610 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035da:	4b09      	ldr	r3, [pc, #36]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80035dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035de:	4a08      	ldr	r2, [pc, #32]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80035e0:	f023 0301 	bic.w	r3, r3, #1
 80035e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e6:	f7fe fc7d 	bl	8001ee4 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ec:	e00a      	b.n	8003604 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ee:	f7fe fc79 	bl	8001ee4 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d903      	bls.n	8003604 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e166      	b.n	80038ce <HAL_RCC_OscConfig+0x54e>
 8003600:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003604:	4b92      	ldr	r3, [pc, #584]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 8003606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1ee      	bne.n	80035ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 80a4 	beq.w	8003766 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800361e:	4b8c      	ldr	r3, [pc, #560]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10d      	bne.n	8003646 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800362a:	4b89      	ldr	r3, [pc, #548]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	4a88      	ldr	r2, [pc, #544]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 8003630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003634:	6413      	str	r3, [r2, #64]	; 0x40
 8003636:	4b86      	ldr	r3, [pc, #536]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363e:	60bb      	str	r3, [r7, #8]
 8003640:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003642:	2301      	movs	r3, #1
 8003644:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003646:	4b83      	ldr	r3, [pc, #524]	; (8003854 <HAL_RCC_OscConfig+0x4d4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364e:	2b00      	cmp	r3, #0
 8003650:	d118      	bne.n	8003684 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003652:	4b80      	ldr	r3, [pc, #512]	; (8003854 <HAL_RCC_OscConfig+0x4d4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a7f      	ldr	r2, [pc, #508]	; (8003854 <HAL_RCC_OscConfig+0x4d4>)
 8003658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800365c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800365e:	f7fe fc41 	bl	8001ee4 <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003666:	f7fe fc3d 	bl	8001ee4 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b64      	cmp	r3, #100	; 0x64
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e12a      	b.n	80038ce <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003678:	4b76      	ldr	r3, [pc, #472]	; (8003854 <HAL_RCC_OscConfig+0x4d4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0f0      	beq.n	8003666 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d106      	bne.n	800369a <HAL_RCC_OscConfig+0x31a>
 800368c:	4b70      	ldr	r3, [pc, #448]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 800368e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003690:	4a6f      	ldr	r2, [pc, #444]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 8003692:	f043 0301 	orr.w	r3, r3, #1
 8003696:	6713      	str	r3, [r2, #112]	; 0x70
 8003698:	e02d      	b.n	80036f6 <HAL_RCC_OscConfig+0x376>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10c      	bne.n	80036bc <HAL_RCC_OscConfig+0x33c>
 80036a2:	4b6b      	ldr	r3, [pc, #428]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 80036a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a6:	4a6a      	ldr	r2, [pc, #424]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 80036a8:	f023 0301 	bic.w	r3, r3, #1
 80036ac:	6713      	str	r3, [r2, #112]	; 0x70
 80036ae:	4b68      	ldr	r3, [pc, #416]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 80036b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b2:	4a67      	ldr	r2, [pc, #412]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 80036b4:	f023 0304 	bic.w	r3, r3, #4
 80036b8:	6713      	str	r3, [r2, #112]	; 0x70
 80036ba:	e01c      	b.n	80036f6 <HAL_RCC_OscConfig+0x376>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	2b05      	cmp	r3, #5
 80036c2:	d10c      	bne.n	80036de <HAL_RCC_OscConfig+0x35e>
 80036c4:	4b62      	ldr	r3, [pc, #392]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 80036c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c8:	4a61      	ldr	r2, [pc, #388]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 80036ca:	f043 0304 	orr.w	r3, r3, #4
 80036ce:	6713      	str	r3, [r2, #112]	; 0x70
 80036d0:	4b5f      	ldr	r3, [pc, #380]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 80036d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d4:	4a5e      	ldr	r2, [pc, #376]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	6713      	str	r3, [r2, #112]	; 0x70
 80036dc:	e00b      	b.n	80036f6 <HAL_RCC_OscConfig+0x376>
 80036de:	4b5c      	ldr	r3, [pc, #368]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 80036e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e2:	4a5b      	ldr	r2, [pc, #364]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 80036e4:	f023 0301 	bic.w	r3, r3, #1
 80036e8:	6713      	str	r3, [r2, #112]	; 0x70
 80036ea:	4b59      	ldr	r3, [pc, #356]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 80036ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ee:	4a58      	ldr	r2, [pc, #352]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 80036f0:	f023 0304 	bic.w	r3, r3, #4
 80036f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d015      	beq.n	800372a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fe:	f7fe fbf1 	bl	8001ee4 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003704:	e00a      	b.n	800371c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003706:	f7fe fbed 	bl	8001ee4 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	f241 3288 	movw	r2, #5000	; 0x1388
 8003714:	4293      	cmp	r3, r2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e0d8      	b.n	80038ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371c:	4b4c      	ldr	r3, [pc, #304]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 800371e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0ee      	beq.n	8003706 <HAL_RCC_OscConfig+0x386>
 8003728:	e014      	b.n	8003754 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372a:	f7fe fbdb 	bl	8001ee4 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003730:	e00a      	b.n	8003748 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003732:	f7fe fbd7 	bl	8001ee4 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003740:	4293      	cmp	r3, r2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e0c2      	b.n	80038ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003748:	4b41      	ldr	r3, [pc, #260]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 800374a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1ee      	bne.n	8003732 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003754:	7dfb      	ldrb	r3, [r7, #23]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d105      	bne.n	8003766 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800375a:	4b3d      	ldr	r3, [pc, #244]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	4a3c      	ldr	r2, [pc, #240]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 8003760:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003764:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 80ae 	beq.w	80038cc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003770:	4b37      	ldr	r3, [pc, #220]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f003 030c 	and.w	r3, r3, #12
 8003778:	2b08      	cmp	r3, #8
 800377a:	d06d      	beq.n	8003858 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	2b02      	cmp	r3, #2
 8003782:	d14b      	bne.n	800381c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003784:	4b32      	ldr	r3, [pc, #200]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a31      	ldr	r2, [pc, #196]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 800378a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800378e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003790:	f7fe fba8 	bl	8001ee4 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003798:	f7fe fba4 	bl	8001ee4 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e091      	b.n	80038ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037aa:	4b29      	ldr	r3, [pc, #164]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1f0      	bne.n	8003798 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69da      	ldr	r2, [r3, #28]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	019b      	lsls	r3, r3, #6
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037cc:	085b      	lsrs	r3, r3, #1
 80037ce:	3b01      	subs	r3, #1
 80037d0:	041b      	lsls	r3, r3, #16
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	061b      	lsls	r3, r3, #24
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e0:	071b      	lsls	r3, r3, #28
 80037e2:	491b      	ldr	r1, [pc, #108]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037e8:	4b19      	ldr	r3, [pc, #100]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a18      	ldr	r2, [pc, #96]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 80037ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f4:	f7fe fb76 	bl	8001ee4 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037fc:	f7fe fb72 	bl	8001ee4 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e05f      	b.n	80038ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800380e:	4b10      	ldr	r3, [pc, #64]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0f0      	beq.n	80037fc <HAL_RCC_OscConfig+0x47c>
 800381a:	e057      	b.n	80038cc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800381c:	4b0c      	ldr	r3, [pc, #48]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a0b      	ldr	r2, [pc, #44]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 8003822:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003828:	f7fe fb5c 	bl	8001ee4 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003830:	f7fe fb58 	bl	8001ee4 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e045      	b.n	80038ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003842:	4b03      	ldr	r3, [pc, #12]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0x4b0>
 800384e:	e03d      	b.n	80038cc <HAL_RCC_OscConfig+0x54c>
 8003850:	40023800 	.word	0x40023800
 8003854:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003858:	4b1f      	ldr	r3, [pc, #124]	; (80038d8 <HAL_RCC_OscConfig+0x558>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d030      	beq.n	80038c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003870:	429a      	cmp	r2, r3
 8003872:	d129      	bne.n	80038c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800387e:	429a      	cmp	r2, r3
 8003880:	d122      	bne.n	80038c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003888:	4013      	ands	r3, r2
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800388e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003890:	4293      	cmp	r3, r2
 8003892:	d119      	bne.n	80038c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389e:	085b      	lsrs	r3, r3, #1
 80038a0:	3b01      	subs	r3, #1
 80038a2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d10f      	bne.n	80038c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d107      	bne.n	80038c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d001      	beq.n	80038cc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e000      	b.n	80038ce <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40023800 	.word	0x40023800

080038dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e0d0      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038f4:	4b6a      	ldr	r3, [pc, #424]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c4>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 030f 	and.w	r3, r3, #15
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d910      	bls.n	8003924 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003902:	4b67      	ldr	r3, [pc, #412]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f023 020f 	bic.w	r2, r3, #15
 800390a:	4965      	ldr	r1, [pc, #404]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	4313      	orrs	r3, r2
 8003910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003912:	4b63      	ldr	r3, [pc, #396]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d001      	beq.n	8003924 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e0b8      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d020      	beq.n	8003972 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800393c:	4b59      	ldr	r3, [pc, #356]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c8>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	4a58      	ldr	r2, [pc, #352]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003942:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003946:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b00      	cmp	r3, #0
 8003952:	d005      	beq.n	8003960 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003954:	4b53      	ldr	r3, [pc, #332]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	4a52      	ldr	r2, [pc, #328]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c8>)
 800395a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800395e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003960:	4b50      	ldr	r3, [pc, #320]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	494d      	ldr	r1, [pc, #308]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c8>)
 800396e:	4313      	orrs	r3, r2
 8003970:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d040      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d107      	bne.n	8003996 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003986:	4b47      	ldr	r3, [pc, #284]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d115      	bne.n	80039be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e07f      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b02      	cmp	r3, #2
 800399c:	d107      	bne.n	80039ae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800399e:	4b41      	ldr	r3, [pc, #260]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d109      	bne.n	80039be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e073      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ae:	4b3d      	ldr	r3, [pc, #244]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c8>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e06b      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039be:	4b39      	ldr	r3, [pc, #228]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c8>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f023 0203 	bic.w	r2, r3, #3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	4936      	ldr	r1, [pc, #216]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c8>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039d0:	f7fe fa88 	bl	8001ee4 <HAL_GetTick>
 80039d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d6:	e00a      	b.n	80039ee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d8:	f7fe fa84 	bl	8001ee4 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e053      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ee:	4b2d      	ldr	r3, [pc, #180]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c8>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 020c 	and.w	r2, r3, #12
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d1eb      	bne.n	80039d8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a00:	4b27      	ldr	r3, [pc, #156]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 030f 	and.w	r3, r3, #15
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d210      	bcs.n	8003a30 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0e:	4b24      	ldr	r3, [pc, #144]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f023 020f 	bic.w	r2, r3, #15
 8003a16:	4922      	ldr	r1, [pc, #136]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1e:	4b20      	ldr	r3, [pc, #128]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d001      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e032      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d008      	beq.n	8003a4e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a3c:	4b19      	ldr	r3, [pc, #100]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	4916      	ldr	r1, [pc, #88]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0308 	and.w	r3, r3, #8
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d009      	beq.n	8003a6e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a5a:	4b12      	ldr	r3, [pc, #72]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	490e      	ldr	r1, [pc, #56]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a6e:	f000 f821 	bl	8003ab4 <HAL_RCC_GetSysClockFreq>
 8003a72:	4602      	mov	r2, r0
 8003a74:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	091b      	lsrs	r3, r3, #4
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	490a      	ldr	r1, [pc, #40]	; (8003aa8 <HAL_RCC_ClockConfig+0x1cc>)
 8003a80:	5ccb      	ldrb	r3, [r1, r3]
 8003a82:	fa22 f303 	lsr.w	r3, r2, r3
 8003a86:	4a09      	ldr	r2, [pc, #36]	; (8003aac <HAL_RCC_ClockConfig+0x1d0>)
 8003a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a8a:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <HAL_RCC_ClockConfig+0x1d4>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7fe f9e4 	bl	8001e5c <HAL_InitTick>

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40023c00 	.word	0x40023c00
 8003aa4:	40023800 	.word	0x40023800
 8003aa8:	08008010 	.word	0x08008010
 8003aac:	20000090 	.word	0x20000090
 8003ab0:	20000094 	.word	0x20000094

08003ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ab4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003abc:	2300      	movs	r3, #0
 8003abe:	607b      	str	r3, [r7, #4]
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003acc:	4b67      	ldr	r3, [pc, #412]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f003 030c 	and.w	r3, r3, #12
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	d00d      	beq.n	8003af4 <HAL_RCC_GetSysClockFreq+0x40>
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	f200 80bd 	bhi.w	8003c58 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d003      	beq.n	8003aee <HAL_RCC_GetSysClockFreq+0x3a>
 8003ae6:	e0b7      	b.n	8003c58 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ae8:	4b61      	ldr	r3, [pc, #388]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003aea:	60bb      	str	r3, [r7, #8]
      break;
 8003aec:	e0b7      	b.n	8003c5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aee:	4b61      	ldr	r3, [pc, #388]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003af0:	60bb      	str	r3, [r7, #8]
      break;
 8003af2:	e0b4      	b.n	8003c5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003af4:	4b5d      	ldr	r3, [pc, #372]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003afc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003afe:	4b5b      	ldr	r3, [pc, #364]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d04d      	beq.n	8003ba6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b0a:	4b58      	ldr	r3, [pc, #352]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	099b      	lsrs	r3, r3, #6
 8003b10:	461a      	mov	r2, r3
 8003b12:	f04f 0300 	mov.w	r3, #0
 8003b16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b1a:	f04f 0100 	mov.w	r1, #0
 8003b1e:	ea02 0800 	and.w	r8, r2, r0
 8003b22:	ea03 0901 	and.w	r9, r3, r1
 8003b26:	4640      	mov	r0, r8
 8003b28:	4649      	mov	r1, r9
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	f04f 0300 	mov.w	r3, #0
 8003b32:	014b      	lsls	r3, r1, #5
 8003b34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b38:	0142      	lsls	r2, r0, #5
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	ebb0 0008 	subs.w	r0, r0, r8
 8003b42:	eb61 0109 	sbc.w	r1, r1, r9
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	f04f 0300 	mov.w	r3, #0
 8003b4e:	018b      	lsls	r3, r1, #6
 8003b50:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b54:	0182      	lsls	r2, r0, #6
 8003b56:	1a12      	subs	r2, r2, r0
 8003b58:	eb63 0301 	sbc.w	r3, r3, r1
 8003b5c:	f04f 0000 	mov.w	r0, #0
 8003b60:	f04f 0100 	mov.w	r1, #0
 8003b64:	00d9      	lsls	r1, r3, #3
 8003b66:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b6a:	00d0      	lsls	r0, r2, #3
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	eb12 0208 	adds.w	r2, r2, r8
 8003b74:	eb43 0309 	adc.w	r3, r3, r9
 8003b78:	f04f 0000 	mov.w	r0, #0
 8003b7c:	f04f 0100 	mov.w	r1, #0
 8003b80:	0259      	lsls	r1, r3, #9
 8003b82:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003b86:	0250      	lsls	r0, r2, #9
 8003b88:	4602      	mov	r2, r0
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	4619      	mov	r1, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	461a      	mov	r2, r3
 8003b94:	f04f 0300 	mov.w	r3, #0
 8003b98:	f7fc fbaa 	bl	80002f0 <__aeabi_uldivmod>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	e04a      	b.n	8003c3c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ba6:	4b31      	ldr	r3, [pc, #196]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	099b      	lsrs	r3, r3, #6
 8003bac:	461a      	mov	r2, r3
 8003bae:	f04f 0300 	mov.w	r3, #0
 8003bb2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003bb6:	f04f 0100 	mov.w	r1, #0
 8003bba:	ea02 0400 	and.w	r4, r2, r0
 8003bbe:	ea03 0501 	and.w	r5, r3, r1
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	4629      	mov	r1, r5
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	f04f 0300 	mov.w	r3, #0
 8003bce:	014b      	lsls	r3, r1, #5
 8003bd0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003bd4:	0142      	lsls	r2, r0, #5
 8003bd6:	4610      	mov	r0, r2
 8003bd8:	4619      	mov	r1, r3
 8003bda:	1b00      	subs	r0, r0, r4
 8003bdc:	eb61 0105 	sbc.w	r1, r1, r5
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	018b      	lsls	r3, r1, #6
 8003bea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003bee:	0182      	lsls	r2, r0, #6
 8003bf0:	1a12      	subs	r2, r2, r0
 8003bf2:	eb63 0301 	sbc.w	r3, r3, r1
 8003bf6:	f04f 0000 	mov.w	r0, #0
 8003bfa:	f04f 0100 	mov.w	r1, #0
 8003bfe:	00d9      	lsls	r1, r3, #3
 8003c00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c04:	00d0      	lsls	r0, r2, #3
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	1912      	adds	r2, r2, r4
 8003c0c:	eb45 0303 	adc.w	r3, r5, r3
 8003c10:	f04f 0000 	mov.w	r0, #0
 8003c14:	f04f 0100 	mov.w	r1, #0
 8003c18:	0299      	lsls	r1, r3, #10
 8003c1a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c1e:	0290      	lsls	r0, r2, #10
 8003c20:	4602      	mov	r2, r0
 8003c22:	460b      	mov	r3, r1
 8003c24:	4610      	mov	r0, r2
 8003c26:	4619      	mov	r1, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	f7fc fb5e 	bl	80002f0 <__aeabi_uldivmod>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4613      	mov	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	0c1b      	lsrs	r3, r3, #16
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	3301      	adds	r3, #1
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c54:	60bb      	str	r3, [r7, #8]
      break;
 8003c56:	e002      	b.n	8003c5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c58:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c5a:	60bb      	str	r3, [r7, #8]
      break;
 8003c5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c5e:	68bb      	ldr	r3, [r7, #8]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	00f42400 	.word	0x00f42400
 8003c74:	007a1200 	.word	0x007a1200

08003c78 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c7c:	4b03      	ldr	r3, [pc, #12]	; (8003c8c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	20000090 	.word	0x20000090

08003c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c94:	f7ff fff0 	bl	8003c78 <HAL_RCC_GetHCLKFreq>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	0a9b      	lsrs	r3, r3, #10
 8003ca0:	f003 0307 	and.w	r3, r3, #7
 8003ca4:	4903      	ldr	r1, [pc, #12]	; (8003cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ca6:	5ccb      	ldrb	r3, [r1, r3]
 8003ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	08008020 	.word	0x08008020

08003cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cbc:	f7ff ffdc 	bl	8003c78 <HAL_RCC_GetHCLKFreq>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	4b05      	ldr	r3, [pc, #20]	; (8003cd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	0b5b      	lsrs	r3, r3, #13
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	4903      	ldr	r1, [pc, #12]	; (8003cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cce:	5ccb      	ldrb	r3, [r1, r3]
 8003cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	08008020 	.word	0x08008020

08003ce0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b088      	sub	sp, #32
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d012      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d08:	4b69      	ldr	r3, [pc, #420]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	4a68      	ldr	r2, [pc, #416]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d0e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d12:	6093      	str	r3, [r2, #8]
 8003d14:	4b66      	ldr	r3, [pc, #408]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d1c:	4964      	ldr	r1, [pc, #400]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d017      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d3a:	4b5d      	ldr	r3, [pc, #372]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d48:	4959      	ldr	r1, [pc, #356]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d58:	d101      	bne.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003d66:	2301      	movs	r3, #1
 8003d68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d017      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d76:	4b4e      	ldr	r3, [pc, #312]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d84:	494a      	ldr	r1, [pc, #296]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d94:	d101      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003d96:	2301      	movs	r3, #1
 8003d98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003da2:	2301      	movs	r3, #1
 8003da4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003db2:	2301      	movs	r3, #1
 8003db4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0320 	and.w	r3, r3, #32
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 808b 	beq.w	8003eda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dc4:	4b3a      	ldr	r3, [pc, #232]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc8:	4a39      	ldr	r2, [pc, #228]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dce:	6413      	str	r3, [r2, #64]	; 0x40
 8003dd0:	4b37      	ldr	r3, [pc, #220]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd8:	60bb      	str	r3, [r7, #8]
 8003dda:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ddc:	4b35      	ldr	r3, [pc, #212]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a34      	ldr	r2, [pc, #208]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003de8:	f7fe f87c 	bl	8001ee4 <HAL_GetTick>
 8003dec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003dee:	e008      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003df0:	f7fe f878 	bl	8001ee4 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b64      	cmp	r3, #100	; 0x64
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e38f      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e02:	4b2c      	ldr	r3, [pc, #176]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0f0      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e0e:	4b28      	ldr	r3, [pc, #160]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e16:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d035      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d02e      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e2c:	4b20      	ldr	r3, [pc, #128]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e34:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e36:	4b1e      	ldr	r3, [pc, #120]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3a:	4a1d      	ldr	r2, [pc, #116]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e40:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e42:	4b1b      	ldr	r3, [pc, #108]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e46:	4a1a      	ldr	r2, [pc, #104]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e4c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003e4e:	4a18      	ldr	r2, [pc, #96]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e54:	4b16      	ldr	r3, [pc, #88]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d114      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e60:	f7fe f840 	bl	8001ee4 <HAL_GetTick>
 8003e64:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e66:	e00a      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e68:	f7fe f83c 	bl	8001ee4 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e351      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e7e:	4b0c      	ldr	r3, [pc, #48]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0ee      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e96:	d111      	bne.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003e98:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ea4:	4b04      	ldr	r3, [pc, #16]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ea6:	400b      	ands	r3, r1
 8003ea8:	4901      	ldr	r1, [pc, #4]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	608b      	str	r3, [r1, #8]
 8003eae:	e00b      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003eb0:	40023800 	.word	0x40023800
 8003eb4:	40007000 	.word	0x40007000
 8003eb8:	0ffffcff 	.word	0x0ffffcff
 8003ebc:	4bb3      	ldr	r3, [pc, #716]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	4ab2      	ldr	r2, [pc, #712]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ec2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ec6:	6093      	str	r3, [r2, #8]
 8003ec8:	4bb0      	ldr	r3, [pc, #704]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed4:	49ad      	ldr	r1, [pc, #692]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0310 	and.w	r3, r3, #16
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d010      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ee6:	4ba9      	ldr	r3, [pc, #676]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eec:	4aa7      	ldr	r2, [pc, #668]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ef2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003ef6:	4ba5      	ldr	r3, [pc, #660]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ef8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f00:	49a2      	ldr	r1, [pc, #648]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00a      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f14:	4b9d      	ldr	r3, [pc, #628]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f22:	499a      	ldr	r1, [pc, #616]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00a      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f36:	4b95      	ldr	r3, [pc, #596]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f44:	4991      	ldr	r1, [pc, #580]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00a      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f58:	4b8c      	ldr	r3, [pc, #560]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f66:	4989      	ldr	r1, [pc, #548]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f7a:	4b84      	ldr	r3, [pc, #528]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f88:	4980      	ldr	r1, [pc, #512]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00a      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f9c:	4b7b      	ldr	r3, [pc, #492]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa2:	f023 0203 	bic.w	r2, r3, #3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003faa:	4978      	ldr	r1, [pc, #480]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00a      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fbe:	4b73      	ldr	r3, [pc, #460]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc4:	f023 020c 	bic.w	r2, r3, #12
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fcc:	496f      	ldr	r1, [pc, #444]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00a      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fe0:	4b6a      	ldr	r3, [pc, #424]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fee:	4967      	ldr	r1, [pc, #412]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00a      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004002:	4b62      	ldr	r3, [pc, #392]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004008:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004010:	495e      	ldr	r1, [pc, #376]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004012:	4313      	orrs	r3, r2
 8004014:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00a      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004024:	4b59      	ldr	r3, [pc, #356]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004032:	4956      	ldr	r1, [pc, #344]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004034:	4313      	orrs	r3, r2
 8004036:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00a      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004046:	4b51      	ldr	r3, [pc, #324]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004054:	494d      	ldr	r1, [pc, #308]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004056:	4313      	orrs	r3, r2
 8004058:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00a      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004068:	4b48      	ldr	r3, [pc, #288]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800406a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004076:	4945      	ldr	r1, [pc, #276]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004078:	4313      	orrs	r3, r2
 800407a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00a      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800408a:	4b40      	ldr	r3, [pc, #256]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800408c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004090:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004098:	493c      	ldr	r1, [pc, #240]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00a      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040ac:	4b37      	ldr	r3, [pc, #220]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040ba:	4934      	ldr	r1, [pc, #208]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d011      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80040ce:	4b2f      	ldr	r3, [pc, #188]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040dc:	492b      	ldr	r1, [pc, #172]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040ec:	d101      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80040ee:	2301      	movs	r3, #1
 80040f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80040fe:	2301      	movs	r3, #1
 8004100:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00a      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800410e:	4b1f      	ldr	r3, [pc, #124]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004114:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800411c:	491b      	ldr	r1, [pc, #108]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800411e:	4313      	orrs	r3, r2
 8004120:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00b      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004130:	4b16      	ldr	r3, [pc, #88]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004136:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004140:	4912      	ldr	r1, [pc, #72]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004142:	4313      	orrs	r3, r2
 8004144:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00b      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004154:	4b0d      	ldr	r3, [pc, #52]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004164:	4909      	ldr	r1, [pc, #36]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00f      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004178:	4b04      	ldr	r3, [pc, #16]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800417a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800417e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004188:	e002      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800418a:	bf00      	nop
 800418c:	40023800 	.word	0x40023800
 8004190:	4986      	ldr	r1, [pc, #536]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00b      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80041a4:	4b81      	ldr	r3, [pc, #516]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041b4:	497d      	ldr	r1, [pc, #500]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d006      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 80d6 	beq.w	800437c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041d0:	4b76      	ldr	r3, [pc, #472]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a75      	ldr	r2, [pc, #468]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041dc:	f7fd fe82 	bl	8001ee4 <HAL_GetTick>
 80041e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041e2:	e008      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041e4:	f7fd fe7e 	bl	8001ee4 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b64      	cmp	r3, #100	; 0x64
 80041f0:	d901      	bls.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e195      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041f6:	4b6d      	ldr	r3, [pc, #436]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1f0      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d021      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004212:	2b00      	cmp	r3, #0
 8004214:	d11d      	bne.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004216:	4b65      	ldr	r3, [pc, #404]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800421c:	0c1b      	lsrs	r3, r3, #16
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004224:	4b61      	ldr	r3, [pc, #388]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800422a:	0e1b      	lsrs	r3, r3, #24
 800422c:	f003 030f 	and.w	r3, r3, #15
 8004230:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	019a      	lsls	r2, r3, #6
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	041b      	lsls	r3, r3, #16
 800423c:	431a      	orrs	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	061b      	lsls	r3, r3, #24
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	071b      	lsls	r3, r3, #28
 800424a:	4958      	ldr	r1, [pc, #352]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800424c:	4313      	orrs	r3, r2
 800424e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d004      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004262:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004266:	d00a      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004270:	2b00      	cmp	r3, #0
 8004272:	d02e      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800427c:	d129      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800427e:	4b4b      	ldr	r3, [pc, #300]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004284:	0c1b      	lsrs	r3, r3, #16
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800428c:	4b47      	ldr	r3, [pc, #284]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800428e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004292:	0f1b      	lsrs	r3, r3, #28
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	019a      	lsls	r2, r3, #6
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	041b      	lsls	r3, r3, #16
 80042a4:	431a      	orrs	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	061b      	lsls	r3, r3, #24
 80042ac:	431a      	orrs	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	071b      	lsls	r3, r3, #28
 80042b2:	493e      	ldr	r1, [pc, #248]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80042ba:	4b3c      	ldr	r3, [pc, #240]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042c0:	f023 021f 	bic.w	r2, r3, #31
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	3b01      	subs	r3, #1
 80042ca:	4938      	ldr	r1, [pc, #224]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d01d      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042de:	4b33      	ldr	r3, [pc, #204]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042e4:	0e1b      	lsrs	r3, r3, #24
 80042e6:	f003 030f 	and.w	r3, r3, #15
 80042ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042ec:	4b2f      	ldr	r3, [pc, #188]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042f2:	0f1b      	lsrs	r3, r3, #28
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	019a      	lsls	r2, r3, #6
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	041b      	lsls	r3, r3, #16
 8004306:	431a      	orrs	r2, r3
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	061b      	lsls	r3, r3, #24
 800430c:	431a      	orrs	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	071b      	lsls	r3, r3, #28
 8004312:	4926      	ldr	r1, [pc, #152]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004314:	4313      	orrs	r3, r2
 8004316:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d011      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	019a      	lsls	r2, r3, #6
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	041b      	lsls	r3, r3, #16
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	061b      	lsls	r3, r3, #24
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	071b      	lsls	r3, r3, #28
 8004342:	491a      	ldr	r1, [pc, #104]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800434a:	4b18      	ldr	r3, [pc, #96]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a17      	ldr	r2, [pc, #92]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004350:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004354:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004356:	f7fd fdc5 	bl	8001ee4 <HAL_GetTick>
 800435a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800435c:	e008      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800435e:	f7fd fdc1 	bl	8001ee4 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b64      	cmp	r3, #100	; 0x64
 800436a:	d901      	bls.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e0d8      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004370:	4b0e      	ldr	r3, [pc, #56]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0f0      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	2b01      	cmp	r3, #1
 8004380:	f040 80ce 	bne.w	8004520 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004384:	4b09      	ldr	r3, [pc, #36]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a08      	ldr	r2, [pc, #32]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800438a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800438e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004390:	f7fd fda8 	bl	8001ee4 <HAL_GetTick>
 8004394:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004396:	e00b      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004398:	f7fd fda4 	bl	8001ee4 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b64      	cmp	r3, #100	; 0x64
 80043a4:	d904      	bls.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e0bb      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80043aa:	bf00      	nop
 80043ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043b0:	4b5e      	ldr	r3, [pc, #376]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043bc:	d0ec      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d009      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d02e      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d12a      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043e6:	4b51      	ldr	r3, [pc, #324]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ec:	0c1b      	lsrs	r3, r3, #16
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043f4:	4b4d      	ldr	r3, [pc, #308]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fa:	0f1b      	lsrs	r3, r3, #28
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	019a      	lsls	r2, r3, #6
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	041b      	lsls	r3, r3, #16
 800440c:	431a      	orrs	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	061b      	lsls	r3, r3, #24
 8004414:	431a      	orrs	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	071b      	lsls	r3, r3, #28
 800441a:	4944      	ldr	r1, [pc, #272]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800441c:	4313      	orrs	r3, r2
 800441e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004422:	4b42      	ldr	r3, [pc, #264]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004428:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004430:	3b01      	subs	r3, #1
 8004432:	021b      	lsls	r3, r3, #8
 8004434:	493d      	ldr	r1, [pc, #244]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004436:	4313      	orrs	r3, r2
 8004438:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d022      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800444c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004450:	d11d      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004452:	4b36      	ldr	r3, [pc, #216]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004458:	0e1b      	lsrs	r3, r3, #24
 800445a:	f003 030f 	and.w	r3, r3, #15
 800445e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004460:	4b32      	ldr	r3, [pc, #200]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004466:	0f1b      	lsrs	r3, r3, #28
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	019a      	lsls	r2, r3, #6
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	041b      	lsls	r3, r3, #16
 800447a:	431a      	orrs	r2, r3
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	061b      	lsls	r3, r3, #24
 8004480:	431a      	orrs	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	071b      	lsls	r3, r3, #28
 8004486:	4929      	ldr	r1, [pc, #164]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004488:	4313      	orrs	r3, r2
 800448a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0308 	and.w	r3, r3, #8
 8004496:	2b00      	cmp	r3, #0
 8004498:	d028      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800449a:	4b24      	ldr	r3, [pc, #144]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800449c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a0:	0e1b      	lsrs	r3, r3, #24
 80044a2:	f003 030f 	and.w	r3, r3, #15
 80044a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044a8:	4b20      	ldr	r3, [pc, #128]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ae:	0c1b      	lsrs	r3, r3, #16
 80044b0:	f003 0303 	and.w	r3, r3, #3
 80044b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	019a      	lsls	r2, r3, #6
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	041b      	lsls	r3, r3, #16
 80044c0:	431a      	orrs	r2, r3
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	061b      	lsls	r3, r3, #24
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	071b      	lsls	r3, r3, #28
 80044ce:	4917      	ldr	r1, [pc, #92]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80044d6:	4b15      	ldr	r3, [pc, #84]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e4:	4911      	ldr	r1, [pc, #68]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80044ec:	4b0f      	ldr	r3, [pc, #60]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a0e      	ldr	r2, [pc, #56]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f8:	f7fd fcf4 	bl	8001ee4 <HAL_GetTick>
 80044fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044fe:	e008      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004500:	f7fd fcf0 	bl	8001ee4 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b64      	cmp	r3, #100	; 0x64
 800450c:	d901      	bls.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e007      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004512:	4b06      	ldr	r3, [pc, #24]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800451a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800451e:	d1ef      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3720      	adds	r7, #32
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	40023800 	.word	0x40023800

08004530 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e049      	b.n	80045d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d106      	bne.n	800455c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7fd fa74 	bl	8001a44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2202      	movs	r2, #2
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3304      	adds	r3, #4
 800456c:	4619      	mov	r1, r3
 800456e:	4610      	mov	r0, r2
 8004570:	f000 fbee 	bl	8004d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b082      	sub	sp, #8
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e049      	b.n	8004684 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d106      	bne.n	800460a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f841 	bl	800468c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2202      	movs	r2, #2
 800460e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	3304      	adds	r3, #4
 800461a:	4619      	mov	r1, r3
 800461c:	4610      	mov	r0, r2
 800461e:	f000 fb97 	bl	8004d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d109      	bne.n	80046c4 <HAL_TIM_PWM_Start+0x24>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	bf14      	ite	ne
 80046bc:	2301      	movne	r3, #1
 80046be:	2300      	moveq	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	e03c      	b.n	800473e <HAL_TIM_PWM_Start+0x9e>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d109      	bne.n	80046de <HAL_TIM_PWM_Start+0x3e>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	bf14      	ite	ne
 80046d6:	2301      	movne	r3, #1
 80046d8:	2300      	moveq	r3, #0
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	e02f      	b.n	800473e <HAL_TIM_PWM_Start+0x9e>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d109      	bne.n	80046f8 <HAL_TIM_PWM_Start+0x58>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	bf14      	ite	ne
 80046f0:	2301      	movne	r3, #1
 80046f2:	2300      	moveq	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	e022      	b.n	800473e <HAL_TIM_PWM_Start+0x9e>
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	2b0c      	cmp	r3, #12
 80046fc:	d109      	bne.n	8004712 <HAL_TIM_PWM_Start+0x72>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b01      	cmp	r3, #1
 8004708:	bf14      	ite	ne
 800470a:	2301      	movne	r3, #1
 800470c:	2300      	moveq	r3, #0
 800470e:	b2db      	uxtb	r3, r3
 8004710:	e015      	b.n	800473e <HAL_TIM_PWM_Start+0x9e>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b10      	cmp	r3, #16
 8004716:	d109      	bne.n	800472c <HAL_TIM_PWM_Start+0x8c>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b01      	cmp	r3, #1
 8004722:	bf14      	ite	ne
 8004724:	2301      	movne	r3, #1
 8004726:	2300      	moveq	r3, #0
 8004728:	b2db      	uxtb	r3, r3
 800472a:	e008      	b.n	800473e <HAL_TIM_PWM_Start+0x9e>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b01      	cmp	r3, #1
 8004736:	bf14      	ite	ne
 8004738:	2301      	movne	r3, #1
 800473a:	2300      	moveq	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e092      	b.n	800486c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d104      	bne.n	8004756 <HAL_TIM_PWM_Start+0xb6>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2202      	movs	r2, #2
 8004750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004754:	e023      	b.n	800479e <HAL_TIM_PWM_Start+0xfe>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b04      	cmp	r3, #4
 800475a:	d104      	bne.n	8004766 <HAL_TIM_PWM_Start+0xc6>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004764:	e01b      	b.n	800479e <HAL_TIM_PWM_Start+0xfe>
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b08      	cmp	r3, #8
 800476a:	d104      	bne.n	8004776 <HAL_TIM_PWM_Start+0xd6>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004774:	e013      	b.n	800479e <HAL_TIM_PWM_Start+0xfe>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b0c      	cmp	r3, #12
 800477a:	d104      	bne.n	8004786 <HAL_TIM_PWM_Start+0xe6>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004784:	e00b      	b.n	800479e <HAL_TIM_PWM_Start+0xfe>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b10      	cmp	r3, #16
 800478a:	d104      	bne.n	8004796 <HAL_TIM_PWM_Start+0xf6>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004794:	e003      	b.n	800479e <HAL_TIM_PWM_Start+0xfe>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2202      	movs	r2, #2
 800479a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2201      	movs	r2, #1
 80047a4:	6839      	ldr	r1, [r7, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 fe6a 	bl	8005480 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a30      	ldr	r2, [pc, #192]	; (8004874 <HAL_TIM_PWM_Start+0x1d4>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d004      	beq.n	80047c0 <HAL_TIM_PWM_Start+0x120>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a2f      	ldr	r2, [pc, #188]	; (8004878 <HAL_TIM_PWM_Start+0x1d8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d101      	bne.n	80047c4 <HAL_TIM_PWM_Start+0x124>
 80047c0:	2301      	movs	r3, #1
 80047c2:	e000      	b.n	80047c6 <HAL_TIM_PWM_Start+0x126>
 80047c4:	2300      	movs	r3, #0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d007      	beq.n	80047da <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a25      	ldr	r2, [pc, #148]	; (8004874 <HAL_TIM_PWM_Start+0x1d4>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d022      	beq.n	800482a <HAL_TIM_PWM_Start+0x18a>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ec:	d01d      	beq.n	800482a <HAL_TIM_PWM_Start+0x18a>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a22      	ldr	r2, [pc, #136]	; (800487c <HAL_TIM_PWM_Start+0x1dc>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d018      	beq.n	800482a <HAL_TIM_PWM_Start+0x18a>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a20      	ldr	r2, [pc, #128]	; (8004880 <HAL_TIM_PWM_Start+0x1e0>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d013      	beq.n	800482a <HAL_TIM_PWM_Start+0x18a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a1f      	ldr	r2, [pc, #124]	; (8004884 <HAL_TIM_PWM_Start+0x1e4>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d00e      	beq.n	800482a <HAL_TIM_PWM_Start+0x18a>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a19      	ldr	r2, [pc, #100]	; (8004878 <HAL_TIM_PWM_Start+0x1d8>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d009      	beq.n	800482a <HAL_TIM_PWM_Start+0x18a>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a1b      	ldr	r2, [pc, #108]	; (8004888 <HAL_TIM_PWM_Start+0x1e8>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d004      	beq.n	800482a <HAL_TIM_PWM_Start+0x18a>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a19      	ldr	r2, [pc, #100]	; (800488c <HAL_TIM_PWM_Start+0x1ec>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d115      	bne.n	8004856 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	4b17      	ldr	r3, [pc, #92]	; (8004890 <HAL_TIM_PWM_Start+0x1f0>)
 8004832:	4013      	ands	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b06      	cmp	r3, #6
 800483a:	d015      	beq.n	8004868 <HAL_TIM_PWM_Start+0x1c8>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004842:	d011      	beq.n	8004868 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f042 0201 	orr.w	r2, r2, #1
 8004852:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004854:	e008      	b.n	8004868 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f042 0201 	orr.w	r2, r2, #1
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	e000      	b.n	800486a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004868:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	40010000 	.word	0x40010000
 8004878:	40010400 	.word	0x40010400
 800487c:	40000400 	.word	0x40000400
 8004880:	40000800 	.word	0x40000800
 8004884:	40000c00 	.word	0x40000c00
 8004888:	40014000 	.word	0x40014000
 800488c:	40001800 	.word	0x40001800
 8004890:	00010007 	.word	0x00010007

08004894 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2200      	movs	r2, #0
 80048a4:	6839      	ldr	r1, [r7, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 fdea 	bl	8005480 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a36      	ldr	r2, [pc, #216]	; (800498c <HAL_TIM_PWM_Stop+0xf8>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d004      	beq.n	80048c0 <HAL_TIM_PWM_Stop+0x2c>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a35      	ldr	r2, [pc, #212]	; (8004990 <HAL_TIM_PWM_Stop+0xfc>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d101      	bne.n	80048c4 <HAL_TIM_PWM_Stop+0x30>
 80048c0:	2301      	movs	r3, #1
 80048c2:	e000      	b.n	80048c6 <HAL_TIM_PWM_Stop+0x32>
 80048c4:	2300      	movs	r3, #0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d017      	beq.n	80048fa <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6a1a      	ldr	r2, [r3, #32]
 80048d0:	f241 1311 	movw	r3, #4369	; 0x1111
 80048d4:	4013      	ands	r3, r2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10f      	bne.n	80048fa <HAL_TIM_PWM_Stop+0x66>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	6a1a      	ldr	r2, [r3, #32]
 80048e0:	f240 4344 	movw	r3, #1092	; 0x444
 80048e4:	4013      	ands	r3, r2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d107      	bne.n	80048fa <HAL_TIM_PWM_Stop+0x66>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6a1a      	ldr	r2, [r3, #32]
 8004900:	f241 1311 	movw	r3, #4369	; 0x1111
 8004904:	4013      	ands	r3, r2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10f      	bne.n	800492a <HAL_TIM_PWM_Stop+0x96>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6a1a      	ldr	r2, [r3, #32]
 8004910:	f240 4344 	movw	r3, #1092	; 0x444
 8004914:	4013      	ands	r3, r2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d107      	bne.n	800492a <HAL_TIM_PWM_Stop+0x96>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 0201 	bic.w	r2, r2, #1
 8004928:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d104      	bne.n	800493a <HAL_TIM_PWM_Stop+0xa6>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004938:	e023      	b.n	8004982 <HAL_TIM_PWM_Stop+0xee>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b04      	cmp	r3, #4
 800493e:	d104      	bne.n	800494a <HAL_TIM_PWM_Stop+0xb6>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004948:	e01b      	b.n	8004982 <HAL_TIM_PWM_Stop+0xee>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b08      	cmp	r3, #8
 800494e:	d104      	bne.n	800495a <HAL_TIM_PWM_Stop+0xc6>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004958:	e013      	b.n	8004982 <HAL_TIM_PWM_Stop+0xee>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b0c      	cmp	r3, #12
 800495e:	d104      	bne.n	800496a <HAL_TIM_PWM_Stop+0xd6>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004968:	e00b      	b.n	8004982 <HAL_TIM_PWM_Stop+0xee>
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	2b10      	cmp	r3, #16
 800496e:	d104      	bne.n	800497a <HAL_TIM_PWM_Stop+0xe6>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004978:	e003      	b.n	8004982 <HAL_TIM_PWM_Stop+0xee>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	40010000 	.word	0x40010000
 8004990:	40010400 	.word	0x40010400

08004994 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049a0:	2300      	movs	r3, #0
 80049a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d101      	bne.n	80049b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049ae:	2302      	movs	r3, #2
 80049b0:	e0ff      	b.n	8004bb2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b14      	cmp	r3, #20
 80049be:	f200 80f0 	bhi.w	8004ba2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80049c2:	a201      	add	r2, pc, #4	; (adr r2, 80049c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c8:	08004a1d 	.word	0x08004a1d
 80049cc:	08004ba3 	.word	0x08004ba3
 80049d0:	08004ba3 	.word	0x08004ba3
 80049d4:	08004ba3 	.word	0x08004ba3
 80049d8:	08004a5d 	.word	0x08004a5d
 80049dc:	08004ba3 	.word	0x08004ba3
 80049e0:	08004ba3 	.word	0x08004ba3
 80049e4:	08004ba3 	.word	0x08004ba3
 80049e8:	08004a9f 	.word	0x08004a9f
 80049ec:	08004ba3 	.word	0x08004ba3
 80049f0:	08004ba3 	.word	0x08004ba3
 80049f4:	08004ba3 	.word	0x08004ba3
 80049f8:	08004adf 	.word	0x08004adf
 80049fc:	08004ba3 	.word	0x08004ba3
 8004a00:	08004ba3 	.word	0x08004ba3
 8004a04:	08004ba3 	.word	0x08004ba3
 8004a08:	08004b21 	.word	0x08004b21
 8004a0c:	08004ba3 	.word	0x08004ba3
 8004a10:	08004ba3 	.word	0x08004ba3
 8004a14:	08004ba3 	.word	0x08004ba3
 8004a18:	08004b61 	.word	0x08004b61
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68b9      	ldr	r1, [r7, #8]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 fa34 	bl	8004e90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	699a      	ldr	r2, [r3, #24]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0208 	orr.w	r2, r2, #8
 8004a36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	699a      	ldr	r2, [r3, #24]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0204 	bic.w	r2, r2, #4
 8004a46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6999      	ldr	r1, [r3, #24]
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	691a      	ldr	r2, [r3, #16]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	619a      	str	r2, [r3, #24]
      break;
 8004a5a:	e0a5      	b.n	8004ba8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68b9      	ldr	r1, [r7, #8]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fa86 	bl	8004f74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699a      	ldr	r2, [r3, #24]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699a      	ldr	r2, [r3, #24]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6999      	ldr	r1, [r3, #24]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	021a      	lsls	r2, r3, #8
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	619a      	str	r2, [r3, #24]
      break;
 8004a9c:	e084      	b.n	8004ba8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68b9      	ldr	r1, [r7, #8]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 fadd 	bl	8005064 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	69da      	ldr	r2, [r3, #28]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f042 0208 	orr.w	r2, r2, #8
 8004ab8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	69da      	ldr	r2, [r3, #28]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0204 	bic.w	r2, r2, #4
 8004ac8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	69d9      	ldr	r1, [r3, #28]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	691a      	ldr	r2, [r3, #16]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	61da      	str	r2, [r3, #28]
      break;
 8004adc:	e064      	b.n	8004ba8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68b9      	ldr	r1, [r7, #8]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 fb33 	bl	8005150 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	69da      	ldr	r2, [r3, #28]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004af8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69da      	ldr	r2, [r3, #28]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	69d9      	ldr	r1, [r3, #28]
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	021a      	lsls	r2, r3, #8
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	61da      	str	r2, [r3, #28]
      break;
 8004b1e:	e043      	b.n	8004ba8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68b9      	ldr	r1, [r7, #8]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 fb6a 	bl	8005200 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0208 	orr.w	r2, r2, #8
 8004b3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 0204 	bic.w	r2, r2, #4
 8004b4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	691a      	ldr	r2, [r3, #16]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b5e:	e023      	b.n	8004ba8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68b9      	ldr	r1, [r7, #8]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 fb9c 	bl	80052a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	021a      	lsls	r2, r3, #8
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004ba0:	e002      	b.n	8004ba8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	75fb      	strb	r3, [r7, #23]
      break;
 8004ba6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3718      	adds	r7, #24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop

08004bbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d101      	bne.n	8004bd8 <HAL_TIM_ConfigClockSource+0x1c>
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	e0b4      	b.n	8004d42 <HAL_TIM_ConfigClockSource+0x186>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	4b56      	ldr	r3, [pc, #344]	; (8004d4c <HAL_TIM_ConfigClockSource+0x190>)
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c10:	d03e      	beq.n	8004c90 <HAL_TIM_ConfigClockSource+0xd4>
 8004c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c16:	f200 8087 	bhi.w	8004d28 <HAL_TIM_ConfigClockSource+0x16c>
 8004c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c1e:	f000 8086 	beq.w	8004d2e <HAL_TIM_ConfigClockSource+0x172>
 8004c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c26:	d87f      	bhi.n	8004d28 <HAL_TIM_ConfigClockSource+0x16c>
 8004c28:	2b70      	cmp	r3, #112	; 0x70
 8004c2a:	d01a      	beq.n	8004c62 <HAL_TIM_ConfigClockSource+0xa6>
 8004c2c:	2b70      	cmp	r3, #112	; 0x70
 8004c2e:	d87b      	bhi.n	8004d28 <HAL_TIM_ConfigClockSource+0x16c>
 8004c30:	2b60      	cmp	r3, #96	; 0x60
 8004c32:	d050      	beq.n	8004cd6 <HAL_TIM_ConfigClockSource+0x11a>
 8004c34:	2b60      	cmp	r3, #96	; 0x60
 8004c36:	d877      	bhi.n	8004d28 <HAL_TIM_ConfigClockSource+0x16c>
 8004c38:	2b50      	cmp	r3, #80	; 0x50
 8004c3a:	d03c      	beq.n	8004cb6 <HAL_TIM_ConfigClockSource+0xfa>
 8004c3c:	2b50      	cmp	r3, #80	; 0x50
 8004c3e:	d873      	bhi.n	8004d28 <HAL_TIM_ConfigClockSource+0x16c>
 8004c40:	2b40      	cmp	r3, #64	; 0x40
 8004c42:	d058      	beq.n	8004cf6 <HAL_TIM_ConfigClockSource+0x13a>
 8004c44:	2b40      	cmp	r3, #64	; 0x40
 8004c46:	d86f      	bhi.n	8004d28 <HAL_TIM_ConfigClockSource+0x16c>
 8004c48:	2b30      	cmp	r3, #48	; 0x30
 8004c4a:	d064      	beq.n	8004d16 <HAL_TIM_ConfigClockSource+0x15a>
 8004c4c:	2b30      	cmp	r3, #48	; 0x30
 8004c4e:	d86b      	bhi.n	8004d28 <HAL_TIM_ConfigClockSource+0x16c>
 8004c50:	2b20      	cmp	r3, #32
 8004c52:	d060      	beq.n	8004d16 <HAL_TIM_ConfigClockSource+0x15a>
 8004c54:	2b20      	cmp	r3, #32
 8004c56:	d867      	bhi.n	8004d28 <HAL_TIM_ConfigClockSource+0x16c>
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d05c      	beq.n	8004d16 <HAL_TIM_ConfigClockSource+0x15a>
 8004c5c:	2b10      	cmp	r3, #16
 8004c5e:	d05a      	beq.n	8004d16 <HAL_TIM_ConfigClockSource+0x15a>
 8004c60:	e062      	b.n	8004d28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6818      	ldr	r0, [r3, #0]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	6899      	ldr	r1, [r3, #8]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	f000 fbe5 	bl	8005440 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	609a      	str	r2, [r3, #8]
      break;
 8004c8e:	e04f      	b.n	8004d30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6818      	ldr	r0, [r3, #0]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	6899      	ldr	r1, [r3, #8]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f000 fbce 	bl	8005440 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689a      	ldr	r2, [r3, #8]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cb2:	609a      	str	r2, [r3, #8]
      break;
 8004cb4:	e03c      	b.n	8004d30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6818      	ldr	r0, [r3, #0]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	6859      	ldr	r1, [r3, #4]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	f000 fb42 	bl	800534c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2150      	movs	r1, #80	; 0x50
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 fb9b 	bl	800540a <TIM_ITRx_SetConfig>
      break;
 8004cd4:	e02c      	b.n	8004d30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6818      	ldr	r0, [r3, #0]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	6859      	ldr	r1, [r3, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	f000 fb61 	bl	80053aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2160      	movs	r1, #96	; 0x60
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 fb8b 	bl	800540a <TIM_ITRx_SetConfig>
      break;
 8004cf4:	e01c      	b.n	8004d30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6818      	ldr	r0, [r3, #0]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	6859      	ldr	r1, [r3, #4]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	461a      	mov	r2, r3
 8004d04:	f000 fb22 	bl	800534c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2140      	movs	r1, #64	; 0x40
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 fb7b 	bl	800540a <TIM_ITRx_SetConfig>
      break;
 8004d14:	e00c      	b.n	8004d30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4619      	mov	r1, r3
 8004d20:	4610      	mov	r0, r2
 8004d22:	f000 fb72 	bl	800540a <TIM_ITRx_SetConfig>
      break;
 8004d26:	e003      	b.n	8004d30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d2c:	e000      	b.n	8004d30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	fffeff88 	.word	0xfffeff88

08004d50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a40      	ldr	r2, [pc, #256]	; (8004e64 <TIM_Base_SetConfig+0x114>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d013      	beq.n	8004d90 <TIM_Base_SetConfig+0x40>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d6e:	d00f      	beq.n	8004d90 <TIM_Base_SetConfig+0x40>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a3d      	ldr	r2, [pc, #244]	; (8004e68 <TIM_Base_SetConfig+0x118>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d00b      	beq.n	8004d90 <TIM_Base_SetConfig+0x40>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a3c      	ldr	r2, [pc, #240]	; (8004e6c <TIM_Base_SetConfig+0x11c>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d007      	beq.n	8004d90 <TIM_Base_SetConfig+0x40>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a3b      	ldr	r2, [pc, #236]	; (8004e70 <TIM_Base_SetConfig+0x120>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d003      	beq.n	8004d90 <TIM_Base_SetConfig+0x40>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a3a      	ldr	r2, [pc, #232]	; (8004e74 <TIM_Base_SetConfig+0x124>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d108      	bne.n	8004da2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a2f      	ldr	r2, [pc, #188]	; (8004e64 <TIM_Base_SetConfig+0x114>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d02b      	beq.n	8004e02 <TIM_Base_SetConfig+0xb2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db0:	d027      	beq.n	8004e02 <TIM_Base_SetConfig+0xb2>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a2c      	ldr	r2, [pc, #176]	; (8004e68 <TIM_Base_SetConfig+0x118>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d023      	beq.n	8004e02 <TIM_Base_SetConfig+0xb2>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a2b      	ldr	r2, [pc, #172]	; (8004e6c <TIM_Base_SetConfig+0x11c>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d01f      	beq.n	8004e02 <TIM_Base_SetConfig+0xb2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a2a      	ldr	r2, [pc, #168]	; (8004e70 <TIM_Base_SetConfig+0x120>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d01b      	beq.n	8004e02 <TIM_Base_SetConfig+0xb2>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a29      	ldr	r2, [pc, #164]	; (8004e74 <TIM_Base_SetConfig+0x124>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d017      	beq.n	8004e02 <TIM_Base_SetConfig+0xb2>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a28      	ldr	r2, [pc, #160]	; (8004e78 <TIM_Base_SetConfig+0x128>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d013      	beq.n	8004e02 <TIM_Base_SetConfig+0xb2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a27      	ldr	r2, [pc, #156]	; (8004e7c <TIM_Base_SetConfig+0x12c>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d00f      	beq.n	8004e02 <TIM_Base_SetConfig+0xb2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a26      	ldr	r2, [pc, #152]	; (8004e80 <TIM_Base_SetConfig+0x130>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d00b      	beq.n	8004e02 <TIM_Base_SetConfig+0xb2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a25      	ldr	r2, [pc, #148]	; (8004e84 <TIM_Base_SetConfig+0x134>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d007      	beq.n	8004e02 <TIM_Base_SetConfig+0xb2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a24      	ldr	r2, [pc, #144]	; (8004e88 <TIM_Base_SetConfig+0x138>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d003      	beq.n	8004e02 <TIM_Base_SetConfig+0xb2>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a23      	ldr	r2, [pc, #140]	; (8004e8c <TIM_Base_SetConfig+0x13c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d108      	bne.n	8004e14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a0a      	ldr	r2, [pc, #40]	; (8004e64 <TIM_Base_SetConfig+0x114>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d003      	beq.n	8004e48 <TIM_Base_SetConfig+0xf8>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a0c      	ldr	r2, [pc, #48]	; (8004e74 <TIM_Base_SetConfig+0x124>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d103      	bne.n	8004e50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	691a      	ldr	r2, [r3, #16]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	615a      	str	r2, [r3, #20]
}
 8004e56:	bf00      	nop
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	40010000 	.word	0x40010000
 8004e68:	40000400 	.word	0x40000400
 8004e6c:	40000800 	.word	0x40000800
 8004e70:	40000c00 	.word	0x40000c00
 8004e74:	40010400 	.word	0x40010400
 8004e78:	40014000 	.word	0x40014000
 8004e7c:	40014400 	.word	0x40014400
 8004e80:	40014800 	.word	0x40014800
 8004e84:	40001800 	.word	0x40001800
 8004e88:	40001c00 	.word	0x40001c00
 8004e8c:	40002000 	.word	0x40002000

08004e90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	f023 0201 	bic.w	r2, r3, #1
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	4b2b      	ldr	r3, [pc, #172]	; (8004f68 <TIM_OC1_SetConfig+0xd8>)
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f023 0303 	bic.w	r3, r3, #3
 8004ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f023 0302 	bic.w	r3, r3, #2
 8004ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a21      	ldr	r2, [pc, #132]	; (8004f6c <TIM_OC1_SetConfig+0xdc>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d003      	beq.n	8004ef4 <TIM_OC1_SetConfig+0x64>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a20      	ldr	r2, [pc, #128]	; (8004f70 <TIM_OC1_SetConfig+0xe0>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d10c      	bne.n	8004f0e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f023 0308 	bic.w	r3, r3, #8
 8004efa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f023 0304 	bic.w	r3, r3, #4
 8004f0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a16      	ldr	r2, [pc, #88]	; (8004f6c <TIM_OC1_SetConfig+0xdc>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d003      	beq.n	8004f1e <TIM_OC1_SetConfig+0x8e>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a15      	ldr	r2, [pc, #84]	; (8004f70 <TIM_OC1_SetConfig+0xe0>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d111      	bne.n	8004f42 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	621a      	str	r2, [r3, #32]
}
 8004f5c:	bf00      	nop
 8004f5e:	371c      	adds	r7, #28
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	fffeff8f 	.word	0xfffeff8f
 8004f6c:	40010000 	.word	0x40010000
 8004f70:	40010400 	.word	0x40010400

08004f74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	f023 0210 	bic.w	r2, r3, #16
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	4b2e      	ldr	r3, [pc, #184]	; (8005058 <TIM_OC2_SetConfig+0xe4>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	021b      	lsls	r3, r3, #8
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f023 0320 	bic.w	r3, r3, #32
 8004fbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	011b      	lsls	r3, r3, #4
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a23      	ldr	r2, [pc, #140]	; (800505c <TIM_OC2_SetConfig+0xe8>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d003      	beq.n	8004fdc <TIM_OC2_SetConfig+0x68>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a22      	ldr	r2, [pc, #136]	; (8005060 <TIM_OC2_SetConfig+0xec>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d10d      	bne.n	8004ff8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	011b      	lsls	r3, r3, #4
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ff6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a18      	ldr	r2, [pc, #96]	; (800505c <TIM_OC2_SetConfig+0xe8>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d003      	beq.n	8005008 <TIM_OC2_SetConfig+0x94>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a17      	ldr	r2, [pc, #92]	; (8005060 <TIM_OC2_SetConfig+0xec>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d113      	bne.n	8005030 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800500e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005016:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	4313      	orrs	r3, r2
 8005022:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	4313      	orrs	r3, r2
 800502e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	621a      	str	r2, [r3, #32]
}
 800504a:	bf00      	nop
 800504c:	371c      	adds	r7, #28
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	feff8fff 	.word	0xfeff8fff
 800505c:	40010000 	.word	0x40010000
 8005060:	40010400 	.word	0x40010400

08005064 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005064:	b480      	push	{r7}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4b2d      	ldr	r3, [pc, #180]	; (8005144 <TIM_OC3_SetConfig+0xe0>)
 8005090:	4013      	ands	r3, r2
 8005092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f023 0303 	bic.w	r3, r3, #3
 800509a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	021b      	lsls	r3, r3, #8
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a22      	ldr	r2, [pc, #136]	; (8005148 <TIM_OC3_SetConfig+0xe4>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d003      	beq.n	80050ca <TIM_OC3_SetConfig+0x66>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a21      	ldr	r2, [pc, #132]	; (800514c <TIM_OC3_SetConfig+0xe8>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d10d      	bne.n	80050e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	021b      	lsls	r3, r3, #8
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	4313      	orrs	r3, r2
 80050dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a17      	ldr	r2, [pc, #92]	; (8005148 <TIM_OC3_SetConfig+0xe4>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d003      	beq.n	80050f6 <TIM_OC3_SetConfig+0x92>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a16      	ldr	r2, [pc, #88]	; (800514c <TIM_OC3_SetConfig+0xe8>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d113      	bne.n	800511e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005104:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	011b      	lsls	r3, r3, #4
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	4313      	orrs	r3, r2
 8005110:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	011b      	lsls	r3, r3, #4
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	4313      	orrs	r3, r2
 800511c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	621a      	str	r2, [r3, #32]
}
 8005138:	bf00      	nop
 800513a:	371c      	adds	r7, #28
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr
 8005144:	fffeff8f 	.word	0xfffeff8f
 8005148:	40010000 	.word	0x40010000
 800514c:	40010400 	.word	0x40010400

08005150 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005150:	b480      	push	{r7}
 8005152:	b087      	sub	sp, #28
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4b1e      	ldr	r3, [pc, #120]	; (80051f4 <TIM_OC4_SetConfig+0xa4>)
 800517c:	4013      	ands	r3, r2
 800517e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005186:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	021b      	lsls	r3, r3, #8
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	4313      	orrs	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800519a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	031b      	lsls	r3, r3, #12
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a13      	ldr	r2, [pc, #76]	; (80051f8 <TIM_OC4_SetConfig+0xa8>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d003      	beq.n	80051b8 <TIM_OC4_SetConfig+0x68>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a12      	ldr	r2, [pc, #72]	; (80051fc <TIM_OC4_SetConfig+0xac>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d109      	bne.n	80051cc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	019b      	lsls	r3, r3, #6
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	621a      	str	r2, [r3, #32]
}
 80051e6:	bf00      	nop
 80051e8:	371c      	adds	r7, #28
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	feff8fff 	.word	0xfeff8fff
 80051f8:	40010000 	.word	0x40010000
 80051fc:	40010400 	.word	0x40010400

08005200 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	4b1b      	ldr	r3, [pc, #108]	; (8005298 <TIM_OC5_SetConfig+0x98>)
 800522c:	4013      	ands	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	4313      	orrs	r3, r2
 8005238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005240:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	041b      	lsls	r3, r3, #16
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	4313      	orrs	r3, r2
 800524c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a12      	ldr	r2, [pc, #72]	; (800529c <TIM_OC5_SetConfig+0x9c>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d003      	beq.n	800525e <TIM_OC5_SetConfig+0x5e>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a11      	ldr	r2, [pc, #68]	; (80052a0 <TIM_OC5_SetConfig+0xa0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d109      	bne.n	8005272 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005264:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	021b      	lsls	r3, r3, #8
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	4313      	orrs	r3, r2
 8005270:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	621a      	str	r2, [r3, #32]
}
 800528c:	bf00      	nop
 800528e:	371c      	adds	r7, #28
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	fffeff8f 	.word	0xfffeff8f
 800529c:	40010000 	.word	0x40010000
 80052a0:	40010400 	.word	0x40010400

080052a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	4b1c      	ldr	r3, [pc, #112]	; (8005340 <TIM_OC6_SetConfig+0x9c>)
 80052d0:	4013      	ands	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	021b      	lsls	r3, r3, #8
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	4313      	orrs	r3, r2
 80052de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	051b      	lsls	r3, r3, #20
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a13      	ldr	r2, [pc, #76]	; (8005344 <TIM_OC6_SetConfig+0xa0>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d003      	beq.n	8005304 <TIM_OC6_SetConfig+0x60>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a12      	ldr	r2, [pc, #72]	; (8005348 <TIM_OC6_SetConfig+0xa4>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d109      	bne.n	8005318 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800530a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	029b      	lsls	r3, r3, #10
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	4313      	orrs	r3, r2
 8005316:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	621a      	str	r2, [r3, #32]
}
 8005332:	bf00      	nop
 8005334:	371c      	adds	r7, #28
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	feff8fff 	.word	0xfeff8fff
 8005344:	40010000 	.word	0x40010000
 8005348:	40010400 	.word	0x40010400

0800534c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	f023 0201 	bic.w	r2, r3, #1
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	011b      	lsls	r3, r3, #4
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	4313      	orrs	r3, r2
 8005380:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f023 030a 	bic.w	r3, r3, #10
 8005388:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	4313      	orrs	r3, r2
 8005390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	621a      	str	r2, [r3, #32]
}
 800539e:	bf00      	nop
 80053a0:	371c      	adds	r7, #28
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b087      	sub	sp, #28
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	60f8      	str	r0, [r7, #12]
 80053b2:	60b9      	str	r1, [r7, #8]
 80053b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	f023 0210 	bic.w	r2, r3, #16
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6a1b      	ldr	r3, [r3, #32]
 80053cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	031b      	lsls	r3, r3, #12
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	4313      	orrs	r3, r2
 80053de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	011b      	lsls	r3, r3, #4
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	621a      	str	r2, [r3, #32]
}
 80053fe:	bf00      	nop
 8005400:	371c      	adds	r7, #28
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800540a:	b480      	push	{r7}
 800540c:	b085      	sub	sp, #20
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005420:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	4313      	orrs	r3, r2
 8005428:	f043 0307 	orr.w	r3, r3, #7
 800542c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	609a      	str	r2, [r3, #8]
}
 8005434:	bf00      	nop
 8005436:	3714      	adds	r7, #20
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005440:	b480      	push	{r7}
 8005442:	b087      	sub	sp, #28
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
 800544c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800545a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	021a      	lsls	r2, r3, #8
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	431a      	orrs	r2, r3
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	4313      	orrs	r3, r2
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	4313      	orrs	r3, r2
 800546c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	609a      	str	r2, [r3, #8]
}
 8005474:	bf00      	nop
 8005476:	371c      	adds	r7, #28
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f003 031f 	and.w	r3, r3, #31
 8005492:	2201      	movs	r2, #1
 8005494:	fa02 f303 	lsl.w	r3, r2, r3
 8005498:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6a1a      	ldr	r2, [r3, #32]
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	43db      	mvns	r3, r3
 80054a2:	401a      	ands	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6a1a      	ldr	r2, [r3, #32]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f003 031f 	and.w	r3, r3, #31
 80054b2:	6879      	ldr	r1, [r7, #4]
 80054b4:	fa01 f303 	lsl.w	r3, r1, r3
 80054b8:	431a      	orrs	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	621a      	str	r2, [r3, #32]
}
 80054be:	bf00      	nop
 80054c0:	371c      	adds	r7, #28
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
	...

080054cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d101      	bne.n	80054e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054e0:	2302      	movs	r3, #2
 80054e2:	e06d      	b.n	80055c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a30      	ldr	r2, [pc, #192]	; (80055cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d004      	beq.n	8005518 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a2f      	ldr	r2, [pc, #188]	; (80055d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d108      	bne.n	800552a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800551e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	4313      	orrs	r3, r2
 8005528:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005530:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	4313      	orrs	r3, r2
 800553a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a20      	ldr	r2, [pc, #128]	; (80055cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d022      	beq.n	8005594 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005556:	d01d      	beq.n	8005594 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a1d      	ldr	r2, [pc, #116]	; (80055d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d018      	beq.n	8005594 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a1c      	ldr	r2, [pc, #112]	; (80055d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d013      	beq.n	8005594 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a1a      	ldr	r2, [pc, #104]	; (80055dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d00e      	beq.n	8005594 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a15      	ldr	r2, [pc, #84]	; (80055d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d009      	beq.n	8005594 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a16      	ldr	r2, [pc, #88]	; (80055e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d004      	beq.n	8005594 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a15      	ldr	r2, [pc, #84]	; (80055e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d10c      	bne.n	80055ae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800559a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr
 80055cc:	40010000 	.word	0x40010000
 80055d0:	40010400 	.word	0x40010400
 80055d4:	40000400 	.word	0x40000400
 80055d8:	40000800 	.word	0x40000800
 80055dc:	40000c00 	.word	0x40000c00
 80055e0:	40014000 	.word	0x40014000
 80055e4:	40001800 	.word	0x40001800

080055e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e040      	b.n	800567c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d106      	bne.n	8005610 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7fc fab0 	bl	8001b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2224      	movs	r2, #36	; 0x24
 8005614:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f022 0201 	bic.w	r2, r2, #1
 8005624:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f8c0 	bl	80057ac <UART_SetConfig>
 800562c:	4603      	mov	r3, r0
 800562e:	2b01      	cmp	r3, #1
 8005630:	d101      	bne.n	8005636 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e022      	b.n	800567c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	2b00      	cmp	r3, #0
 800563c:	d002      	beq.n	8005644 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 fb16 	bl	8005c70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005652:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689a      	ldr	r2, [r3, #8]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005662:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f042 0201 	orr.w	r2, r2, #1
 8005672:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 fb9d 	bl	8005db4 <UART_CheckIdleState>
 800567a:	4603      	mov	r3, r0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3708      	adds	r7, #8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b08a      	sub	sp, #40	; 0x28
 8005688:	af02      	add	r7, sp, #8
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	603b      	str	r3, [r7, #0]
 8005690:	4613      	mov	r3, r2
 8005692:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005698:	2b20      	cmp	r3, #32
 800569a:	f040 8081 	bne.w	80057a0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d002      	beq.n	80056aa <HAL_UART_Transmit+0x26>
 80056a4:	88fb      	ldrh	r3, [r7, #6]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e079      	b.n	80057a2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d101      	bne.n	80056bc <HAL_UART_Transmit+0x38>
 80056b8:	2302      	movs	r3, #2
 80056ba:	e072      	b.n	80057a2 <HAL_UART_Transmit+0x11e>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2221      	movs	r2, #33	; 0x21
 80056d0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056d2:	f7fc fc07 	bl	8001ee4 <HAL_GetTick>
 80056d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	88fa      	ldrh	r2, [r7, #6]
 80056dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	88fa      	ldrh	r2, [r7, #6]
 80056e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056f0:	d108      	bne.n	8005704 <HAL_UART_Transmit+0x80>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d104      	bne.n	8005704 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80056fa:	2300      	movs	r3, #0
 80056fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	61bb      	str	r3, [r7, #24]
 8005702:	e003      	b.n	800570c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005708:	2300      	movs	r3, #0
 800570a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005714:	e02c      	b.n	8005770 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	2200      	movs	r2, #0
 800571e:	2180      	movs	r1, #128	; 0x80
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f000 fb90 	bl	8005e46 <UART_WaitOnFlagUntilTimeout>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d001      	beq.n	8005730 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e038      	b.n	80057a2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10b      	bne.n	800574e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	881b      	ldrh	r3, [r3, #0]
 800573a:	461a      	mov	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005744:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	3302      	adds	r3, #2
 800574a:	61bb      	str	r3, [r7, #24]
 800574c:	e007      	b.n	800575e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	781a      	ldrb	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	3301      	adds	r3, #1
 800575c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005764:	b29b      	uxth	r3, r3
 8005766:	3b01      	subs	r3, #1
 8005768:	b29a      	uxth	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005776:	b29b      	uxth	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1cc      	bne.n	8005716 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	2200      	movs	r2, #0
 8005784:	2140      	movs	r1, #64	; 0x40
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f000 fb5d 	bl	8005e46 <UART_WaitOnFlagUntilTimeout>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e005      	b.n	80057a2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2220      	movs	r2, #32
 800579a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800579c:	2300      	movs	r3, #0
 800579e:	e000      	b.n	80057a2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80057a0:	2302      	movs	r3, #2
  }
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3720      	adds	r7, #32
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
	...

080057ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b088      	sub	sp, #32
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057b4:	2300      	movs	r3, #0
 80057b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	431a      	orrs	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	431a      	orrs	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	4ba7      	ldr	r3, [pc, #668]	; (8005a74 <UART_SetConfig+0x2c8>)
 80057d8:	4013      	ands	r3, r2
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	6812      	ldr	r2, [r2, #0]
 80057de:	6979      	ldr	r1, [r7, #20]
 80057e0:	430b      	orrs	r3, r1
 80057e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68da      	ldr	r2, [r3, #12]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	4313      	orrs	r3, r2
 8005808:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	430a      	orrs	r2, r1
 800581c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a95      	ldr	r2, [pc, #596]	; (8005a78 <UART_SetConfig+0x2cc>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d120      	bne.n	800586a <UART_SetConfig+0xbe>
 8005828:	4b94      	ldr	r3, [pc, #592]	; (8005a7c <UART_SetConfig+0x2d0>)
 800582a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582e:	f003 0303 	and.w	r3, r3, #3
 8005832:	2b03      	cmp	r3, #3
 8005834:	d816      	bhi.n	8005864 <UART_SetConfig+0xb8>
 8005836:	a201      	add	r2, pc, #4	; (adr r2, 800583c <UART_SetConfig+0x90>)
 8005838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583c:	0800584d 	.word	0x0800584d
 8005840:	08005859 	.word	0x08005859
 8005844:	08005853 	.word	0x08005853
 8005848:	0800585f 	.word	0x0800585f
 800584c:	2301      	movs	r3, #1
 800584e:	77fb      	strb	r3, [r7, #31]
 8005850:	e14f      	b.n	8005af2 <UART_SetConfig+0x346>
 8005852:	2302      	movs	r3, #2
 8005854:	77fb      	strb	r3, [r7, #31]
 8005856:	e14c      	b.n	8005af2 <UART_SetConfig+0x346>
 8005858:	2304      	movs	r3, #4
 800585a:	77fb      	strb	r3, [r7, #31]
 800585c:	e149      	b.n	8005af2 <UART_SetConfig+0x346>
 800585e:	2308      	movs	r3, #8
 8005860:	77fb      	strb	r3, [r7, #31]
 8005862:	e146      	b.n	8005af2 <UART_SetConfig+0x346>
 8005864:	2310      	movs	r3, #16
 8005866:	77fb      	strb	r3, [r7, #31]
 8005868:	e143      	b.n	8005af2 <UART_SetConfig+0x346>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a84      	ldr	r2, [pc, #528]	; (8005a80 <UART_SetConfig+0x2d4>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d132      	bne.n	80058da <UART_SetConfig+0x12e>
 8005874:	4b81      	ldr	r3, [pc, #516]	; (8005a7c <UART_SetConfig+0x2d0>)
 8005876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800587a:	f003 030c 	and.w	r3, r3, #12
 800587e:	2b0c      	cmp	r3, #12
 8005880:	d828      	bhi.n	80058d4 <UART_SetConfig+0x128>
 8005882:	a201      	add	r2, pc, #4	; (adr r2, 8005888 <UART_SetConfig+0xdc>)
 8005884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005888:	080058bd 	.word	0x080058bd
 800588c:	080058d5 	.word	0x080058d5
 8005890:	080058d5 	.word	0x080058d5
 8005894:	080058d5 	.word	0x080058d5
 8005898:	080058c9 	.word	0x080058c9
 800589c:	080058d5 	.word	0x080058d5
 80058a0:	080058d5 	.word	0x080058d5
 80058a4:	080058d5 	.word	0x080058d5
 80058a8:	080058c3 	.word	0x080058c3
 80058ac:	080058d5 	.word	0x080058d5
 80058b0:	080058d5 	.word	0x080058d5
 80058b4:	080058d5 	.word	0x080058d5
 80058b8:	080058cf 	.word	0x080058cf
 80058bc:	2300      	movs	r3, #0
 80058be:	77fb      	strb	r3, [r7, #31]
 80058c0:	e117      	b.n	8005af2 <UART_SetConfig+0x346>
 80058c2:	2302      	movs	r3, #2
 80058c4:	77fb      	strb	r3, [r7, #31]
 80058c6:	e114      	b.n	8005af2 <UART_SetConfig+0x346>
 80058c8:	2304      	movs	r3, #4
 80058ca:	77fb      	strb	r3, [r7, #31]
 80058cc:	e111      	b.n	8005af2 <UART_SetConfig+0x346>
 80058ce:	2308      	movs	r3, #8
 80058d0:	77fb      	strb	r3, [r7, #31]
 80058d2:	e10e      	b.n	8005af2 <UART_SetConfig+0x346>
 80058d4:	2310      	movs	r3, #16
 80058d6:	77fb      	strb	r3, [r7, #31]
 80058d8:	e10b      	b.n	8005af2 <UART_SetConfig+0x346>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a69      	ldr	r2, [pc, #420]	; (8005a84 <UART_SetConfig+0x2d8>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d120      	bne.n	8005926 <UART_SetConfig+0x17a>
 80058e4:	4b65      	ldr	r3, [pc, #404]	; (8005a7c <UART_SetConfig+0x2d0>)
 80058e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80058ee:	2b30      	cmp	r3, #48	; 0x30
 80058f0:	d013      	beq.n	800591a <UART_SetConfig+0x16e>
 80058f2:	2b30      	cmp	r3, #48	; 0x30
 80058f4:	d814      	bhi.n	8005920 <UART_SetConfig+0x174>
 80058f6:	2b20      	cmp	r3, #32
 80058f8:	d009      	beq.n	800590e <UART_SetConfig+0x162>
 80058fa:	2b20      	cmp	r3, #32
 80058fc:	d810      	bhi.n	8005920 <UART_SetConfig+0x174>
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d002      	beq.n	8005908 <UART_SetConfig+0x15c>
 8005902:	2b10      	cmp	r3, #16
 8005904:	d006      	beq.n	8005914 <UART_SetConfig+0x168>
 8005906:	e00b      	b.n	8005920 <UART_SetConfig+0x174>
 8005908:	2300      	movs	r3, #0
 800590a:	77fb      	strb	r3, [r7, #31]
 800590c:	e0f1      	b.n	8005af2 <UART_SetConfig+0x346>
 800590e:	2302      	movs	r3, #2
 8005910:	77fb      	strb	r3, [r7, #31]
 8005912:	e0ee      	b.n	8005af2 <UART_SetConfig+0x346>
 8005914:	2304      	movs	r3, #4
 8005916:	77fb      	strb	r3, [r7, #31]
 8005918:	e0eb      	b.n	8005af2 <UART_SetConfig+0x346>
 800591a:	2308      	movs	r3, #8
 800591c:	77fb      	strb	r3, [r7, #31]
 800591e:	e0e8      	b.n	8005af2 <UART_SetConfig+0x346>
 8005920:	2310      	movs	r3, #16
 8005922:	77fb      	strb	r3, [r7, #31]
 8005924:	e0e5      	b.n	8005af2 <UART_SetConfig+0x346>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a57      	ldr	r2, [pc, #348]	; (8005a88 <UART_SetConfig+0x2dc>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d120      	bne.n	8005972 <UART_SetConfig+0x1c6>
 8005930:	4b52      	ldr	r3, [pc, #328]	; (8005a7c <UART_SetConfig+0x2d0>)
 8005932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005936:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800593a:	2bc0      	cmp	r3, #192	; 0xc0
 800593c:	d013      	beq.n	8005966 <UART_SetConfig+0x1ba>
 800593e:	2bc0      	cmp	r3, #192	; 0xc0
 8005940:	d814      	bhi.n	800596c <UART_SetConfig+0x1c0>
 8005942:	2b80      	cmp	r3, #128	; 0x80
 8005944:	d009      	beq.n	800595a <UART_SetConfig+0x1ae>
 8005946:	2b80      	cmp	r3, #128	; 0x80
 8005948:	d810      	bhi.n	800596c <UART_SetConfig+0x1c0>
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <UART_SetConfig+0x1a8>
 800594e:	2b40      	cmp	r3, #64	; 0x40
 8005950:	d006      	beq.n	8005960 <UART_SetConfig+0x1b4>
 8005952:	e00b      	b.n	800596c <UART_SetConfig+0x1c0>
 8005954:	2300      	movs	r3, #0
 8005956:	77fb      	strb	r3, [r7, #31]
 8005958:	e0cb      	b.n	8005af2 <UART_SetConfig+0x346>
 800595a:	2302      	movs	r3, #2
 800595c:	77fb      	strb	r3, [r7, #31]
 800595e:	e0c8      	b.n	8005af2 <UART_SetConfig+0x346>
 8005960:	2304      	movs	r3, #4
 8005962:	77fb      	strb	r3, [r7, #31]
 8005964:	e0c5      	b.n	8005af2 <UART_SetConfig+0x346>
 8005966:	2308      	movs	r3, #8
 8005968:	77fb      	strb	r3, [r7, #31]
 800596a:	e0c2      	b.n	8005af2 <UART_SetConfig+0x346>
 800596c:	2310      	movs	r3, #16
 800596e:	77fb      	strb	r3, [r7, #31]
 8005970:	e0bf      	b.n	8005af2 <UART_SetConfig+0x346>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a45      	ldr	r2, [pc, #276]	; (8005a8c <UART_SetConfig+0x2e0>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d125      	bne.n	80059c8 <UART_SetConfig+0x21c>
 800597c:	4b3f      	ldr	r3, [pc, #252]	; (8005a7c <UART_SetConfig+0x2d0>)
 800597e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005986:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800598a:	d017      	beq.n	80059bc <UART_SetConfig+0x210>
 800598c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005990:	d817      	bhi.n	80059c2 <UART_SetConfig+0x216>
 8005992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005996:	d00b      	beq.n	80059b0 <UART_SetConfig+0x204>
 8005998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800599c:	d811      	bhi.n	80059c2 <UART_SetConfig+0x216>
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <UART_SetConfig+0x1fe>
 80059a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059a6:	d006      	beq.n	80059b6 <UART_SetConfig+0x20a>
 80059a8:	e00b      	b.n	80059c2 <UART_SetConfig+0x216>
 80059aa:	2300      	movs	r3, #0
 80059ac:	77fb      	strb	r3, [r7, #31]
 80059ae:	e0a0      	b.n	8005af2 <UART_SetConfig+0x346>
 80059b0:	2302      	movs	r3, #2
 80059b2:	77fb      	strb	r3, [r7, #31]
 80059b4:	e09d      	b.n	8005af2 <UART_SetConfig+0x346>
 80059b6:	2304      	movs	r3, #4
 80059b8:	77fb      	strb	r3, [r7, #31]
 80059ba:	e09a      	b.n	8005af2 <UART_SetConfig+0x346>
 80059bc:	2308      	movs	r3, #8
 80059be:	77fb      	strb	r3, [r7, #31]
 80059c0:	e097      	b.n	8005af2 <UART_SetConfig+0x346>
 80059c2:	2310      	movs	r3, #16
 80059c4:	77fb      	strb	r3, [r7, #31]
 80059c6:	e094      	b.n	8005af2 <UART_SetConfig+0x346>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a30      	ldr	r2, [pc, #192]	; (8005a90 <UART_SetConfig+0x2e4>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d125      	bne.n	8005a1e <UART_SetConfig+0x272>
 80059d2:	4b2a      	ldr	r3, [pc, #168]	; (8005a7c <UART_SetConfig+0x2d0>)
 80059d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80059dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059e0:	d017      	beq.n	8005a12 <UART_SetConfig+0x266>
 80059e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059e6:	d817      	bhi.n	8005a18 <UART_SetConfig+0x26c>
 80059e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ec:	d00b      	beq.n	8005a06 <UART_SetConfig+0x25a>
 80059ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059f2:	d811      	bhi.n	8005a18 <UART_SetConfig+0x26c>
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d003      	beq.n	8005a00 <UART_SetConfig+0x254>
 80059f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059fc:	d006      	beq.n	8005a0c <UART_SetConfig+0x260>
 80059fe:	e00b      	b.n	8005a18 <UART_SetConfig+0x26c>
 8005a00:	2301      	movs	r3, #1
 8005a02:	77fb      	strb	r3, [r7, #31]
 8005a04:	e075      	b.n	8005af2 <UART_SetConfig+0x346>
 8005a06:	2302      	movs	r3, #2
 8005a08:	77fb      	strb	r3, [r7, #31]
 8005a0a:	e072      	b.n	8005af2 <UART_SetConfig+0x346>
 8005a0c:	2304      	movs	r3, #4
 8005a0e:	77fb      	strb	r3, [r7, #31]
 8005a10:	e06f      	b.n	8005af2 <UART_SetConfig+0x346>
 8005a12:	2308      	movs	r3, #8
 8005a14:	77fb      	strb	r3, [r7, #31]
 8005a16:	e06c      	b.n	8005af2 <UART_SetConfig+0x346>
 8005a18:	2310      	movs	r3, #16
 8005a1a:	77fb      	strb	r3, [r7, #31]
 8005a1c:	e069      	b.n	8005af2 <UART_SetConfig+0x346>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a1c      	ldr	r2, [pc, #112]	; (8005a94 <UART_SetConfig+0x2e8>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d137      	bne.n	8005a98 <UART_SetConfig+0x2ec>
 8005a28:	4b14      	ldr	r3, [pc, #80]	; (8005a7c <UART_SetConfig+0x2d0>)
 8005a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a2e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005a32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a36:	d017      	beq.n	8005a68 <UART_SetConfig+0x2bc>
 8005a38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a3c:	d817      	bhi.n	8005a6e <UART_SetConfig+0x2c2>
 8005a3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a42:	d00b      	beq.n	8005a5c <UART_SetConfig+0x2b0>
 8005a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a48:	d811      	bhi.n	8005a6e <UART_SetConfig+0x2c2>
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <UART_SetConfig+0x2aa>
 8005a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a52:	d006      	beq.n	8005a62 <UART_SetConfig+0x2b6>
 8005a54:	e00b      	b.n	8005a6e <UART_SetConfig+0x2c2>
 8005a56:	2300      	movs	r3, #0
 8005a58:	77fb      	strb	r3, [r7, #31]
 8005a5a:	e04a      	b.n	8005af2 <UART_SetConfig+0x346>
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	77fb      	strb	r3, [r7, #31]
 8005a60:	e047      	b.n	8005af2 <UART_SetConfig+0x346>
 8005a62:	2304      	movs	r3, #4
 8005a64:	77fb      	strb	r3, [r7, #31]
 8005a66:	e044      	b.n	8005af2 <UART_SetConfig+0x346>
 8005a68:	2308      	movs	r3, #8
 8005a6a:	77fb      	strb	r3, [r7, #31]
 8005a6c:	e041      	b.n	8005af2 <UART_SetConfig+0x346>
 8005a6e:	2310      	movs	r3, #16
 8005a70:	77fb      	strb	r3, [r7, #31]
 8005a72:	e03e      	b.n	8005af2 <UART_SetConfig+0x346>
 8005a74:	efff69f3 	.word	0xefff69f3
 8005a78:	40011000 	.word	0x40011000
 8005a7c:	40023800 	.word	0x40023800
 8005a80:	40004400 	.word	0x40004400
 8005a84:	40004800 	.word	0x40004800
 8005a88:	40004c00 	.word	0x40004c00
 8005a8c:	40005000 	.word	0x40005000
 8005a90:	40011400 	.word	0x40011400
 8005a94:	40007800 	.word	0x40007800
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a71      	ldr	r2, [pc, #452]	; (8005c64 <UART_SetConfig+0x4b8>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d125      	bne.n	8005aee <UART_SetConfig+0x342>
 8005aa2:	4b71      	ldr	r3, [pc, #452]	; (8005c68 <UART_SetConfig+0x4bc>)
 8005aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005aac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005ab0:	d017      	beq.n	8005ae2 <UART_SetConfig+0x336>
 8005ab2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005ab6:	d817      	bhi.n	8005ae8 <UART_SetConfig+0x33c>
 8005ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005abc:	d00b      	beq.n	8005ad6 <UART_SetConfig+0x32a>
 8005abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ac2:	d811      	bhi.n	8005ae8 <UART_SetConfig+0x33c>
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <UART_SetConfig+0x324>
 8005ac8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005acc:	d006      	beq.n	8005adc <UART_SetConfig+0x330>
 8005ace:	e00b      	b.n	8005ae8 <UART_SetConfig+0x33c>
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	77fb      	strb	r3, [r7, #31]
 8005ad4:	e00d      	b.n	8005af2 <UART_SetConfig+0x346>
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	77fb      	strb	r3, [r7, #31]
 8005ada:	e00a      	b.n	8005af2 <UART_SetConfig+0x346>
 8005adc:	2304      	movs	r3, #4
 8005ade:	77fb      	strb	r3, [r7, #31]
 8005ae0:	e007      	b.n	8005af2 <UART_SetConfig+0x346>
 8005ae2:	2308      	movs	r3, #8
 8005ae4:	77fb      	strb	r3, [r7, #31]
 8005ae6:	e004      	b.n	8005af2 <UART_SetConfig+0x346>
 8005ae8:	2310      	movs	r3, #16
 8005aea:	77fb      	strb	r3, [r7, #31]
 8005aec:	e001      	b.n	8005af2 <UART_SetConfig+0x346>
 8005aee:	2310      	movs	r3, #16
 8005af0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005afa:	d15a      	bne.n	8005bb2 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8005afc:	7ffb      	ldrb	r3, [r7, #31]
 8005afe:	2b08      	cmp	r3, #8
 8005b00:	d827      	bhi.n	8005b52 <UART_SetConfig+0x3a6>
 8005b02:	a201      	add	r2, pc, #4	; (adr r2, 8005b08 <UART_SetConfig+0x35c>)
 8005b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b08:	08005b2d 	.word	0x08005b2d
 8005b0c:	08005b35 	.word	0x08005b35
 8005b10:	08005b3d 	.word	0x08005b3d
 8005b14:	08005b53 	.word	0x08005b53
 8005b18:	08005b43 	.word	0x08005b43
 8005b1c:	08005b53 	.word	0x08005b53
 8005b20:	08005b53 	.word	0x08005b53
 8005b24:	08005b53 	.word	0x08005b53
 8005b28:	08005b4b 	.word	0x08005b4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b2c:	f7fe f8b0 	bl	8003c90 <HAL_RCC_GetPCLK1Freq>
 8005b30:	61b8      	str	r0, [r7, #24]
        break;
 8005b32:	e013      	b.n	8005b5c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b34:	f7fe f8c0 	bl	8003cb8 <HAL_RCC_GetPCLK2Freq>
 8005b38:	61b8      	str	r0, [r7, #24]
        break;
 8005b3a:	e00f      	b.n	8005b5c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b3c:	4b4b      	ldr	r3, [pc, #300]	; (8005c6c <UART_SetConfig+0x4c0>)
 8005b3e:	61bb      	str	r3, [r7, #24]
        break;
 8005b40:	e00c      	b.n	8005b5c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b42:	f7fd ffb7 	bl	8003ab4 <HAL_RCC_GetSysClockFreq>
 8005b46:	61b8      	str	r0, [r7, #24]
        break;
 8005b48:	e008      	b.n	8005b5c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b4e:	61bb      	str	r3, [r7, #24]
        break;
 8005b50:	e004      	b.n	8005b5c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005b52:	2300      	movs	r3, #0
 8005b54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	77bb      	strb	r3, [r7, #30]
        break;
 8005b5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d074      	beq.n	8005c4c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	005a      	lsls	r2, r3, #1
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	085b      	lsrs	r3, r3, #1
 8005b6c:	441a      	add	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b76:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	2b0f      	cmp	r3, #15
 8005b7c:	d916      	bls.n	8005bac <UART_SetConfig+0x400>
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b84:	d212      	bcs.n	8005bac <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	f023 030f 	bic.w	r3, r3, #15
 8005b8e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	085b      	lsrs	r3, r3, #1
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	f003 0307 	and.w	r3, r3, #7
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	89fb      	ldrh	r3, [r7, #14]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	89fa      	ldrh	r2, [r7, #14]
 8005ba8:	60da      	str	r2, [r3, #12]
 8005baa:	e04f      	b.n	8005c4c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	77bb      	strb	r3, [r7, #30]
 8005bb0:	e04c      	b.n	8005c4c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bb2:	7ffb      	ldrb	r3, [r7, #31]
 8005bb4:	2b08      	cmp	r3, #8
 8005bb6:	d828      	bhi.n	8005c0a <UART_SetConfig+0x45e>
 8005bb8:	a201      	add	r2, pc, #4	; (adr r2, 8005bc0 <UART_SetConfig+0x414>)
 8005bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbe:	bf00      	nop
 8005bc0:	08005be5 	.word	0x08005be5
 8005bc4:	08005bed 	.word	0x08005bed
 8005bc8:	08005bf5 	.word	0x08005bf5
 8005bcc:	08005c0b 	.word	0x08005c0b
 8005bd0:	08005bfb 	.word	0x08005bfb
 8005bd4:	08005c0b 	.word	0x08005c0b
 8005bd8:	08005c0b 	.word	0x08005c0b
 8005bdc:	08005c0b 	.word	0x08005c0b
 8005be0:	08005c03 	.word	0x08005c03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005be4:	f7fe f854 	bl	8003c90 <HAL_RCC_GetPCLK1Freq>
 8005be8:	61b8      	str	r0, [r7, #24]
        break;
 8005bea:	e013      	b.n	8005c14 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bec:	f7fe f864 	bl	8003cb8 <HAL_RCC_GetPCLK2Freq>
 8005bf0:	61b8      	str	r0, [r7, #24]
        break;
 8005bf2:	e00f      	b.n	8005c14 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bf4:	4b1d      	ldr	r3, [pc, #116]	; (8005c6c <UART_SetConfig+0x4c0>)
 8005bf6:	61bb      	str	r3, [r7, #24]
        break;
 8005bf8:	e00c      	b.n	8005c14 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bfa:	f7fd ff5b 	bl	8003ab4 <HAL_RCC_GetSysClockFreq>
 8005bfe:	61b8      	str	r0, [r7, #24]
        break;
 8005c00:	e008      	b.n	8005c14 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c06:	61bb      	str	r3, [r7, #24]
        break;
 8005c08:	e004      	b.n	8005c14 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	77bb      	strb	r3, [r7, #30]
        break;
 8005c12:	bf00      	nop
    }

    if (pclk != 0U)
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d018      	beq.n	8005c4c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	085a      	lsrs	r2, r3, #1
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	441a      	add	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	2b0f      	cmp	r3, #15
 8005c32:	d909      	bls.n	8005c48 <UART_SetConfig+0x49c>
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c3a:	d205      	bcs.n	8005c48 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	60da      	str	r2, [r3, #12]
 8005c46:	e001      	b.n	8005c4c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005c58:	7fbb      	ldrb	r3, [r7, #30]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3720      	adds	r7, #32
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	40007c00 	.word	0x40007c00
 8005c68:	40023800 	.word	0x40023800
 8005c6c:	00f42400 	.word	0x00f42400

08005c70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00a      	beq.n	8005c9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9e:	f003 0302 	and.w	r3, r3, #2
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00a      	beq.n	8005cbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	f003 0304 	and.w	r3, r3, #4
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00a      	beq.n	8005cde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce2:	f003 0308 	and.w	r3, r3, #8
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00a      	beq.n	8005d00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d04:	f003 0310 	and.w	r3, r3, #16
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00a      	beq.n	8005d22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d26:	f003 0320 	and.w	r3, r3, #32
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00a      	beq.n	8005d44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d01a      	beq.n	8005d86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d6e:	d10a      	bne.n	8005d86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00a      	beq.n	8005da8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	430a      	orrs	r2, r1
 8005da6:	605a      	str	r2, [r3, #4]
  }
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af02      	add	r7, sp, #8
 8005dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005dc4:	f7fc f88e 	bl	8001ee4 <HAL_GetTick>
 8005dc8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0308 	and.w	r3, r3, #8
 8005dd4:	2b08      	cmp	r3, #8
 8005dd6:	d10e      	bne.n	8005df6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f82d 	bl	8005e46 <UART_WaitOnFlagUntilTimeout>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e023      	b.n	8005e3e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0304 	and.w	r3, r3, #4
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	d10e      	bne.n	8005e22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f817 	bl	8005e46 <UART_WaitOnFlagUntilTimeout>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e00d      	b.n	8005e3e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2220      	movs	r2, #32
 8005e26:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b09c      	sub	sp, #112	; 0x70
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	60f8      	str	r0, [r7, #12]
 8005e4e:	60b9      	str	r1, [r7, #8]
 8005e50:	603b      	str	r3, [r7, #0]
 8005e52:	4613      	mov	r3, r2
 8005e54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e56:	e0a5      	b.n	8005fa4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5e:	f000 80a1 	beq.w	8005fa4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e62:	f7fc f83f 	bl	8001ee4 <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d302      	bcc.n	8005e78 <UART_WaitOnFlagUntilTimeout+0x32>
 8005e72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d13e      	bne.n	8005ef6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e80:	e853 3f00 	ldrex	r3, [r3]
 8005e84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e8c:	667b      	str	r3, [r7, #100]	; 0x64
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	461a      	mov	r2, r3
 8005e94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e98:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e9e:	e841 2300 	strex	r3, r2, [r1]
 8005ea2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1e6      	bne.n	8005e78 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	3308      	adds	r3, #8
 8005eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eb4:	e853 3f00 	ldrex	r3, [r3]
 8005eb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ebc:	f023 0301 	bic.w	r3, r3, #1
 8005ec0:	663b      	str	r3, [r7, #96]	; 0x60
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	3308      	adds	r3, #8
 8005ec8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005eca:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ecc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ece:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ed0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ed2:	e841 2300 	strex	r3, r2, [r1]
 8005ed6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1e5      	bne.n	8005eaa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e067      	b.n	8005fc6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0304 	and.w	r3, r3, #4
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d04f      	beq.n	8005fa4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	69db      	ldr	r3, [r3, #28]
 8005f0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f12:	d147      	bne.n	8005fa4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f1c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f26:	e853 3f00 	ldrex	r3, [r3]
 8005f2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	461a      	mov	r2, r3
 8005f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f3c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f3e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f44:	e841 2300 	strex	r3, r2, [r1]
 8005f48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1e6      	bne.n	8005f1e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	3308      	adds	r3, #8
 8005f56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	e853 3f00 	ldrex	r3, [r3]
 8005f5e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	f023 0301 	bic.w	r3, r3, #1
 8005f66:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	3308      	adds	r3, #8
 8005f6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f70:	623a      	str	r2, [r7, #32]
 8005f72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f74:	69f9      	ldr	r1, [r7, #28]
 8005f76:	6a3a      	ldr	r2, [r7, #32]
 8005f78:	e841 2300 	strex	r3, r2, [r1]
 8005f7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1e5      	bne.n	8005f50 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2220      	movs	r2, #32
 8005f88:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2220      	movs	r2, #32
 8005f94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e010      	b.n	8005fc6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	69da      	ldr	r2, [r3, #28]
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	4013      	ands	r3, r2
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	bf0c      	ite	eq
 8005fb4:	2301      	moveq	r3, #1
 8005fb6:	2300      	movne	r3, #0
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	461a      	mov	r2, r3
 8005fbc:	79fb      	ldrb	r3, [r7, #7]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	f43f af4a 	beq.w	8005e58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3770      	adds	r7, #112	; 0x70
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
	...

08005fd0 <__errno>:
 8005fd0:	4b01      	ldr	r3, [pc, #4]	; (8005fd8 <__errno+0x8>)
 8005fd2:	6818      	ldr	r0, [r3, #0]
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	2000009c 	.word	0x2000009c

08005fdc <__libc_init_array>:
 8005fdc:	b570      	push	{r4, r5, r6, lr}
 8005fde:	4d0d      	ldr	r5, [pc, #52]	; (8006014 <__libc_init_array+0x38>)
 8005fe0:	4c0d      	ldr	r4, [pc, #52]	; (8006018 <__libc_init_array+0x3c>)
 8005fe2:	1b64      	subs	r4, r4, r5
 8005fe4:	10a4      	asrs	r4, r4, #2
 8005fe6:	2600      	movs	r6, #0
 8005fe8:	42a6      	cmp	r6, r4
 8005fea:	d109      	bne.n	8006000 <__libc_init_array+0x24>
 8005fec:	4d0b      	ldr	r5, [pc, #44]	; (800601c <__libc_init_array+0x40>)
 8005fee:	4c0c      	ldr	r4, [pc, #48]	; (8006020 <__libc_init_array+0x44>)
 8005ff0:	f001 ff82 	bl	8007ef8 <_init>
 8005ff4:	1b64      	subs	r4, r4, r5
 8005ff6:	10a4      	asrs	r4, r4, #2
 8005ff8:	2600      	movs	r6, #0
 8005ffa:	42a6      	cmp	r6, r4
 8005ffc:	d105      	bne.n	800600a <__libc_init_array+0x2e>
 8005ffe:	bd70      	pop	{r4, r5, r6, pc}
 8006000:	f855 3b04 	ldr.w	r3, [r5], #4
 8006004:	4798      	blx	r3
 8006006:	3601      	adds	r6, #1
 8006008:	e7ee      	b.n	8005fe8 <__libc_init_array+0xc>
 800600a:	f855 3b04 	ldr.w	r3, [r5], #4
 800600e:	4798      	blx	r3
 8006010:	3601      	adds	r6, #1
 8006012:	e7f2      	b.n	8005ffa <__libc_init_array+0x1e>
 8006014:	080099f0 	.word	0x080099f0
 8006018:	080099f0 	.word	0x080099f0
 800601c:	080099f0 	.word	0x080099f0
 8006020:	080099f4 	.word	0x080099f4

08006024 <malloc>:
 8006024:	4b02      	ldr	r3, [pc, #8]	; (8006030 <malloc+0xc>)
 8006026:	4601      	mov	r1, r0
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	f000 b863 	b.w	80060f4 <_malloc_r>
 800602e:	bf00      	nop
 8006030:	2000009c 	.word	0x2000009c

08006034 <free>:
 8006034:	4b02      	ldr	r3, [pc, #8]	; (8006040 <free+0xc>)
 8006036:	4601      	mov	r1, r0
 8006038:	6818      	ldr	r0, [r3, #0]
 800603a:	f000 b80b 	b.w	8006054 <_free_r>
 800603e:	bf00      	nop
 8006040:	2000009c 	.word	0x2000009c

08006044 <memset>:
 8006044:	4402      	add	r2, r0
 8006046:	4603      	mov	r3, r0
 8006048:	4293      	cmp	r3, r2
 800604a:	d100      	bne.n	800604e <memset+0xa>
 800604c:	4770      	bx	lr
 800604e:	f803 1b01 	strb.w	r1, [r3], #1
 8006052:	e7f9      	b.n	8006048 <memset+0x4>

08006054 <_free_r>:
 8006054:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006056:	2900      	cmp	r1, #0
 8006058:	d048      	beq.n	80060ec <_free_r+0x98>
 800605a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800605e:	9001      	str	r0, [sp, #4]
 8006060:	2b00      	cmp	r3, #0
 8006062:	f1a1 0404 	sub.w	r4, r1, #4
 8006066:	bfb8      	it	lt
 8006068:	18e4      	addlt	r4, r4, r3
 800606a:	f000 fc49 	bl	8006900 <__malloc_lock>
 800606e:	4a20      	ldr	r2, [pc, #128]	; (80060f0 <_free_r+0x9c>)
 8006070:	9801      	ldr	r0, [sp, #4]
 8006072:	6813      	ldr	r3, [r2, #0]
 8006074:	4615      	mov	r5, r2
 8006076:	b933      	cbnz	r3, 8006086 <_free_r+0x32>
 8006078:	6063      	str	r3, [r4, #4]
 800607a:	6014      	str	r4, [r2, #0]
 800607c:	b003      	add	sp, #12
 800607e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006082:	f000 bc43 	b.w	800690c <__malloc_unlock>
 8006086:	42a3      	cmp	r3, r4
 8006088:	d90b      	bls.n	80060a2 <_free_r+0x4e>
 800608a:	6821      	ldr	r1, [r4, #0]
 800608c:	1862      	adds	r2, r4, r1
 800608e:	4293      	cmp	r3, r2
 8006090:	bf04      	itt	eq
 8006092:	681a      	ldreq	r2, [r3, #0]
 8006094:	685b      	ldreq	r3, [r3, #4]
 8006096:	6063      	str	r3, [r4, #4]
 8006098:	bf04      	itt	eq
 800609a:	1852      	addeq	r2, r2, r1
 800609c:	6022      	streq	r2, [r4, #0]
 800609e:	602c      	str	r4, [r5, #0]
 80060a0:	e7ec      	b.n	800607c <_free_r+0x28>
 80060a2:	461a      	mov	r2, r3
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	b10b      	cbz	r3, 80060ac <_free_r+0x58>
 80060a8:	42a3      	cmp	r3, r4
 80060aa:	d9fa      	bls.n	80060a2 <_free_r+0x4e>
 80060ac:	6811      	ldr	r1, [r2, #0]
 80060ae:	1855      	adds	r5, r2, r1
 80060b0:	42a5      	cmp	r5, r4
 80060b2:	d10b      	bne.n	80060cc <_free_r+0x78>
 80060b4:	6824      	ldr	r4, [r4, #0]
 80060b6:	4421      	add	r1, r4
 80060b8:	1854      	adds	r4, r2, r1
 80060ba:	42a3      	cmp	r3, r4
 80060bc:	6011      	str	r1, [r2, #0]
 80060be:	d1dd      	bne.n	800607c <_free_r+0x28>
 80060c0:	681c      	ldr	r4, [r3, #0]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	6053      	str	r3, [r2, #4]
 80060c6:	4421      	add	r1, r4
 80060c8:	6011      	str	r1, [r2, #0]
 80060ca:	e7d7      	b.n	800607c <_free_r+0x28>
 80060cc:	d902      	bls.n	80060d4 <_free_r+0x80>
 80060ce:	230c      	movs	r3, #12
 80060d0:	6003      	str	r3, [r0, #0]
 80060d2:	e7d3      	b.n	800607c <_free_r+0x28>
 80060d4:	6825      	ldr	r5, [r4, #0]
 80060d6:	1961      	adds	r1, r4, r5
 80060d8:	428b      	cmp	r3, r1
 80060da:	bf04      	itt	eq
 80060dc:	6819      	ldreq	r1, [r3, #0]
 80060de:	685b      	ldreq	r3, [r3, #4]
 80060e0:	6063      	str	r3, [r4, #4]
 80060e2:	bf04      	itt	eq
 80060e4:	1949      	addeq	r1, r1, r5
 80060e6:	6021      	streq	r1, [r4, #0]
 80060e8:	6054      	str	r4, [r2, #4]
 80060ea:	e7c7      	b.n	800607c <_free_r+0x28>
 80060ec:	b003      	add	sp, #12
 80060ee:	bd30      	pop	{r4, r5, pc}
 80060f0:	20000124 	.word	0x20000124

080060f4 <_malloc_r>:
 80060f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f6:	1ccd      	adds	r5, r1, #3
 80060f8:	f025 0503 	bic.w	r5, r5, #3
 80060fc:	3508      	adds	r5, #8
 80060fe:	2d0c      	cmp	r5, #12
 8006100:	bf38      	it	cc
 8006102:	250c      	movcc	r5, #12
 8006104:	2d00      	cmp	r5, #0
 8006106:	4606      	mov	r6, r0
 8006108:	db01      	blt.n	800610e <_malloc_r+0x1a>
 800610a:	42a9      	cmp	r1, r5
 800610c:	d903      	bls.n	8006116 <_malloc_r+0x22>
 800610e:	230c      	movs	r3, #12
 8006110:	6033      	str	r3, [r6, #0]
 8006112:	2000      	movs	r0, #0
 8006114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006116:	f000 fbf3 	bl	8006900 <__malloc_lock>
 800611a:	4921      	ldr	r1, [pc, #132]	; (80061a0 <_malloc_r+0xac>)
 800611c:	680a      	ldr	r2, [r1, #0]
 800611e:	4614      	mov	r4, r2
 8006120:	b99c      	cbnz	r4, 800614a <_malloc_r+0x56>
 8006122:	4f20      	ldr	r7, [pc, #128]	; (80061a4 <_malloc_r+0xb0>)
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	b923      	cbnz	r3, 8006132 <_malloc_r+0x3e>
 8006128:	4621      	mov	r1, r4
 800612a:	4630      	mov	r0, r6
 800612c:	f000 f8ca 	bl	80062c4 <_sbrk_r>
 8006130:	6038      	str	r0, [r7, #0]
 8006132:	4629      	mov	r1, r5
 8006134:	4630      	mov	r0, r6
 8006136:	f000 f8c5 	bl	80062c4 <_sbrk_r>
 800613a:	1c43      	adds	r3, r0, #1
 800613c:	d123      	bne.n	8006186 <_malloc_r+0x92>
 800613e:	230c      	movs	r3, #12
 8006140:	6033      	str	r3, [r6, #0]
 8006142:	4630      	mov	r0, r6
 8006144:	f000 fbe2 	bl	800690c <__malloc_unlock>
 8006148:	e7e3      	b.n	8006112 <_malloc_r+0x1e>
 800614a:	6823      	ldr	r3, [r4, #0]
 800614c:	1b5b      	subs	r3, r3, r5
 800614e:	d417      	bmi.n	8006180 <_malloc_r+0x8c>
 8006150:	2b0b      	cmp	r3, #11
 8006152:	d903      	bls.n	800615c <_malloc_r+0x68>
 8006154:	6023      	str	r3, [r4, #0]
 8006156:	441c      	add	r4, r3
 8006158:	6025      	str	r5, [r4, #0]
 800615a:	e004      	b.n	8006166 <_malloc_r+0x72>
 800615c:	6863      	ldr	r3, [r4, #4]
 800615e:	42a2      	cmp	r2, r4
 8006160:	bf0c      	ite	eq
 8006162:	600b      	streq	r3, [r1, #0]
 8006164:	6053      	strne	r3, [r2, #4]
 8006166:	4630      	mov	r0, r6
 8006168:	f000 fbd0 	bl	800690c <__malloc_unlock>
 800616c:	f104 000b 	add.w	r0, r4, #11
 8006170:	1d23      	adds	r3, r4, #4
 8006172:	f020 0007 	bic.w	r0, r0, #7
 8006176:	1ac2      	subs	r2, r0, r3
 8006178:	d0cc      	beq.n	8006114 <_malloc_r+0x20>
 800617a:	1a1b      	subs	r3, r3, r0
 800617c:	50a3      	str	r3, [r4, r2]
 800617e:	e7c9      	b.n	8006114 <_malloc_r+0x20>
 8006180:	4622      	mov	r2, r4
 8006182:	6864      	ldr	r4, [r4, #4]
 8006184:	e7cc      	b.n	8006120 <_malloc_r+0x2c>
 8006186:	1cc4      	adds	r4, r0, #3
 8006188:	f024 0403 	bic.w	r4, r4, #3
 800618c:	42a0      	cmp	r0, r4
 800618e:	d0e3      	beq.n	8006158 <_malloc_r+0x64>
 8006190:	1a21      	subs	r1, r4, r0
 8006192:	4630      	mov	r0, r6
 8006194:	f000 f896 	bl	80062c4 <_sbrk_r>
 8006198:	3001      	adds	r0, #1
 800619a:	d1dd      	bne.n	8006158 <_malloc_r+0x64>
 800619c:	e7cf      	b.n	800613e <_malloc_r+0x4a>
 800619e:	bf00      	nop
 80061a0:	20000124 	.word	0x20000124
 80061a4:	20000128 	.word	0x20000128

080061a8 <iprintf>:
 80061a8:	b40f      	push	{r0, r1, r2, r3}
 80061aa:	4b0a      	ldr	r3, [pc, #40]	; (80061d4 <iprintf+0x2c>)
 80061ac:	b513      	push	{r0, r1, r4, lr}
 80061ae:	681c      	ldr	r4, [r3, #0]
 80061b0:	b124      	cbz	r4, 80061bc <iprintf+0x14>
 80061b2:	69a3      	ldr	r3, [r4, #24]
 80061b4:	b913      	cbnz	r3, 80061bc <iprintf+0x14>
 80061b6:	4620      	mov	r0, r4
 80061b8:	f000 fa9e 	bl	80066f8 <__sinit>
 80061bc:	ab05      	add	r3, sp, #20
 80061be:	9a04      	ldr	r2, [sp, #16]
 80061c0:	68a1      	ldr	r1, [r4, #8]
 80061c2:	9301      	str	r3, [sp, #4]
 80061c4:	4620      	mov	r0, r4
 80061c6:	f000 fd2d 	bl	8006c24 <_vfiprintf_r>
 80061ca:	b002      	add	sp, #8
 80061cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061d0:	b004      	add	sp, #16
 80061d2:	4770      	bx	lr
 80061d4:	2000009c 	.word	0x2000009c

080061d8 <_puts_r>:
 80061d8:	b570      	push	{r4, r5, r6, lr}
 80061da:	460e      	mov	r6, r1
 80061dc:	4605      	mov	r5, r0
 80061de:	b118      	cbz	r0, 80061e8 <_puts_r+0x10>
 80061e0:	6983      	ldr	r3, [r0, #24]
 80061e2:	b90b      	cbnz	r3, 80061e8 <_puts_r+0x10>
 80061e4:	f000 fa88 	bl	80066f8 <__sinit>
 80061e8:	69ab      	ldr	r3, [r5, #24]
 80061ea:	68ac      	ldr	r4, [r5, #8]
 80061ec:	b913      	cbnz	r3, 80061f4 <_puts_r+0x1c>
 80061ee:	4628      	mov	r0, r5
 80061f0:	f000 fa82 	bl	80066f8 <__sinit>
 80061f4:	4b2c      	ldr	r3, [pc, #176]	; (80062a8 <_puts_r+0xd0>)
 80061f6:	429c      	cmp	r4, r3
 80061f8:	d120      	bne.n	800623c <_puts_r+0x64>
 80061fa:	686c      	ldr	r4, [r5, #4]
 80061fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061fe:	07db      	lsls	r3, r3, #31
 8006200:	d405      	bmi.n	800620e <_puts_r+0x36>
 8006202:	89a3      	ldrh	r3, [r4, #12]
 8006204:	0598      	lsls	r0, r3, #22
 8006206:	d402      	bmi.n	800620e <_puts_r+0x36>
 8006208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800620a:	f000 fb13 	bl	8006834 <__retarget_lock_acquire_recursive>
 800620e:	89a3      	ldrh	r3, [r4, #12]
 8006210:	0719      	lsls	r1, r3, #28
 8006212:	d51d      	bpl.n	8006250 <_puts_r+0x78>
 8006214:	6923      	ldr	r3, [r4, #16]
 8006216:	b1db      	cbz	r3, 8006250 <_puts_r+0x78>
 8006218:	3e01      	subs	r6, #1
 800621a:	68a3      	ldr	r3, [r4, #8]
 800621c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006220:	3b01      	subs	r3, #1
 8006222:	60a3      	str	r3, [r4, #8]
 8006224:	bb39      	cbnz	r1, 8006276 <_puts_r+0x9e>
 8006226:	2b00      	cmp	r3, #0
 8006228:	da38      	bge.n	800629c <_puts_r+0xc4>
 800622a:	4622      	mov	r2, r4
 800622c:	210a      	movs	r1, #10
 800622e:	4628      	mov	r0, r5
 8006230:	f000 f888 	bl	8006344 <__swbuf_r>
 8006234:	3001      	adds	r0, #1
 8006236:	d011      	beq.n	800625c <_puts_r+0x84>
 8006238:	250a      	movs	r5, #10
 800623a:	e011      	b.n	8006260 <_puts_r+0x88>
 800623c:	4b1b      	ldr	r3, [pc, #108]	; (80062ac <_puts_r+0xd4>)
 800623e:	429c      	cmp	r4, r3
 8006240:	d101      	bne.n	8006246 <_puts_r+0x6e>
 8006242:	68ac      	ldr	r4, [r5, #8]
 8006244:	e7da      	b.n	80061fc <_puts_r+0x24>
 8006246:	4b1a      	ldr	r3, [pc, #104]	; (80062b0 <_puts_r+0xd8>)
 8006248:	429c      	cmp	r4, r3
 800624a:	bf08      	it	eq
 800624c:	68ec      	ldreq	r4, [r5, #12]
 800624e:	e7d5      	b.n	80061fc <_puts_r+0x24>
 8006250:	4621      	mov	r1, r4
 8006252:	4628      	mov	r0, r5
 8006254:	f000 f8c8 	bl	80063e8 <__swsetup_r>
 8006258:	2800      	cmp	r0, #0
 800625a:	d0dd      	beq.n	8006218 <_puts_r+0x40>
 800625c:	f04f 35ff 	mov.w	r5, #4294967295
 8006260:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006262:	07da      	lsls	r2, r3, #31
 8006264:	d405      	bmi.n	8006272 <_puts_r+0x9a>
 8006266:	89a3      	ldrh	r3, [r4, #12]
 8006268:	059b      	lsls	r3, r3, #22
 800626a:	d402      	bmi.n	8006272 <_puts_r+0x9a>
 800626c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800626e:	f000 fae2 	bl	8006836 <__retarget_lock_release_recursive>
 8006272:	4628      	mov	r0, r5
 8006274:	bd70      	pop	{r4, r5, r6, pc}
 8006276:	2b00      	cmp	r3, #0
 8006278:	da04      	bge.n	8006284 <_puts_r+0xac>
 800627a:	69a2      	ldr	r2, [r4, #24]
 800627c:	429a      	cmp	r2, r3
 800627e:	dc06      	bgt.n	800628e <_puts_r+0xb6>
 8006280:	290a      	cmp	r1, #10
 8006282:	d004      	beq.n	800628e <_puts_r+0xb6>
 8006284:	6823      	ldr	r3, [r4, #0]
 8006286:	1c5a      	adds	r2, r3, #1
 8006288:	6022      	str	r2, [r4, #0]
 800628a:	7019      	strb	r1, [r3, #0]
 800628c:	e7c5      	b.n	800621a <_puts_r+0x42>
 800628e:	4622      	mov	r2, r4
 8006290:	4628      	mov	r0, r5
 8006292:	f000 f857 	bl	8006344 <__swbuf_r>
 8006296:	3001      	adds	r0, #1
 8006298:	d1bf      	bne.n	800621a <_puts_r+0x42>
 800629a:	e7df      	b.n	800625c <_puts_r+0x84>
 800629c:	6823      	ldr	r3, [r4, #0]
 800629e:	250a      	movs	r5, #10
 80062a0:	1c5a      	adds	r2, r3, #1
 80062a2:	6022      	str	r2, [r4, #0]
 80062a4:	701d      	strb	r5, [r3, #0]
 80062a6:	e7db      	b.n	8006260 <_puts_r+0x88>
 80062a8:	0800804c 	.word	0x0800804c
 80062ac:	0800806c 	.word	0x0800806c
 80062b0:	0800802c 	.word	0x0800802c

080062b4 <puts>:
 80062b4:	4b02      	ldr	r3, [pc, #8]	; (80062c0 <puts+0xc>)
 80062b6:	4601      	mov	r1, r0
 80062b8:	6818      	ldr	r0, [r3, #0]
 80062ba:	f7ff bf8d 	b.w	80061d8 <_puts_r>
 80062be:	bf00      	nop
 80062c0:	2000009c 	.word	0x2000009c

080062c4 <_sbrk_r>:
 80062c4:	b538      	push	{r3, r4, r5, lr}
 80062c6:	4d06      	ldr	r5, [pc, #24]	; (80062e0 <_sbrk_r+0x1c>)
 80062c8:	2300      	movs	r3, #0
 80062ca:	4604      	mov	r4, r0
 80062cc:	4608      	mov	r0, r1
 80062ce:	602b      	str	r3, [r5, #0]
 80062d0:	f7fb fd46 	bl	8001d60 <_sbrk>
 80062d4:	1c43      	adds	r3, r0, #1
 80062d6:	d102      	bne.n	80062de <_sbrk_r+0x1a>
 80062d8:	682b      	ldr	r3, [r5, #0]
 80062da:	b103      	cbz	r3, 80062de <_sbrk_r+0x1a>
 80062dc:	6023      	str	r3, [r4, #0]
 80062de:	bd38      	pop	{r3, r4, r5, pc}
 80062e0:	2000025c 	.word	0x2000025c

080062e4 <siprintf>:
 80062e4:	b40e      	push	{r1, r2, r3}
 80062e6:	b500      	push	{lr}
 80062e8:	b09c      	sub	sp, #112	; 0x70
 80062ea:	ab1d      	add	r3, sp, #116	; 0x74
 80062ec:	9002      	str	r0, [sp, #8]
 80062ee:	9006      	str	r0, [sp, #24]
 80062f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80062f4:	4809      	ldr	r0, [pc, #36]	; (800631c <siprintf+0x38>)
 80062f6:	9107      	str	r1, [sp, #28]
 80062f8:	9104      	str	r1, [sp, #16]
 80062fa:	4909      	ldr	r1, [pc, #36]	; (8006320 <siprintf+0x3c>)
 80062fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006300:	9105      	str	r1, [sp, #20]
 8006302:	6800      	ldr	r0, [r0, #0]
 8006304:	9301      	str	r3, [sp, #4]
 8006306:	a902      	add	r1, sp, #8
 8006308:	f000 fb62 	bl	80069d0 <_svfiprintf_r>
 800630c:	9b02      	ldr	r3, [sp, #8]
 800630e:	2200      	movs	r2, #0
 8006310:	701a      	strb	r2, [r3, #0]
 8006312:	b01c      	add	sp, #112	; 0x70
 8006314:	f85d eb04 	ldr.w	lr, [sp], #4
 8006318:	b003      	add	sp, #12
 800631a:	4770      	bx	lr
 800631c:	2000009c 	.word	0x2000009c
 8006320:	ffff0208 	.word	0xffff0208

08006324 <strcat>:
 8006324:	b510      	push	{r4, lr}
 8006326:	4602      	mov	r2, r0
 8006328:	7814      	ldrb	r4, [r2, #0]
 800632a:	4613      	mov	r3, r2
 800632c:	3201      	adds	r2, #1
 800632e:	2c00      	cmp	r4, #0
 8006330:	d1fa      	bne.n	8006328 <strcat+0x4>
 8006332:	3b01      	subs	r3, #1
 8006334:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006338:	f803 2f01 	strb.w	r2, [r3, #1]!
 800633c:	2a00      	cmp	r2, #0
 800633e:	d1f9      	bne.n	8006334 <strcat+0x10>
 8006340:	bd10      	pop	{r4, pc}
	...

08006344 <__swbuf_r>:
 8006344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006346:	460e      	mov	r6, r1
 8006348:	4614      	mov	r4, r2
 800634a:	4605      	mov	r5, r0
 800634c:	b118      	cbz	r0, 8006356 <__swbuf_r+0x12>
 800634e:	6983      	ldr	r3, [r0, #24]
 8006350:	b90b      	cbnz	r3, 8006356 <__swbuf_r+0x12>
 8006352:	f000 f9d1 	bl	80066f8 <__sinit>
 8006356:	4b21      	ldr	r3, [pc, #132]	; (80063dc <__swbuf_r+0x98>)
 8006358:	429c      	cmp	r4, r3
 800635a:	d12b      	bne.n	80063b4 <__swbuf_r+0x70>
 800635c:	686c      	ldr	r4, [r5, #4]
 800635e:	69a3      	ldr	r3, [r4, #24]
 8006360:	60a3      	str	r3, [r4, #8]
 8006362:	89a3      	ldrh	r3, [r4, #12]
 8006364:	071a      	lsls	r2, r3, #28
 8006366:	d52f      	bpl.n	80063c8 <__swbuf_r+0x84>
 8006368:	6923      	ldr	r3, [r4, #16]
 800636a:	b36b      	cbz	r3, 80063c8 <__swbuf_r+0x84>
 800636c:	6923      	ldr	r3, [r4, #16]
 800636e:	6820      	ldr	r0, [r4, #0]
 8006370:	1ac0      	subs	r0, r0, r3
 8006372:	6963      	ldr	r3, [r4, #20]
 8006374:	b2f6      	uxtb	r6, r6
 8006376:	4283      	cmp	r3, r0
 8006378:	4637      	mov	r7, r6
 800637a:	dc04      	bgt.n	8006386 <__swbuf_r+0x42>
 800637c:	4621      	mov	r1, r4
 800637e:	4628      	mov	r0, r5
 8006380:	f000 f926 	bl	80065d0 <_fflush_r>
 8006384:	bb30      	cbnz	r0, 80063d4 <__swbuf_r+0x90>
 8006386:	68a3      	ldr	r3, [r4, #8]
 8006388:	3b01      	subs	r3, #1
 800638a:	60a3      	str	r3, [r4, #8]
 800638c:	6823      	ldr	r3, [r4, #0]
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	6022      	str	r2, [r4, #0]
 8006392:	701e      	strb	r6, [r3, #0]
 8006394:	6963      	ldr	r3, [r4, #20]
 8006396:	3001      	adds	r0, #1
 8006398:	4283      	cmp	r3, r0
 800639a:	d004      	beq.n	80063a6 <__swbuf_r+0x62>
 800639c:	89a3      	ldrh	r3, [r4, #12]
 800639e:	07db      	lsls	r3, r3, #31
 80063a0:	d506      	bpl.n	80063b0 <__swbuf_r+0x6c>
 80063a2:	2e0a      	cmp	r6, #10
 80063a4:	d104      	bne.n	80063b0 <__swbuf_r+0x6c>
 80063a6:	4621      	mov	r1, r4
 80063a8:	4628      	mov	r0, r5
 80063aa:	f000 f911 	bl	80065d0 <_fflush_r>
 80063ae:	b988      	cbnz	r0, 80063d4 <__swbuf_r+0x90>
 80063b0:	4638      	mov	r0, r7
 80063b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063b4:	4b0a      	ldr	r3, [pc, #40]	; (80063e0 <__swbuf_r+0x9c>)
 80063b6:	429c      	cmp	r4, r3
 80063b8:	d101      	bne.n	80063be <__swbuf_r+0x7a>
 80063ba:	68ac      	ldr	r4, [r5, #8]
 80063bc:	e7cf      	b.n	800635e <__swbuf_r+0x1a>
 80063be:	4b09      	ldr	r3, [pc, #36]	; (80063e4 <__swbuf_r+0xa0>)
 80063c0:	429c      	cmp	r4, r3
 80063c2:	bf08      	it	eq
 80063c4:	68ec      	ldreq	r4, [r5, #12]
 80063c6:	e7ca      	b.n	800635e <__swbuf_r+0x1a>
 80063c8:	4621      	mov	r1, r4
 80063ca:	4628      	mov	r0, r5
 80063cc:	f000 f80c 	bl	80063e8 <__swsetup_r>
 80063d0:	2800      	cmp	r0, #0
 80063d2:	d0cb      	beq.n	800636c <__swbuf_r+0x28>
 80063d4:	f04f 37ff 	mov.w	r7, #4294967295
 80063d8:	e7ea      	b.n	80063b0 <__swbuf_r+0x6c>
 80063da:	bf00      	nop
 80063dc:	0800804c 	.word	0x0800804c
 80063e0:	0800806c 	.word	0x0800806c
 80063e4:	0800802c 	.word	0x0800802c

080063e8 <__swsetup_r>:
 80063e8:	4b32      	ldr	r3, [pc, #200]	; (80064b4 <__swsetup_r+0xcc>)
 80063ea:	b570      	push	{r4, r5, r6, lr}
 80063ec:	681d      	ldr	r5, [r3, #0]
 80063ee:	4606      	mov	r6, r0
 80063f0:	460c      	mov	r4, r1
 80063f2:	b125      	cbz	r5, 80063fe <__swsetup_r+0x16>
 80063f4:	69ab      	ldr	r3, [r5, #24]
 80063f6:	b913      	cbnz	r3, 80063fe <__swsetup_r+0x16>
 80063f8:	4628      	mov	r0, r5
 80063fa:	f000 f97d 	bl	80066f8 <__sinit>
 80063fe:	4b2e      	ldr	r3, [pc, #184]	; (80064b8 <__swsetup_r+0xd0>)
 8006400:	429c      	cmp	r4, r3
 8006402:	d10f      	bne.n	8006424 <__swsetup_r+0x3c>
 8006404:	686c      	ldr	r4, [r5, #4]
 8006406:	89a3      	ldrh	r3, [r4, #12]
 8006408:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800640c:	0719      	lsls	r1, r3, #28
 800640e:	d42c      	bmi.n	800646a <__swsetup_r+0x82>
 8006410:	06dd      	lsls	r5, r3, #27
 8006412:	d411      	bmi.n	8006438 <__swsetup_r+0x50>
 8006414:	2309      	movs	r3, #9
 8006416:	6033      	str	r3, [r6, #0]
 8006418:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800641c:	81a3      	strh	r3, [r4, #12]
 800641e:	f04f 30ff 	mov.w	r0, #4294967295
 8006422:	e03e      	b.n	80064a2 <__swsetup_r+0xba>
 8006424:	4b25      	ldr	r3, [pc, #148]	; (80064bc <__swsetup_r+0xd4>)
 8006426:	429c      	cmp	r4, r3
 8006428:	d101      	bne.n	800642e <__swsetup_r+0x46>
 800642a:	68ac      	ldr	r4, [r5, #8]
 800642c:	e7eb      	b.n	8006406 <__swsetup_r+0x1e>
 800642e:	4b24      	ldr	r3, [pc, #144]	; (80064c0 <__swsetup_r+0xd8>)
 8006430:	429c      	cmp	r4, r3
 8006432:	bf08      	it	eq
 8006434:	68ec      	ldreq	r4, [r5, #12]
 8006436:	e7e6      	b.n	8006406 <__swsetup_r+0x1e>
 8006438:	0758      	lsls	r0, r3, #29
 800643a:	d512      	bpl.n	8006462 <__swsetup_r+0x7a>
 800643c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800643e:	b141      	cbz	r1, 8006452 <__swsetup_r+0x6a>
 8006440:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006444:	4299      	cmp	r1, r3
 8006446:	d002      	beq.n	800644e <__swsetup_r+0x66>
 8006448:	4630      	mov	r0, r6
 800644a:	f7ff fe03 	bl	8006054 <_free_r>
 800644e:	2300      	movs	r3, #0
 8006450:	6363      	str	r3, [r4, #52]	; 0x34
 8006452:	89a3      	ldrh	r3, [r4, #12]
 8006454:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006458:	81a3      	strh	r3, [r4, #12]
 800645a:	2300      	movs	r3, #0
 800645c:	6063      	str	r3, [r4, #4]
 800645e:	6923      	ldr	r3, [r4, #16]
 8006460:	6023      	str	r3, [r4, #0]
 8006462:	89a3      	ldrh	r3, [r4, #12]
 8006464:	f043 0308 	orr.w	r3, r3, #8
 8006468:	81a3      	strh	r3, [r4, #12]
 800646a:	6923      	ldr	r3, [r4, #16]
 800646c:	b94b      	cbnz	r3, 8006482 <__swsetup_r+0x9a>
 800646e:	89a3      	ldrh	r3, [r4, #12]
 8006470:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006478:	d003      	beq.n	8006482 <__swsetup_r+0x9a>
 800647a:	4621      	mov	r1, r4
 800647c:	4630      	mov	r0, r6
 800647e:	f000 f9ff 	bl	8006880 <__smakebuf_r>
 8006482:	89a0      	ldrh	r0, [r4, #12]
 8006484:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006488:	f010 0301 	ands.w	r3, r0, #1
 800648c:	d00a      	beq.n	80064a4 <__swsetup_r+0xbc>
 800648e:	2300      	movs	r3, #0
 8006490:	60a3      	str	r3, [r4, #8]
 8006492:	6963      	ldr	r3, [r4, #20]
 8006494:	425b      	negs	r3, r3
 8006496:	61a3      	str	r3, [r4, #24]
 8006498:	6923      	ldr	r3, [r4, #16]
 800649a:	b943      	cbnz	r3, 80064ae <__swsetup_r+0xc6>
 800649c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80064a0:	d1ba      	bne.n	8006418 <__swsetup_r+0x30>
 80064a2:	bd70      	pop	{r4, r5, r6, pc}
 80064a4:	0781      	lsls	r1, r0, #30
 80064a6:	bf58      	it	pl
 80064a8:	6963      	ldrpl	r3, [r4, #20]
 80064aa:	60a3      	str	r3, [r4, #8]
 80064ac:	e7f4      	b.n	8006498 <__swsetup_r+0xb0>
 80064ae:	2000      	movs	r0, #0
 80064b0:	e7f7      	b.n	80064a2 <__swsetup_r+0xba>
 80064b2:	bf00      	nop
 80064b4:	2000009c 	.word	0x2000009c
 80064b8:	0800804c 	.word	0x0800804c
 80064bc:	0800806c 	.word	0x0800806c
 80064c0:	0800802c 	.word	0x0800802c

080064c4 <__sflush_r>:
 80064c4:	898a      	ldrh	r2, [r1, #12]
 80064c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064ca:	4605      	mov	r5, r0
 80064cc:	0710      	lsls	r0, r2, #28
 80064ce:	460c      	mov	r4, r1
 80064d0:	d458      	bmi.n	8006584 <__sflush_r+0xc0>
 80064d2:	684b      	ldr	r3, [r1, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	dc05      	bgt.n	80064e4 <__sflush_r+0x20>
 80064d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80064da:	2b00      	cmp	r3, #0
 80064dc:	dc02      	bgt.n	80064e4 <__sflush_r+0x20>
 80064de:	2000      	movs	r0, #0
 80064e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064e6:	2e00      	cmp	r6, #0
 80064e8:	d0f9      	beq.n	80064de <__sflush_r+0x1a>
 80064ea:	2300      	movs	r3, #0
 80064ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80064f0:	682f      	ldr	r7, [r5, #0]
 80064f2:	602b      	str	r3, [r5, #0]
 80064f4:	d032      	beq.n	800655c <__sflush_r+0x98>
 80064f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80064f8:	89a3      	ldrh	r3, [r4, #12]
 80064fa:	075a      	lsls	r2, r3, #29
 80064fc:	d505      	bpl.n	800650a <__sflush_r+0x46>
 80064fe:	6863      	ldr	r3, [r4, #4]
 8006500:	1ac0      	subs	r0, r0, r3
 8006502:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006504:	b10b      	cbz	r3, 800650a <__sflush_r+0x46>
 8006506:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006508:	1ac0      	subs	r0, r0, r3
 800650a:	2300      	movs	r3, #0
 800650c:	4602      	mov	r2, r0
 800650e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006510:	6a21      	ldr	r1, [r4, #32]
 8006512:	4628      	mov	r0, r5
 8006514:	47b0      	blx	r6
 8006516:	1c43      	adds	r3, r0, #1
 8006518:	89a3      	ldrh	r3, [r4, #12]
 800651a:	d106      	bne.n	800652a <__sflush_r+0x66>
 800651c:	6829      	ldr	r1, [r5, #0]
 800651e:	291d      	cmp	r1, #29
 8006520:	d82c      	bhi.n	800657c <__sflush_r+0xb8>
 8006522:	4a2a      	ldr	r2, [pc, #168]	; (80065cc <__sflush_r+0x108>)
 8006524:	40ca      	lsrs	r2, r1
 8006526:	07d6      	lsls	r6, r2, #31
 8006528:	d528      	bpl.n	800657c <__sflush_r+0xb8>
 800652a:	2200      	movs	r2, #0
 800652c:	6062      	str	r2, [r4, #4]
 800652e:	04d9      	lsls	r1, r3, #19
 8006530:	6922      	ldr	r2, [r4, #16]
 8006532:	6022      	str	r2, [r4, #0]
 8006534:	d504      	bpl.n	8006540 <__sflush_r+0x7c>
 8006536:	1c42      	adds	r2, r0, #1
 8006538:	d101      	bne.n	800653e <__sflush_r+0x7a>
 800653a:	682b      	ldr	r3, [r5, #0]
 800653c:	b903      	cbnz	r3, 8006540 <__sflush_r+0x7c>
 800653e:	6560      	str	r0, [r4, #84]	; 0x54
 8006540:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006542:	602f      	str	r7, [r5, #0]
 8006544:	2900      	cmp	r1, #0
 8006546:	d0ca      	beq.n	80064de <__sflush_r+0x1a>
 8006548:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800654c:	4299      	cmp	r1, r3
 800654e:	d002      	beq.n	8006556 <__sflush_r+0x92>
 8006550:	4628      	mov	r0, r5
 8006552:	f7ff fd7f 	bl	8006054 <_free_r>
 8006556:	2000      	movs	r0, #0
 8006558:	6360      	str	r0, [r4, #52]	; 0x34
 800655a:	e7c1      	b.n	80064e0 <__sflush_r+0x1c>
 800655c:	6a21      	ldr	r1, [r4, #32]
 800655e:	2301      	movs	r3, #1
 8006560:	4628      	mov	r0, r5
 8006562:	47b0      	blx	r6
 8006564:	1c41      	adds	r1, r0, #1
 8006566:	d1c7      	bne.n	80064f8 <__sflush_r+0x34>
 8006568:	682b      	ldr	r3, [r5, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d0c4      	beq.n	80064f8 <__sflush_r+0x34>
 800656e:	2b1d      	cmp	r3, #29
 8006570:	d001      	beq.n	8006576 <__sflush_r+0xb2>
 8006572:	2b16      	cmp	r3, #22
 8006574:	d101      	bne.n	800657a <__sflush_r+0xb6>
 8006576:	602f      	str	r7, [r5, #0]
 8006578:	e7b1      	b.n	80064de <__sflush_r+0x1a>
 800657a:	89a3      	ldrh	r3, [r4, #12]
 800657c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006580:	81a3      	strh	r3, [r4, #12]
 8006582:	e7ad      	b.n	80064e0 <__sflush_r+0x1c>
 8006584:	690f      	ldr	r7, [r1, #16]
 8006586:	2f00      	cmp	r7, #0
 8006588:	d0a9      	beq.n	80064de <__sflush_r+0x1a>
 800658a:	0793      	lsls	r3, r2, #30
 800658c:	680e      	ldr	r6, [r1, #0]
 800658e:	bf08      	it	eq
 8006590:	694b      	ldreq	r3, [r1, #20]
 8006592:	600f      	str	r7, [r1, #0]
 8006594:	bf18      	it	ne
 8006596:	2300      	movne	r3, #0
 8006598:	eba6 0807 	sub.w	r8, r6, r7
 800659c:	608b      	str	r3, [r1, #8]
 800659e:	f1b8 0f00 	cmp.w	r8, #0
 80065a2:	dd9c      	ble.n	80064de <__sflush_r+0x1a>
 80065a4:	6a21      	ldr	r1, [r4, #32]
 80065a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80065a8:	4643      	mov	r3, r8
 80065aa:	463a      	mov	r2, r7
 80065ac:	4628      	mov	r0, r5
 80065ae:	47b0      	blx	r6
 80065b0:	2800      	cmp	r0, #0
 80065b2:	dc06      	bgt.n	80065c2 <__sflush_r+0xfe>
 80065b4:	89a3      	ldrh	r3, [r4, #12]
 80065b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065ba:	81a3      	strh	r3, [r4, #12]
 80065bc:	f04f 30ff 	mov.w	r0, #4294967295
 80065c0:	e78e      	b.n	80064e0 <__sflush_r+0x1c>
 80065c2:	4407      	add	r7, r0
 80065c4:	eba8 0800 	sub.w	r8, r8, r0
 80065c8:	e7e9      	b.n	800659e <__sflush_r+0xda>
 80065ca:	bf00      	nop
 80065cc:	20400001 	.word	0x20400001

080065d0 <_fflush_r>:
 80065d0:	b538      	push	{r3, r4, r5, lr}
 80065d2:	690b      	ldr	r3, [r1, #16]
 80065d4:	4605      	mov	r5, r0
 80065d6:	460c      	mov	r4, r1
 80065d8:	b913      	cbnz	r3, 80065e0 <_fflush_r+0x10>
 80065da:	2500      	movs	r5, #0
 80065dc:	4628      	mov	r0, r5
 80065de:	bd38      	pop	{r3, r4, r5, pc}
 80065e0:	b118      	cbz	r0, 80065ea <_fflush_r+0x1a>
 80065e2:	6983      	ldr	r3, [r0, #24]
 80065e4:	b90b      	cbnz	r3, 80065ea <_fflush_r+0x1a>
 80065e6:	f000 f887 	bl	80066f8 <__sinit>
 80065ea:	4b14      	ldr	r3, [pc, #80]	; (800663c <_fflush_r+0x6c>)
 80065ec:	429c      	cmp	r4, r3
 80065ee:	d11b      	bne.n	8006628 <_fflush_r+0x58>
 80065f0:	686c      	ldr	r4, [r5, #4]
 80065f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d0ef      	beq.n	80065da <_fflush_r+0xa>
 80065fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80065fc:	07d0      	lsls	r0, r2, #31
 80065fe:	d404      	bmi.n	800660a <_fflush_r+0x3a>
 8006600:	0599      	lsls	r1, r3, #22
 8006602:	d402      	bmi.n	800660a <_fflush_r+0x3a>
 8006604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006606:	f000 f915 	bl	8006834 <__retarget_lock_acquire_recursive>
 800660a:	4628      	mov	r0, r5
 800660c:	4621      	mov	r1, r4
 800660e:	f7ff ff59 	bl	80064c4 <__sflush_r>
 8006612:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006614:	07da      	lsls	r2, r3, #31
 8006616:	4605      	mov	r5, r0
 8006618:	d4e0      	bmi.n	80065dc <_fflush_r+0xc>
 800661a:	89a3      	ldrh	r3, [r4, #12]
 800661c:	059b      	lsls	r3, r3, #22
 800661e:	d4dd      	bmi.n	80065dc <_fflush_r+0xc>
 8006620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006622:	f000 f908 	bl	8006836 <__retarget_lock_release_recursive>
 8006626:	e7d9      	b.n	80065dc <_fflush_r+0xc>
 8006628:	4b05      	ldr	r3, [pc, #20]	; (8006640 <_fflush_r+0x70>)
 800662a:	429c      	cmp	r4, r3
 800662c:	d101      	bne.n	8006632 <_fflush_r+0x62>
 800662e:	68ac      	ldr	r4, [r5, #8]
 8006630:	e7df      	b.n	80065f2 <_fflush_r+0x22>
 8006632:	4b04      	ldr	r3, [pc, #16]	; (8006644 <_fflush_r+0x74>)
 8006634:	429c      	cmp	r4, r3
 8006636:	bf08      	it	eq
 8006638:	68ec      	ldreq	r4, [r5, #12]
 800663a:	e7da      	b.n	80065f2 <_fflush_r+0x22>
 800663c:	0800804c 	.word	0x0800804c
 8006640:	0800806c 	.word	0x0800806c
 8006644:	0800802c 	.word	0x0800802c

08006648 <std>:
 8006648:	2300      	movs	r3, #0
 800664a:	b510      	push	{r4, lr}
 800664c:	4604      	mov	r4, r0
 800664e:	e9c0 3300 	strd	r3, r3, [r0]
 8006652:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006656:	6083      	str	r3, [r0, #8]
 8006658:	8181      	strh	r1, [r0, #12]
 800665a:	6643      	str	r3, [r0, #100]	; 0x64
 800665c:	81c2      	strh	r2, [r0, #14]
 800665e:	6183      	str	r3, [r0, #24]
 8006660:	4619      	mov	r1, r3
 8006662:	2208      	movs	r2, #8
 8006664:	305c      	adds	r0, #92	; 0x5c
 8006666:	f7ff fced 	bl	8006044 <memset>
 800666a:	4b05      	ldr	r3, [pc, #20]	; (8006680 <std+0x38>)
 800666c:	6263      	str	r3, [r4, #36]	; 0x24
 800666e:	4b05      	ldr	r3, [pc, #20]	; (8006684 <std+0x3c>)
 8006670:	62a3      	str	r3, [r4, #40]	; 0x28
 8006672:	4b05      	ldr	r3, [pc, #20]	; (8006688 <std+0x40>)
 8006674:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006676:	4b05      	ldr	r3, [pc, #20]	; (800668c <std+0x44>)
 8006678:	6224      	str	r4, [r4, #32]
 800667a:	6323      	str	r3, [r4, #48]	; 0x30
 800667c:	bd10      	pop	{r4, pc}
 800667e:	bf00      	nop
 8006680:	080071ad 	.word	0x080071ad
 8006684:	080071cf 	.word	0x080071cf
 8006688:	08007207 	.word	0x08007207
 800668c:	0800722b 	.word	0x0800722b

08006690 <_cleanup_r>:
 8006690:	4901      	ldr	r1, [pc, #4]	; (8006698 <_cleanup_r+0x8>)
 8006692:	f000 b8af 	b.w	80067f4 <_fwalk_reent>
 8006696:	bf00      	nop
 8006698:	080065d1 	.word	0x080065d1

0800669c <__sfmoreglue>:
 800669c:	b570      	push	{r4, r5, r6, lr}
 800669e:	1e4a      	subs	r2, r1, #1
 80066a0:	2568      	movs	r5, #104	; 0x68
 80066a2:	4355      	muls	r5, r2
 80066a4:	460e      	mov	r6, r1
 80066a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80066aa:	f7ff fd23 	bl	80060f4 <_malloc_r>
 80066ae:	4604      	mov	r4, r0
 80066b0:	b140      	cbz	r0, 80066c4 <__sfmoreglue+0x28>
 80066b2:	2100      	movs	r1, #0
 80066b4:	e9c0 1600 	strd	r1, r6, [r0]
 80066b8:	300c      	adds	r0, #12
 80066ba:	60a0      	str	r0, [r4, #8]
 80066bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80066c0:	f7ff fcc0 	bl	8006044 <memset>
 80066c4:	4620      	mov	r0, r4
 80066c6:	bd70      	pop	{r4, r5, r6, pc}

080066c8 <__sfp_lock_acquire>:
 80066c8:	4801      	ldr	r0, [pc, #4]	; (80066d0 <__sfp_lock_acquire+0x8>)
 80066ca:	f000 b8b3 	b.w	8006834 <__retarget_lock_acquire_recursive>
 80066ce:	bf00      	nop
 80066d0:	20000258 	.word	0x20000258

080066d4 <__sfp_lock_release>:
 80066d4:	4801      	ldr	r0, [pc, #4]	; (80066dc <__sfp_lock_release+0x8>)
 80066d6:	f000 b8ae 	b.w	8006836 <__retarget_lock_release_recursive>
 80066da:	bf00      	nop
 80066dc:	20000258 	.word	0x20000258

080066e0 <__sinit_lock_acquire>:
 80066e0:	4801      	ldr	r0, [pc, #4]	; (80066e8 <__sinit_lock_acquire+0x8>)
 80066e2:	f000 b8a7 	b.w	8006834 <__retarget_lock_acquire_recursive>
 80066e6:	bf00      	nop
 80066e8:	20000253 	.word	0x20000253

080066ec <__sinit_lock_release>:
 80066ec:	4801      	ldr	r0, [pc, #4]	; (80066f4 <__sinit_lock_release+0x8>)
 80066ee:	f000 b8a2 	b.w	8006836 <__retarget_lock_release_recursive>
 80066f2:	bf00      	nop
 80066f4:	20000253 	.word	0x20000253

080066f8 <__sinit>:
 80066f8:	b510      	push	{r4, lr}
 80066fa:	4604      	mov	r4, r0
 80066fc:	f7ff fff0 	bl	80066e0 <__sinit_lock_acquire>
 8006700:	69a3      	ldr	r3, [r4, #24]
 8006702:	b11b      	cbz	r3, 800670c <__sinit+0x14>
 8006704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006708:	f7ff bff0 	b.w	80066ec <__sinit_lock_release>
 800670c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006710:	6523      	str	r3, [r4, #80]	; 0x50
 8006712:	4b13      	ldr	r3, [pc, #76]	; (8006760 <__sinit+0x68>)
 8006714:	4a13      	ldr	r2, [pc, #76]	; (8006764 <__sinit+0x6c>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	62a2      	str	r2, [r4, #40]	; 0x28
 800671a:	42a3      	cmp	r3, r4
 800671c:	bf04      	itt	eq
 800671e:	2301      	moveq	r3, #1
 8006720:	61a3      	streq	r3, [r4, #24]
 8006722:	4620      	mov	r0, r4
 8006724:	f000 f820 	bl	8006768 <__sfp>
 8006728:	6060      	str	r0, [r4, #4]
 800672a:	4620      	mov	r0, r4
 800672c:	f000 f81c 	bl	8006768 <__sfp>
 8006730:	60a0      	str	r0, [r4, #8]
 8006732:	4620      	mov	r0, r4
 8006734:	f000 f818 	bl	8006768 <__sfp>
 8006738:	2200      	movs	r2, #0
 800673a:	60e0      	str	r0, [r4, #12]
 800673c:	2104      	movs	r1, #4
 800673e:	6860      	ldr	r0, [r4, #4]
 8006740:	f7ff ff82 	bl	8006648 <std>
 8006744:	68a0      	ldr	r0, [r4, #8]
 8006746:	2201      	movs	r2, #1
 8006748:	2109      	movs	r1, #9
 800674a:	f7ff ff7d 	bl	8006648 <std>
 800674e:	68e0      	ldr	r0, [r4, #12]
 8006750:	2202      	movs	r2, #2
 8006752:	2112      	movs	r1, #18
 8006754:	f7ff ff78 	bl	8006648 <std>
 8006758:	2301      	movs	r3, #1
 800675a:	61a3      	str	r3, [r4, #24]
 800675c:	e7d2      	b.n	8006704 <__sinit+0xc>
 800675e:	bf00      	nop
 8006760:	08008028 	.word	0x08008028
 8006764:	08006691 	.word	0x08006691

08006768 <__sfp>:
 8006768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676a:	4607      	mov	r7, r0
 800676c:	f7ff ffac 	bl	80066c8 <__sfp_lock_acquire>
 8006770:	4b1e      	ldr	r3, [pc, #120]	; (80067ec <__sfp+0x84>)
 8006772:	681e      	ldr	r6, [r3, #0]
 8006774:	69b3      	ldr	r3, [r6, #24]
 8006776:	b913      	cbnz	r3, 800677e <__sfp+0x16>
 8006778:	4630      	mov	r0, r6
 800677a:	f7ff ffbd 	bl	80066f8 <__sinit>
 800677e:	3648      	adds	r6, #72	; 0x48
 8006780:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006784:	3b01      	subs	r3, #1
 8006786:	d503      	bpl.n	8006790 <__sfp+0x28>
 8006788:	6833      	ldr	r3, [r6, #0]
 800678a:	b30b      	cbz	r3, 80067d0 <__sfp+0x68>
 800678c:	6836      	ldr	r6, [r6, #0]
 800678e:	e7f7      	b.n	8006780 <__sfp+0x18>
 8006790:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006794:	b9d5      	cbnz	r5, 80067cc <__sfp+0x64>
 8006796:	4b16      	ldr	r3, [pc, #88]	; (80067f0 <__sfp+0x88>)
 8006798:	60e3      	str	r3, [r4, #12]
 800679a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800679e:	6665      	str	r5, [r4, #100]	; 0x64
 80067a0:	f000 f847 	bl	8006832 <__retarget_lock_init_recursive>
 80067a4:	f7ff ff96 	bl	80066d4 <__sfp_lock_release>
 80067a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80067ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80067b0:	6025      	str	r5, [r4, #0]
 80067b2:	61a5      	str	r5, [r4, #24]
 80067b4:	2208      	movs	r2, #8
 80067b6:	4629      	mov	r1, r5
 80067b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80067bc:	f7ff fc42 	bl	8006044 <memset>
 80067c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80067c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80067c8:	4620      	mov	r0, r4
 80067ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067cc:	3468      	adds	r4, #104	; 0x68
 80067ce:	e7d9      	b.n	8006784 <__sfp+0x1c>
 80067d0:	2104      	movs	r1, #4
 80067d2:	4638      	mov	r0, r7
 80067d4:	f7ff ff62 	bl	800669c <__sfmoreglue>
 80067d8:	4604      	mov	r4, r0
 80067da:	6030      	str	r0, [r6, #0]
 80067dc:	2800      	cmp	r0, #0
 80067de:	d1d5      	bne.n	800678c <__sfp+0x24>
 80067e0:	f7ff ff78 	bl	80066d4 <__sfp_lock_release>
 80067e4:	230c      	movs	r3, #12
 80067e6:	603b      	str	r3, [r7, #0]
 80067e8:	e7ee      	b.n	80067c8 <__sfp+0x60>
 80067ea:	bf00      	nop
 80067ec:	08008028 	.word	0x08008028
 80067f0:	ffff0001 	.word	0xffff0001

080067f4 <_fwalk_reent>:
 80067f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067f8:	4606      	mov	r6, r0
 80067fa:	4688      	mov	r8, r1
 80067fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006800:	2700      	movs	r7, #0
 8006802:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006806:	f1b9 0901 	subs.w	r9, r9, #1
 800680a:	d505      	bpl.n	8006818 <_fwalk_reent+0x24>
 800680c:	6824      	ldr	r4, [r4, #0]
 800680e:	2c00      	cmp	r4, #0
 8006810:	d1f7      	bne.n	8006802 <_fwalk_reent+0xe>
 8006812:	4638      	mov	r0, r7
 8006814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006818:	89ab      	ldrh	r3, [r5, #12]
 800681a:	2b01      	cmp	r3, #1
 800681c:	d907      	bls.n	800682e <_fwalk_reent+0x3a>
 800681e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006822:	3301      	adds	r3, #1
 8006824:	d003      	beq.n	800682e <_fwalk_reent+0x3a>
 8006826:	4629      	mov	r1, r5
 8006828:	4630      	mov	r0, r6
 800682a:	47c0      	blx	r8
 800682c:	4307      	orrs	r7, r0
 800682e:	3568      	adds	r5, #104	; 0x68
 8006830:	e7e9      	b.n	8006806 <_fwalk_reent+0x12>

08006832 <__retarget_lock_init_recursive>:
 8006832:	4770      	bx	lr

08006834 <__retarget_lock_acquire_recursive>:
 8006834:	4770      	bx	lr

08006836 <__retarget_lock_release_recursive>:
 8006836:	4770      	bx	lr

08006838 <__swhatbuf_r>:
 8006838:	b570      	push	{r4, r5, r6, lr}
 800683a:	460e      	mov	r6, r1
 800683c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006840:	2900      	cmp	r1, #0
 8006842:	b096      	sub	sp, #88	; 0x58
 8006844:	4614      	mov	r4, r2
 8006846:	461d      	mov	r5, r3
 8006848:	da07      	bge.n	800685a <__swhatbuf_r+0x22>
 800684a:	2300      	movs	r3, #0
 800684c:	602b      	str	r3, [r5, #0]
 800684e:	89b3      	ldrh	r3, [r6, #12]
 8006850:	061a      	lsls	r2, r3, #24
 8006852:	d410      	bmi.n	8006876 <__swhatbuf_r+0x3e>
 8006854:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006858:	e00e      	b.n	8006878 <__swhatbuf_r+0x40>
 800685a:	466a      	mov	r2, sp
 800685c:	f000 fd0c 	bl	8007278 <_fstat_r>
 8006860:	2800      	cmp	r0, #0
 8006862:	dbf2      	blt.n	800684a <__swhatbuf_r+0x12>
 8006864:	9a01      	ldr	r2, [sp, #4]
 8006866:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800686a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800686e:	425a      	negs	r2, r3
 8006870:	415a      	adcs	r2, r3
 8006872:	602a      	str	r2, [r5, #0]
 8006874:	e7ee      	b.n	8006854 <__swhatbuf_r+0x1c>
 8006876:	2340      	movs	r3, #64	; 0x40
 8006878:	2000      	movs	r0, #0
 800687a:	6023      	str	r3, [r4, #0]
 800687c:	b016      	add	sp, #88	; 0x58
 800687e:	bd70      	pop	{r4, r5, r6, pc}

08006880 <__smakebuf_r>:
 8006880:	898b      	ldrh	r3, [r1, #12]
 8006882:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006884:	079d      	lsls	r5, r3, #30
 8006886:	4606      	mov	r6, r0
 8006888:	460c      	mov	r4, r1
 800688a:	d507      	bpl.n	800689c <__smakebuf_r+0x1c>
 800688c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006890:	6023      	str	r3, [r4, #0]
 8006892:	6123      	str	r3, [r4, #16]
 8006894:	2301      	movs	r3, #1
 8006896:	6163      	str	r3, [r4, #20]
 8006898:	b002      	add	sp, #8
 800689a:	bd70      	pop	{r4, r5, r6, pc}
 800689c:	ab01      	add	r3, sp, #4
 800689e:	466a      	mov	r2, sp
 80068a0:	f7ff ffca 	bl	8006838 <__swhatbuf_r>
 80068a4:	9900      	ldr	r1, [sp, #0]
 80068a6:	4605      	mov	r5, r0
 80068a8:	4630      	mov	r0, r6
 80068aa:	f7ff fc23 	bl	80060f4 <_malloc_r>
 80068ae:	b948      	cbnz	r0, 80068c4 <__smakebuf_r+0x44>
 80068b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068b4:	059a      	lsls	r2, r3, #22
 80068b6:	d4ef      	bmi.n	8006898 <__smakebuf_r+0x18>
 80068b8:	f023 0303 	bic.w	r3, r3, #3
 80068bc:	f043 0302 	orr.w	r3, r3, #2
 80068c0:	81a3      	strh	r3, [r4, #12]
 80068c2:	e7e3      	b.n	800688c <__smakebuf_r+0xc>
 80068c4:	4b0d      	ldr	r3, [pc, #52]	; (80068fc <__smakebuf_r+0x7c>)
 80068c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80068c8:	89a3      	ldrh	r3, [r4, #12]
 80068ca:	6020      	str	r0, [r4, #0]
 80068cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068d0:	81a3      	strh	r3, [r4, #12]
 80068d2:	9b00      	ldr	r3, [sp, #0]
 80068d4:	6163      	str	r3, [r4, #20]
 80068d6:	9b01      	ldr	r3, [sp, #4]
 80068d8:	6120      	str	r0, [r4, #16]
 80068da:	b15b      	cbz	r3, 80068f4 <__smakebuf_r+0x74>
 80068dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068e0:	4630      	mov	r0, r6
 80068e2:	f000 fcdb 	bl	800729c <_isatty_r>
 80068e6:	b128      	cbz	r0, 80068f4 <__smakebuf_r+0x74>
 80068e8:	89a3      	ldrh	r3, [r4, #12]
 80068ea:	f023 0303 	bic.w	r3, r3, #3
 80068ee:	f043 0301 	orr.w	r3, r3, #1
 80068f2:	81a3      	strh	r3, [r4, #12]
 80068f4:	89a0      	ldrh	r0, [r4, #12]
 80068f6:	4305      	orrs	r5, r0
 80068f8:	81a5      	strh	r5, [r4, #12]
 80068fa:	e7cd      	b.n	8006898 <__smakebuf_r+0x18>
 80068fc:	08006691 	.word	0x08006691

08006900 <__malloc_lock>:
 8006900:	4801      	ldr	r0, [pc, #4]	; (8006908 <__malloc_lock+0x8>)
 8006902:	f7ff bf97 	b.w	8006834 <__retarget_lock_acquire_recursive>
 8006906:	bf00      	nop
 8006908:	20000254 	.word	0x20000254

0800690c <__malloc_unlock>:
 800690c:	4801      	ldr	r0, [pc, #4]	; (8006914 <__malloc_unlock+0x8>)
 800690e:	f7ff bf92 	b.w	8006836 <__retarget_lock_release_recursive>
 8006912:	bf00      	nop
 8006914:	20000254 	.word	0x20000254

08006918 <__ssputs_r>:
 8006918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800691c:	688e      	ldr	r6, [r1, #8]
 800691e:	429e      	cmp	r6, r3
 8006920:	4682      	mov	sl, r0
 8006922:	460c      	mov	r4, r1
 8006924:	4690      	mov	r8, r2
 8006926:	461f      	mov	r7, r3
 8006928:	d838      	bhi.n	800699c <__ssputs_r+0x84>
 800692a:	898a      	ldrh	r2, [r1, #12]
 800692c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006930:	d032      	beq.n	8006998 <__ssputs_r+0x80>
 8006932:	6825      	ldr	r5, [r4, #0]
 8006934:	6909      	ldr	r1, [r1, #16]
 8006936:	eba5 0901 	sub.w	r9, r5, r1
 800693a:	6965      	ldr	r5, [r4, #20]
 800693c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006940:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006944:	3301      	adds	r3, #1
 8006946:	444b      	add	r3, r9
 8006948:	106d      	asrs	r5, r5, #1
 800694a:	429d      	cmp	r5, r3
 800694c:	bf38      	it	cc
 800694e:	461d      	movcc	r5, r3
 8006950:	0553      	lsls	r3, r2, #21
 8006952:	d531      	bpl.n	80069b8 <__ssputs_r+0xa0>
 8006954:	4629      	mov	r1, r5
 8006956:	f7ff fbcd 	bl	80060f4 <_malloc_r>
 800695a:	4606      	mov	r6, r0
 800695c:	b950      	cbnz	r0, 8006974 <__ssputs_r+0x5c>
 800695e:	230c      	movs	r3, #12
 8006960:	f8ca 3000 	str.w	r3, [sl]
 8006964:	89a3      	ldrh	r3, [r4, #12]
 8006966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800696a:	81a3      	strh	r3, [r4, #12]
 800696c:	f04f 30ff 	mov.w	r0, #4294967295
 8006970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006974:	6921      	ldr	r1, [r4, #16]
 8006976:	464a      	mov	r2, r9
 8006978:	f000 fcb2 	bl	80072e0 <memcpy>
 800697c:	89a3      	ldrh	r3, [r4, #12]
 800697e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006986:	81a3      	strh	r3, [r4, #12]
 8006988:	6126      	str	r6, [r4, #16]
 800698a:	6165      	str	r5, [r4, #20]
 800698c:	444e      	add	r6, r9
 800698e:	eba5 0509 	sub.w	r5, r5, r9
 8006992:	6026      	str	r6, [r4, #0]
 8006994:	60a5      	str	r5, [r4, #8]
 8006996:	463e      	mov	r6, r7
 8006998:	42be      	cmp	r6, r7
 800699a:	d900      	bls.n	800699e <__ssputs_r+0x86>
 800699c:	463e      	mov	r6, r7
 800699e:	4632      	mov	r2, r6
 80069a0:	6820      	ldr	r0, [r4, #0]
 80069a2:	4641      	mov	r1, r8
 80069a4:	f000 fcaa 	bl	80072fc <memmove>
 80069a8:	68a3      	ldr	r3, [r4, #8]
 80069aa:	6822      	ldr	r2, [r4, #0]
 80069ac:	1b9b      	subs	r3, r3, r6
 80069ae:	4432      	add	r2, r6
 80069b0:	60a3      	str	r3, [r4, #8]
 80069b2:	6022      	str	r2, [r4, #0]
 80069b4:	2000      	movs	r0, #0
 80069b6:	e7db      	b.n	8006970 <__ssputs_r+0x58>
 80069b8:	462a      	mov	r2, r5
 80069ba:	f000 fcb9 	bl	8007330 <_realloc_r>
 80069be:	4606      	mov	r6, r0
 80069c0:	2800      	cmp	r0, #0
 80069c2:	d1e1      	bne.n	8006988 <__ssputs_r+0x70>
 80069c4:	6921      	ldr	r1, [r4, #16]
 80069c6:	4650      	mov	r0, sl
 80069c8:	f7ff fb44 	bl	8006054 <_free_r>
 80069cc:	e7c7      	b.n	800695e <__ssputs_r+0x46>
	...

080069d0 <_svfiprintf_r>:
 80069d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d4:	4698      	mov	r8, r3
 80069d6:	898b      	ldrh	r3, [r1, #12]
 80069d8:	061b      	lsls	r3, r3, #24
 80069da:	b09d      	sub	sp, #116	; 0x74
 80069dc:	4607      	mov	r7, r0
 80069de:	460d      	mov	r5, r1
 80069e0:	4614      	mov	r4, r2
 80069e2:	d50e      	bpl.n	8006a02 <_svfiprintf_r+0x32>
 80069e4:	690b      	ldr	r3, [r1, #16]
 80069e6:	b963      	cbnz	r3, 8006a02 <_svfiprintf_r+0x32>
 80069e8:	2140      	movs	r1, #64	; 0x40
 80069ea:	f7ff fb83 	bl	80060f4 <_malloc_r>
 80069ee:	6028      	str	r0, [r5, #0]
 80069f0:	6128      	str	r0, [r5, #16]
 80069f2:	b920      	cbnz	r0, 80069fe <_svfiprintf_r+0x2e>
 80069f4:	230c      	movs	r3, #12
 80069f6:	603b      	str	r3, [r7, #0]
 80069f8:	f04f 30ff 	mov.w	r0, #4294967295
 80069fc:	e0d1      	b.n	8006ba2 <_svfiprintf_r+0x1d2>
 80069fe:	2340      	movs	r3, #64	; 0x40
 8006a00:	616b      	str	r3, [r5, #20]
 8006a02:	2300      	movs	r3, #0
 8006a04:	9309      	str	r3, [sp, #36]	; 0x24
 8006a06:	2320      	movs	r3, #32
 8006a08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a10:	2330      	movs	r3, #48	; 0x30
 8006a12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006bbc <_svfiprintf_r+0x1ec>
 8006a16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a1a:	f04f 0901 	mov.w	r9, #1
 8006a1e:	4623      	mov	r3, r4
 8006a20:	469a      	mov	sl, r3
 8006a22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a26:	b10a      	cbz	r2, 8006a2c <_svfiprintf_r+0x5c>
 8006a28:	2a25      	cmp	r2, #37	; 0x25
 8006a2a:	d1f9      	bne.n	8006a20 <_svfiprintf_r+0x50>
 8006a2c:	ebba 0b04 	subs.w	fp, sl, r4
 8006a30:	d00b      	beq.n	8006a4a <_svfiprintf_r+0x7a>
 8006a32:	465b      	mov	r3, fp
 8006a34:	4622      	mov	r2, r4
 8006a36:	4629      	mov	r1, r5
 8006a38:	4638      	mov	r0, r7
 8006a3a:	f7ff ff6d 	bl	8006918 <__ssputs_r>
 8006a3e:	3001      	adds	r0, #1
 8006a40:	f000 80aa 	beq.w	8006b98 <_svfiprintf_r+0x1c8>
 8006a44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a46:	445a      	add	r2, fp
 8006a48:	9209      	str	r2, [sp, #36]	; 0x24
 8006a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	f000 80a2 	beq.w	8006b98 <_svfiprintf_r+0x1c8>
 8006a54:	2300      	movs	r3, #0
 8006a56:	f04f 32ff 	mov.w	r2, #4294967295
 8006a5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a5e:	f10a 0a01 	add.w	sl, sl, #1
 8006a62:	9304      	str	r3, [sp, #16]
 8006a64:	9307      	str	r3, [sp, #28]
 8006a66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a6a:	931a      	str	r3, [sp, #104]	; 0x68
 8006a6c:	4654      	mov	r4, sl
 8006a6e:	2205      	movs	r2, #5
 8006a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a74:	4851      	ldr	r0, [pc, #324]	; (8006bbc <_svfiprintf_r+0x1ec>)
 8006a76:	f7f9 fbeb 	bl	8000250 <memchr>
 8006a7a:	9a04      	ldr	r2, [sp, #16]
 8006a7c:	b9d8      	cbnz	r0, 8006ab6 <_svfiprintf_r+0xe6>
 8006a7e:	06d0      	lsls	r0, r2, #27
 8006a80:	bf44      	itt	mi
 8006a82:	2320      	movmi	r3, #32
 8006a84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a88:	0711      	lsls	r1, r2, #28
 8006a8a:	bf44      	itt	mi
 8006a8c:	232b      	movmi	r3, #43	; 0x2b
 8006a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a92:	f89a 3000 	ldrb.w	r3, [sl]
 8006a96:	2b2a      	cmp	r3, #42	; 0x2a
 8006a98:	d015      	beq.n	8006ac6 <_svfiprintf_r+0xf6>
 8006a9a:	9a07      	ldr	r2, [sp, #28]
 8006a9c:	4654      	mov	r4, sl
 8006a9e:	2000      	movs	r0, #0
 8006aa0:	f04f 0c0a 	mov.w	ip, #10
 8006aa4:	4621      	mov	r1, r4
 8006aa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006aaa:	3b30      	subs	r3, #48	; 0x30
 8006aac:	2b09      	cmp	r3, #9
 8006aae:	d94e      	bls.n	8006b4e <_svfiprintf_r+0x17e>
 8006ab0:	b1b0      	cbz	r0, 8006ae0 <_svfiprintf_r+0x110>
 8006ab2:	9207      	str	r2, [sp, #28]
 8006ab4:	e014      	b.n	8006ae0 <_svfiprintf_r+0x110>
 8006ab6:	eba0 0308 	sub.w	r3, r0, r8
 8006aba:	fa09 f303 	lsl.w	r3, r9, r3
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	9304      	str	r3, [sp, #16]
 8006ac2:	46a2      	mov	sl, r4
 8006ac4:	e7d2      	b.n	8006a6c <_svfiprintf_r+0x9c>
 8006ac6:	9b03      	ldr	r3, [sp, #12]
 8006ac8:	1d19      	adds	r1, r3, #4
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	9103      	str	r1, [sp, #12]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	bfbb      	ittet	lt
 8006ad2:	425b      	neglt	r3, r3
 8006ad4:	f042 0202 	orrlt.w	r2, r2, #2
 8006ad8:	9307      	strge	r3, [sp, #28]
 8006ada:	9307      	strlt	r3, [sp, #28]
 8006adc:	bfb8      	it	lt
 8006ade:	9204      	strlt	r2, [sp, #16]
 8006ae0:	7823      	ldrb	r3, [r4, #0]
 8006ae2:	2b2e      	cmp	r3, #46	; 0x2e
 8006ae4:	d10c      	bne.n	8006b00 <_svfiprintf_r+0x130>
 8006ae6:	7863      	ldrb	r3, [r4, #1]
 8006ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8006aea:	d135      	bne.n	8006b58 <_svfiprintf_r+0x188>
 8006aec:	9b03      	ldr	r3, [sp, #12]
 8006aee:	1d1a      	adds	r2, r3, #4
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	9203      	str	r2, [sp, #12]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	bfb8      	it	lt
 8006af8:	f04f 33ff 	movlt.w	r3, #4294967295
 8006afc:	3402      	adds	r4, #2
 8006afe:	9305      	str	r3, [sp, #20]
 8006b00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006bcc <_svfiprintf_r+0x1fc>
 8006b04:	7821      	ldrb	r1, [r4, #0]
 8006b06:	2203      	movs	r2, #3
 8006b08:	4650      	mov	r0, sl
 8006b0a:	f7f9 fba1 	bl	8000250 <memchr>
 8006b0e:	b140      	cbz	r0, 8006b22 <_svfiprintf_r+0x152>
 8006b10:	2340      	movs	r3, #64	; 0x40
 8006b12:	eba0 000a 	sub.w	r0, r0, sl
 8006b16:	fa03 f000 	lsl.w	r0, r3, r0
 8006b1a:	9b04      	ldr	r3, [sp, #16]
 8006b1c:	4303      	orrs	r3, r0
 8006b1e:	3401      	adds	r4, #1
 8006b20:	9304      	str	r3, [sp, #16]
 8006b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b26:	4826      	ldr	r0, [pc, #152]	; (8006bc0 <_svfiprintf_r+0x1f0>)
 8006b28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b2c:	2206      	movs	r2, #6
 8006b2e:	f7f9 fb8f 	bl	8000250 <memchr>
 8006b32:	2800      	cmp	r0, #0
 8006b34:	d038      	beq.n	8006ba8 <_svfiprintf_r+0x1d8>
 8006b36:	4b23      	ldr	r3, [pc, #140]	; (8006bc4 <_svfiprintf_r+0x1f4>)
 8006b38:	bb1b      	cbnz	r3, 8006b82 <_svfiprintf_r+0x1b2>
 8006b3a:	9b03      	ldr	r3, [sp, #12]
 8006b3c:	3307      	adds	r3, #7
 8006b3e:	f023 0307 	bic.w	r3, r3, #7
 8006b42:	3308      	adds	r3, #8
 8006b44:	9303      	str	r3, [sp, #12]
 8006b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b48:	4433      	add	r3, r6
 8006b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8006b4c:	e767      	b.n	8006a1e <_svfiprintf_r+0x4e>
 8006b4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b52:	460c      	mov	r4, r1
 8006b54:	2001      	movs	r0, #1
 8006b56:	e7a5      	b.n	8006aa4 <_svfiprintf_r+0xd4>
 8006b58:	2300      	movs	r3, #0
 8006b5a:	3401      	adds	r4, #1
 8006b5c:	9305      	str	r3, [sp, #20]
 8006b5e:	4619      	mov	r1, r3
 8006b60:	f04f 0c0a 	mov.w	ip, #10
 8006b64:	4620      	mov	r0, r4
 8006b66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b6a:	3a30      	subs	r2, #48	; 0x30
 8006b6c:	2a09      	cmp	r2, #9
 8006b6e:	d903      	bls.n	8006b78 <_svfiprintf_r+0x1a8>
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d0c5      	beq.n	8006b00 <_svfiprintf_r+0x130>
 8006b74:	9105      	str	r1, [sp, #20]
 8006b76:	e7c3      	b.n	8006b00 <_svfiprintf_r+0x130>
 8006b78:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b7c:	4604      	mov	r4, r0
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e7f0      	b.n	8006b64 <_svfiprintf_r+0x194>
 8006b82:	ab03      	add	r3, sp, #12
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	462a      	mov	r2, r5
 8006b88:	4b0f      	ldr	r3, [pc, #60]	; (8006bc8 <_svfiprintf_r+0x1f8>)
 8006b8a:	a904      	add	r1, sp, #16
 8006b8c:	4638      	mov	r0, r7
 8006b8e:	f3af 8000 	nop.w
 8006b92:	1c42      	adds	r2, r0, #1
 8006b94:	4606      	mov	r6, r0
 8006b96:	d1d6      	bne.n	8006b46 <_svfiprintf_r+0x176>
 8006b98:	89ab      	ldrh	r3, [r5, #12]
 8006b9a:	065b      	lsls	r3, r3, #25
 8006b9c:	f53f af2c 	bmi.w	80069f8 <_svfiprintf_r+0x28>
 8006ba0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ba2:	b01d      	add	sp, #116	; 0x74
 8006ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba8:	ab03      	add	r3, sp, #12
 8006baa:	9300      	str	r3, [sp, #0]
 8006bac:	462a      	mov	r2, r5
 8006bae:	4b06      	ldr	r3, [pc, #24]	; (8006bc8 <_svfiprintf_r+0x1f8>)
 8006bb0:	a904      	add	r1, sp, #16
 8006bb2:	4638      	mov	r0, r7
 8006bb4:	f000 f9d4 	bl	8006f60 <_printf_i>
 8006bb8:	e7eb      	b.n	8006b92 <_svfiprintf_r+0x1c2>
 8006bba:	bf00      	nop
 8006bbc:	0800808c 	.word	0x0800808c
 8006bc0:	08008096 	.word	0x08008096
 8006bc4:	00000000 	.word	0x00000000
 8006bc8:	08006919 	.word	0x08006919
 8006bcc:	08008092 	.word	0x08008092

08006bd0 <__sfputc_r>:
 8006bd0:	6893      	ldr	r3, [r2, #8]
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	b410      	push	{r4}
 8006bd8:	6093      	str	r3, [r2, #8]
 8006bda:	da08      	bge.n	8006bee <__sfputc_r+0x1e>
 8006bdc:	6994      	ldr	r4, [r2, #24]
 8006bde:	42a3      	cmp	r3, r4
 8006be0:	db01      	blt.n	8006be6 <__sfputc_r+0x16>
 8006be2:	290a      	cmp	r1, #10
 8006be4:	d103      	bne.n	8006bee <__sfputc_r+0x1e>
 8006be6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bea:	f7ff bbab 	b.w	8006344 <__swbuf_r>
 8006bee:	6813      	ldr	r3, [r2, #0]
 8006bf0:	1c58      	adds	r0, r3, #1
 8006bf2:	6010      	str	r0, [r2, #0]
 8006bf4:	7019      	strb	r1, [r3, #0]
 8006bf6:	4608      	mov	r0, r1
 8006bf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <__sfputs_r>:
 8006bfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c00:	4606      	mov	r6, r0
 8006c02:	460f      	mov	r7, r1
 8006c04:	4614      	mov	r4, r2
 8006c06:	18d5      	adds	r5, r2, r3
 8006c08:	42ac      	cmp	r4, r5
 8006c0a:	d101      	bne.n	8006c10 <__sfputs_r+0x12>
 8006c0c:	2000      	movs	r0, #0
 8006c0e:	e007      	b.n	8006c20 <__sfputs_r+0x22>
 8006c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c14:	463a      	mov	r2, r7
 8006c16:	4630      	mov	r0, r6
 8006c18:	f7ff ffda 	bl	8006bd0 <__sfputc_r>
 8006c1c:	1c43      	adds	r3, r0, #1
 8006c1e:	d1f3      	bne.n	8006c08 <__sfputs_r+0xa>
 8006c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c24 <_vfiprintf_r>:
 8006c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c28:	460d      	mov	r5, r1
 8006c2a:	b09d      	sub	sp, #116	; 0x74
 8006c2c:	4614      	mov	r4, r2
 8006c2e:	4698      	mov	r8, r3
 8006c30:	4606      	mov	r6, r0
 8006c32:	b118      	cbz	r0, 8006c3c <_vfiprintf_r+0x18>
 8006c34:	6983      	ldr	r3, [r0, #24]
 8006c36:	b90b      	cbnz	r3, 8006c3c <_vfiprintf_r+0x18>
 8006c38:	f7ff fd5e 	bl	80066f8 <__sinit>
 8006c3c:	4b89      	ldr	r3, [pc, #548]	; (8006e64 <_vfiprintf_r+0x240>)
 8006c3e:	429d      	cmp	r5, r3
 8006c40:	d11b      	bne.n	8006c7a <_vfiprintf_r+0x56>
 8006c42:	6875      	ldr	r5, [r6, #4]
 8006c44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c46:	07d9      	lsls	r1, r3, #31
 8006c48:	d405      	bmi.n	8006c56 <_vfiprintf_r+0x32>
 8006c4a:	89ab      	ldrh	r3, [r5, #12]
 8006c4c:	059a      	lsls	r2, r3, #22
 8006c4e:	d402      	bmi.n	8006c56 <_vfiprintf_r+0x32>
 8006c50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c52:	f7ff fdef 	bl	8006834 <__retarget_lock_acquire_recursive>
 8006c56:	89ab      	ldrh	r3, [r5, #12]
 8006c58:	071b      	lsls	r3, r3, #28
 8006c5a:	d501      	bpl.n	8006c60 <_vfiprintf_r+0x3c>
 8006c5c:	692b      	ldr	r3, [r5, #16]
 8006c5e:	b9eb      	cbnz	r3, 8006c9c <_vfiprintf_r+0x78>
 8006c60:	4629      	mov	r1, r5
 8006c62:	4630      	mov	r0, r6
 8006c64:	f7ff fbc0 	bl	80063e8 <__swsetup_r>
 8006c68:	b1c0      	cbz	r0, 8006c9c <_vfiprintf_r+0x78>
 8006c6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c6c:	07dc      	lsls	r4, r3, #31
 8006c6e:	d50e      	bpl.n	8006c8e <_vfiprintf_r+0x6a>
 8006c70:	f04f 30ff 	mov.w	r0, #4294967295
 8006c74:	b01d      	add	sp, #116	; 0x74
 8006c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7a:	4b7b      	ldr	r3, [pc, #492]	; (8006e68 <_vfiprintf_r+0x244>)
 8006c7c:	429d      	cmp	r5, r3
 8006c7e:	d101      	bne.n	8006c84 <_vfiprintf_r+0x60>
 8006c80:	68b5      	ldr	r5, [r6, #8]
 8006c82:	e7df      	b.n	8006c44 <_vfiprintf_r+0x20>
 8006c84:	4b79      	ldr	r3, [pc, #484]	; (8006e6c <_vfiprintf_r+0x248>)
 8006c86:	429d      	cmp	r5, r3
 8006c88:	bf08      	it	eq
 8006c8a:	68f5      	ldreq	r5, [r6, #12]
 8006c8c:	e7da      	b.n	8006c44 <_vfiprintf_r+0x20>
 8006c8e:	89ab      	ldrh	r3, [r5, #12]
 8006c90:	0598      	lsls	r0, r3, #22
 8006c92:	d4ed      	bmi.n	8006c70 <_vfiprintf_r+0x4c>
 8006c94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c96:	f7ff fdce 	bl	8006836 <__retarget_lock_release_recursive>
 8006c9a:	e7e9      	b.n	8006c70 <_vfiprintf_r+0x4c>
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8006ca0:	2320      	movs	r3, #32
 8006ca2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ca6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006caa:	2330      	movs	r3, #48	; 0x30
 8006cac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006e70 <_vfiprintf_r+0x24c>
 8006cb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006cb4:	f04f 0901 	mov.w	r9, #1
 8006cb8:	4623      	mov	r3, r4
 8006cba:	469a      	mov	sl, r3
 8006cbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cc0:	b10a      	cbz	r2, 8006cc6 <_vfiprintf_r+0xa2>
 8006cc2:	2a25      	cmp	r2, #37	; 0x25
 8006cc4:	d1f9      	bne.n	8006cba <_vfiprintf_r+0x96>
 8006cc6:	ebba 0b04 	subs.w	fp, sl, r4
 8006cca:	d00b      	beq.n	8006ce4 <_vfiprintf_r+0xc0>
 8006ccc:	465b      	mov	r3, fp
 8006cce:	4622      	mov	r2, r4
 8006cd0:	4629      	mov	r1, r5
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	f7ff ff93 	bl	8006bfe <__sfputs_r>
 8006cd8:	3001      	adds	r0, #1
 8006cda:	f000 80aa 	beq.w	8006e32 <_vfiprintf_r+0x20e>
 8006cde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ce0:	445a      	add	r2, fp
 8006ce2:	9209      	str	r2, [sp, #36]	; 0x24
 8006ce4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f000 80a2 	beq.w	8006e32 <_vfiprintf_r+0x20e>
 8006cee:	2300      	movs	r3, #0
 8006cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cf8:	f10a 0a01 	add.w	sl, sl, #1
 8006cfc:	9304      	str	r3, [sp, #16]
 8006cfe:	9307      	str	r3, [sp, #28]
 8006d00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d04:	931a      	str	r3, [sp, #104]	; 0x68
 8006d06:	4654      	mov	r4, sl
 8006d08:	2205      	movs	r2, #5
 8006d0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d0e:	4858      	ldr	r0, [pc, #352]	; (8006e70 <_vfiprintf_r+0x24c>)
 8006d10:	f7f9 fa9e 	bl	8000250 <memchr>
 8006d14:	9a04      	ldr	r2, [sp, #16]
 8006d16:	b9d8      	cbnz	r0, 8006d50 <_vfiprintf_r+0x12c>
 8006d18:	06d1      	lsls	r1, r2, #27
 8006d1a:	bf44      	itt	mi
 8006d1c:	2320      	movmi	r3, #32
 8006d1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d22:	0713      	lsls	r3, r2, #28
 8006d24:	bf44      	itt	mi
 8006d26:	232b      	movmi	r3, #43	; 0x2b
 8006d28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d2c:	f89a 3000 	ldrb.w	r3, [sl]
 8006d30:	2b2a      	cmp	r3, #42	; 0x2a
 8006d32:	d015      	beq.n	8006d60 <_vfiprintf_r+0x13c>
 8006d34:	9a07      	ldr	r2, [sp, #28]
 8006d36:	4654      	mov	r4, sl
 8006d38:	2000      	movs	r0, #0
 8006d3a:	f04f 0c0a 	mov.w	ip, #10
 8006d3e:	4621      	mov	r1, r4
 8006d40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d44:	3b30      	subs	r3, #48	; 0x30
 8006d46:	2b09      	cmp	r3, #9
 8006d48:	d94e      	bls.n	8006de8 <_vfiprintf_r+0x1c4>
 8006d4a:	b1b0      	cbz	r0, 8006d7a <_vfiprintf_r+0x156>
 8006d4c:	9207      	str	r2, [sp, #28]
 8006d4e:	e014      	b.n	8006d7a <_vfiprintf_r+0x156>
 8006d50:	eba0 0308 	sub.w	r3, r0, r8
 8006d54:	fa09 f303 	lsl.w	r3, r9, r3
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	9304      	str	r3, [sp, #16]
 8006d5c:	46a2      	mov	sl, r4
 8006d5e:	e7d2      	b.n	8006d06 <_vfiprintf_r+0xe2>
 8006d60:	9b03      	ldr	r3, [sp, #12]
 8006d62:	1d19      	adds	r1, r3, #4
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	9103      	str	r1, [sp, #12]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	bfbb      	ittet	lt
 8006d6c:	425b      	neglt	r3, r3
 8006d6e:	f042 0202 	orrlt.w	r2, r2, #2
 8006d72:	9307      	strge	r3, [sp, #28]
 8006d74:	9307      	strlt	r3, [sp, #28]
 8006d76:	bfb8      	it	lt
 8006d78:	9204      	strlt	r2, [sp, #16]
 8006d7a:	7823      	ldrb	r3, [r4, #0]
 8006d7c:	2b2e      	cmp	r3, #46	; 0x2e
 8006d7e:	d10c      	bne.n	8006d9a <_vfiprintf_r+0x176>
 8006d80:	7863      	ldrb	r3, [r4, #1]
 8006d82:	2b2a      	cmp	r3, #42	; 0x2a
 8006d84:	d135      	bne.n	8006df2 <_vfiprintf_r+0x1ce>
 8006d86:	9b03      	ldr	r3, [sp, #12]
 8006d88:	1d1a      	adds	r2, r3, #4
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	9203      	str	r2, [sp, #12]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	bfb8      	it	lt
 8006d92:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d96:	3402      	adds	r4, #2
 8006d98:	9305      	str	r3, [sp, #20]
 8006d9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006e80 <_vfiprintf_r+0x25c>
 8006d9e:	7821      	ldrb	r1, [r4, #0]
 8006da0:	2203      	movs	r2, #3
 8006da2:	4650      	mov	r0, sl
 8006da4:	f7f9 fa54 	bl	8000250 <memchr>
 8006da8:	b140      	cbz	r0, 8006dbc <_vfiprintf_r+0x198>
 8006daa:	2340      	movs	r3, #64	; 0x40
 8006dac:	eba0 000a 	sub.w	r0, r0, sl
 8006db0:	fa03 f000 	lsl.w	r0, r3, r0
 8006db4:	9b04      	ldr	r3, [sp, #16]
 8006db6:	4303      	orrs	r3, r0
 8006db8:	3401      	adds	r4, #1
 8006dba:	9304      	str	r3, [sp, #16]
 8006dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dc0:	482c      	ldr	r0, [pc, #176]	; (8006e74 <_vfiprintf_r+0x250>)
 8006dc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006dc6:	2206      	movs	r2, #6
 8006dc8:	f7f9 fa42 	bl	8000250 <memchr>
 8006dcc:	2800      	cmp	r0, #0
 8006dce:	d03f      	beq.n	8006e50 <_vfiprintf_r+0x22c>
 8006dd0:	4b29      	ldr	r3, [pc, #164]	; (8006e78 <_vfiprintf_r+0x254>)
 8006dd2:	bb1b      	cbnz	r3, 8006e1c <_vfiprintf_r+0x1f8>
 8006dd4:	9b03      	ldr	r3, [sp, #12]
 8006dd6:	3307      	adds	r3, #7
 8006dd8:	f023 0307 	bic.w	r3, r3, #7
 8006ddc:	3308      	adds	r3, #8
 8006dde:	9303      	str	r3, [sp, #12]
 8006de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006de2:	443b      	add	r3, r7
 8006de4:	9309      	str	r3, [sp, #36]	; 0x24
 8006de6:	e767      	b.n	8006cb8 <_vfiprintf_r+0x94>
 8006de8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dec:	460c      	mov	r4, r1
 8006dee:	2001      	movs	r0, #1
 8006df0:	e7a5      	b.n	8006d3e <_vfiprintf_r+0x11a>
 8006df2:	2300      	movs	r3, #0
 8006df4:	3401      	adds	r4, #1
 8006df6:	9305      	str	r3, [sp, #20]
 8006df8:	4619      	mov	r1, r3
 8006dfa:	f04f 0c0a 	mov.w	ip, #10
 8006dfe:	4620      	mov	r0, r4
 8006e00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e04:	3a30      	subs	r2, #48	; 0x30
 8006e06:	2a09      	cmp	r2, #9
 8006e08:	d903      	bls.n	8006e12 <_vfiprintf_r+0x1ee>
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d0c5      	beq.n	8006d9a <_vfiprintf_r+0x176>
 8006e0e:	9105      	str	r1, [sp, #20]
 8006e10:	e7c3      	b.n	8006d9a <_vfiprintf_r+0x176>
 8006e12:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e16:	4604      	mov	r4, r0
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e7f0      	b.n	8006dfe <_vfiprintf_r+0x1da>
 8006e1c:	ab03      	add	r3, sp, #12
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	462a      	mov	r2, r5
 8006e22:	4b16      	ldr	r3, [pc, #88]	; (8006e7c <_vfiprintf_r+0x258>)
 8006e24:	a904      	add	r1, sp, #16
 8006e26:	4630      	mov	r0, r6
 8006e28:	f3af 8000 	nop.w
 8006e2c:	4607      	mov	r7, r0
 8006e2e:	1c78      	adds	r0, r7, #1
 8006e30:	d1d6      	bne.n	8006de0 <_vfiprintf_r+0x1bc>
 8006e32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e34:	07d9      	lsls	r1, r3, #31
 8006e36:	d405      	bmi.n	8006e44 <_vfiprintf_r+0x220>
 8006e38:	89ab      	ldrh	r3, [r5, #12]
 8006e3a:	059a      	lsls	r2, r3, #22
 8006e3c:	d402      	bmi.n	8006e44 <_vfiprintf_r+0x220>
 8006e3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e40:	f7ff fcf9 	bl	8006836 <__retarget_lock_release_recursive>
 8006e44:	89ab      	ldrh	r3, [r5, #12]
 8006e46:	065b      	lsls	r3, r3, #25
 8006e48:	f53f af12 	bmi.w	8006c70 <_vfiprintf_r+0x4c>
 8006e4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e4e:	e711      	b.n	8006c74 <_vfiprintf_r+0x50>
 8006e50:	ab03      	add	r3, sp, #12
 8006e52:	9300      	str	r3, [sp, #0]
 8006e54:	462a      	mov	r2, r5
 8006e56:	4b09      	ldr	r3, [pc, #36]	; (8006e7c <_vfiprintf_r+0x258>)
 8006e58:	a904      	add	r1, sp, #16
 8006e5a:	4630      	mov	r0, r6
 8006e5c:	f000 f880 	bl	8006f60 <_printf_i>
 8006e60:	e7e4      	b.n	8006e2c <_vfiprintf_r+0x208>
 8006e62:	bf00      	nop
 8006e64:	0800804c 	.word	0x0800804c
 8006e68:	0800806c 	.word	0x0800806c
 8006e6c:	0800802c 	.word	0x0800802c
 8006e70:	0800808c 	.word	0x0800808c
 8006e74:	08008096 	.word	0x08008096
 8006e78:	00000000 	.word	0x00000000
 8006e7c:	08006bff 	.word	0x08006bff
 8006e80:	08008092 	.word	0x08008092

08006e84 <_printf_common>:
 8006e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e88:	4616      	mov	r6, r2
 8006e8a:	4699      	mov	r9, r3
 8006e8c:	688a      	ldr	r2, [r1, #8]
 8006e8e:	690b      	ldr	r3, [r1, #16]
 8006e90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e94:	4293      	cmp	r3, r2
 8006e96:	bfb8      	it	lt
 8006e98:	4613      	movlt	r3, r2
 8006e9a:	6033      	str	r3, [r6, #0]
 8006e9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ea0:	4607      	mov	r7, r0
 8006ea2:	460c      	mov	r4, r1
 8006ea4:	b10a      	cbz	r2, 8006eaa <_printf_common+0x26>
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	6033      	str	r3, [r6, #0]
 8006eaa:	6823      	ldr	r3, [r4, #0]
 8006eac:	0699      	lsls	r1, r3, #26
 8006eae:	bf42      	ittt	mi
 8006eb0:	6833      	ldrmi	r3, [r6, #0]
 8006eb2:	3302      	addmi	r3, #2
 8006eb4:	6033      	strmi	r3, [r6, #0]
 8006eb6:	6825      	ldr	r5, [r4, #0]
 8006eb8:	f015 0506 	ands.w	r5, r5, #6
 8006ebc:	d106      	bne.n	8006ecc <_printf_common+0x48>
 8006ebe:	f104 0a19 	add.w	sl, r4, #25
 8006ec2:	68e3      	ldr	r3, [r4, #12]
 8006ec4:	6832      	ldr	r2, [r6, #0]
 8006ec6:	1a9b      	subs	r3, r3, r2
 8006ec8:	42ab      	cmp	r3, r5
 8006eca:	dc26      	bgt.n	8006f1a <_printf_common+0x96>
 8006ecc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ed0:	1e13      	subs	r3, r2, #0
 8006ed2:	6822      	ldr	r2, [r4, #0]
 8006ed4:	bf18      	it	ne
 8006ed6:	2301      	movne	r3, #1
 8006ed8:	0692      	lsls	r2, r2, #26
 8006eda:	d42b      	bmi.n	8006f34 <_printf_common+0xb0>
 8006edc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ee0:	4649      	mov	r1, r9
 8006ee2:	4638      	mov	r0, r7
 8006ee4:	47c0      	blx	r8
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	d01e      	beq.n	8006f28 <_printf_common+0xa4>
 8006eea:	6823      	ldr	r3, [r4, #0]
 8006eec:	68e5      	ldr	r5, [r4, #12]
 8006eee:	6832      	ldr	r2, [r6, #0]
 8006ef0:	f003 0306 	and.w	r3, r3, #6
 8006ef4:	2b04      	cmp	r3, #4
 8006ef6:	bf08      	it	eq
 8006ef8:	1aad      	subeq	r5, r5, r2
 8006efa:	68a3      	ldr	r3, [r4, #8]
 8006efc:	6922      	ldr	r2, [r4, #16]
 8006efe:	bf0c      	ite	eq
 8006f00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f04:	2500      	movne	r5, #0
 8006f06:	4293      	cmp	r3, r2
 8006f08:	bfc4      	itt	gt
 8006f0a:	1a9b      	subgt	r3, r3, r2
 8006f0c:	18ed      	addgt	r5, r5, r3
 8006f0e:	2600      	movs	r6, #0
 8006f10:	341a      	adds	r4, #26
 8006f12:	42b5      	cmp	r5, r6
 8006f14:	d11a      	bne.n	8006f4c <_printf_common+0xc8>
 8006f16:	2000      	movs	r0, #0
 8006f18:	e008      	b.n	8006f2c <_printf_common+0xa8>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	4652      	mov	r2, sl
 8006f1e:	4649      	mov	r1, r9
 8006f20:	4638      	mov	r0, r7
 8006f22:	47c0      	blx	r8
 8006f24:	3001      	adds	r0, #1
 8006f26:	d103      	bne.n	8006f30 <_printf_common+0xac>
 8006f28:	f04f 30ff 	mov.w	r0, #4294967295
 8006f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f30:	3501      	adds	r5, #1
 8006f32:	e7c6      	b.n	8006ec2 <_printf_common+0x3e>
 8006f34:	18e1      	adds	r1, r4, r3
 8006f36:	1c5a      	adds	r2, r3, #1
 8006f38:	2030      	movs	r0, #48	; 0x30
 8006f3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f3e:	4422      	add	r2, r4
 8006f40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f48:	3302      	adds	r3, #2
 8006f4a:	e7c7      	b.n	8006edc <_printf_common+0x58>
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	4622      	mov	r2, r4
 8006f50:	4649      	mov	r1, r9
 8006f52:	4638      	mov	r0, r7
 8006f54:	47c0      	blx	r8
 8006f56:	3001      	adds	r0, #1
 8006f58:	d0e6      	beq.n	8006f28 <_printf_common+0xa4>
 8006f5a:	3601      	adds	r6, #1
 8006f5c:	e7d9      	b.n	8006f12 <_printf_common+0x8e>
	...

08006f60 <_printf_i>:
 8006f60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f64:	460c      	mov	r4, r1
 8006f66:	4691      	mov	r9, r2
 8006f68:	7e27      	ldrb	r7, [r4, #24]
 8006f6a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006f6c:	2f78      	cmp	r7, #120	; 0x78
 8006f6e:	4680      	mov	r8, r0
 8006f70:	469a      	mov	sl, r3
 8006f72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f76:	d807      	bhi.n	8006f88 <_printf_i+0x28>
 8006f78:	2f62      	cmp	r7, #98	; 0x62
 8006f7a:	d80a      	bhi.n	8006f92 <_printf_i+0x32>
 8006f7c:	2f00      	cmp	r7, #0
 8006f7e:	f000 80d8 	beq.w	8007132 <_printf_i+0x1d2>
 8006f82:	2f58      	cmp	r7, #88	; 0x58
 8006f84:	f000 80a3 	beq.w	80070ce <_printf_i+0x16e>
 8006f88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006f8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f90:	e03a      	b.n	8007008 <_printf_i+0xa8>
 8006f92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f96:	2b15      	cmp	r3, #21
 8006f98:	d8f6      	bhi.n	8006f88 <_printf_i+0x28>
 8006f9a:	a001      	add	r0, pc, #4	; (adr r0, 8006fa0 <_printf_i+0x40>)
 8006f9c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006fa0:	08006ff9 	.word	0x08006ff9
 8006fa4:	0800700d 	.word	0x0800700d
 8006fa8:	08006f89 	.word	0x08006f89
 8006fac:	08006f89 	.word	0x08006f89
 8006fb0:	08006f89 	.word	0x08006f89
 8006fb4:	08006f89 	.word	0x08006f89
 8006fb8:	0800700d 	.word	0x0800700d
 8006fbc:	08006f89 	.word	0x08006f89
 8006fc0:	08006f89 	.word	0x08006f89
 8006fc4:	08006f89 	.word	0x08006f89
 8006fc8:	08006f89 	.word	0x08006f89
 8006fcc:	08007119 	.word	0x08007119
 8006fd0:	0800703d 	.word	0x0800703d
 8006fd4:	080070fb 	.word	0x080070fb
 8006fd8:	08006f89 	.word	0x08006f89
 8006fdc:	08006f89 	.word	0x08006f89
 8006fe0:	0800713b 	.word	0x0800713b
 8006fe4:	08006f89 	.word	0x08006f89
 8006fe8:	0800703d 	.word	0x0800703d
 8006fec:	08006f89 	.word	0x08006f89
 8006ff0:	08006f89 	.word	0x08006f89
 8006ff4:	08007103 	.word	0x08007103
 8006ff8:	680b      	ldr	r3, [r1, #0]
 8006ffa:	1d1a      	adds	r2, r3, #4
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	600a      	str	r2, [r1, #0]
 8007000:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007004:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007008:	2301      	movs	r3, #1
 800700a:	e0a3      	b.n	8007154 <_printf_i+0x1f4>
 800700c:	6825      	ldr	r5, [r4, #0]
 800700e:	6808      	ldr	r0, [r1, #0]
 8007010:	062e      	lsls	r6, r5, #24
 8007012:	f100 0304 	add.w	r3, r0, #4
 8007016:	d50a      	bpl.n	800702e <_printf_i+0xce>
 8007018:	6805      	ldr	r5, [r0, #0]
 800701a:	600b      	str	r3, [r1, #0]
 800701c:	2d00      	cmp	r5, #0
 800701e:	da03      	bge.n	8007028 <_printf_i+0xc8>
 8007020:	232d      	movs	r3, #45	; 0x2d
 8007022:	426d      	negs	r5, r5
 8007024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007028:	485e      	ldr	r0, [pc, #376]	; (80071a4 <_printf_i+0x244>)
 800702a:	230a      	movs	r3, #10
 800702c:	e019      	b.n	8007062 <_printf_i+0x102>
 800702e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007032:	6805      	ldr	r5, [r0, #0]
 8007034:	600b      	str	r3, [r1, #0]
 8007036:	bf18      	it	ne
 8007038:	b22d      	sxthne	r5, r5
 800703a:	e7ef      	b.n	800701c <_printf_i+0xbc>
 800703c:	680b      	ldr	r3, [r1, #0]
 800703e:	6825      	ldr	r5, [r4, #0]
 8007040:	1d18      	adds	r0, r3, #4
 8007042:	6008      	str	r0, [r1, #0]
 8007044:	0628      	lsls	r0, r5, #24
 8007046:	d501      	bpl.n	800704c <_printf_i+0xec>
 8007048:	681d      	ldr	r5, [r3, #0]
 800704a:	e002      	b.n	8007052 <_printf_i+0xf2>
 800704c:	0669      	lsls	r1, r5, #25
 800704e:	d5fb      	bpl.n	8007048 <_printf_i+0xe8>
 8007050:	881d      	ldrh	r5, [r3, #0]
 8007052:	4854      	ldr	r0, [pc, #336]	; (80071a4 <_printf_i+0x244>)
 8007054:	2f6f      	cmp	r7, #111	; 0x6f
 8007056:	bf0c      	ite	eq
 8007058:	2308      	moveq	r3, #8
 800705a:	230a      	movne	r3, #10
 800705c:	2100      	movs	r1, #0
 800705e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007062:	6866      	ldr	r6, [r4, #4]
 8007064:	60a6      	str	r6, [r4, #8]
 8007066:	2e00      	cmp	r6, #0
 8007068:	bfa2      	ittt	ge
 800706a:	6821      	ldrge	r1, [r4, #0]
 800706c:	f021 0104 	bicge.w	r1, r1, #4
 8007070:	6021      	strge	r1, [r4, #0]
 8007072:	b90d      	cbnz	r5, 8007078 <_printf_i+0x118>
 8007074:	2e00      	cmp	r6, #0
 8007076:	d04d      	beq.n	8007114 <_printf_i+0x1b4>
 8007078:	4616      	mov	r6, r2
 800707a:	fbb5 f1f3 	udiv	r1, r5, r3
 800707e:	fb03 5711 	mls	r7, r3, r1, r5
 8007082:	5dc7      	ldrb	r7, [r0, r7]
 8007084:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007088:	462f      	mov	r7, r5
 800708a:	42bb      	cmp	r3, r7
 800708c:	460d      	mov	r5, r1
 800708e:	d9f4      	bls.n	800707a <_printf_i+0x11a>
 8007090:	2b08      	cmp	r3, #8
 8007092:	d10b      	bne.n	80070ac <_printf_i+0x14c>
 8007094:	6823      	ldr	r3, [r4, #0]
 8007096:	07df      	lsls	r7, r3, #31
 8007098:	d508      	bpl.n	80070ac <_printf_i+0x14c>
 800709a:	6923      	ldr	r3, [r4, #16]
 800709c:	6861      	ldr	r1, [r4, #4]
 800709e:	4299      	cmp	r1, r3
 80070a0:	bfde      	ittt	le
 80070a2:	2330      	movle	r3, #48	; 0x30
 80070a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80070a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80070ac:	1b92      	subs	r2, r2, r6
 80070ae:	6122      	str	r2, [r4, #16]
 80070b0:	f8cd a000 	str.w	sl, [sp]
 80070b4:	464b      	mov	r3, r9
 80070b6:	aa03      	add	r2, sp, #12
 80070b8:	4621      	mov	r1, r4
 80070ba:	4640      	mov	r0, r8
 80070bc:	f7ff fee2 	bl	8006e84 <_printf_common>
 80070c0:	3001      	adds	r0, #1
 80070c2:	d14c      	bne.n	800715e <_printf_i+0x1fe>
 80070c4:	f04f 30ff 	mov.w	r0, #4294967295
 80070c8:	b004      	add	sp, #16
 80070ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ce:	4835      	ldr	r0, [pc, #212]	; (80071a4 <_printf_i+0x244>)
 80070d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80070d4:	6823      	ldr	r3, [r4, #0]
 80070d6:	680e      	ldr	r6, [r1, #0]
 80070d8:	061f      	lsls	r7, r3, #24
 80070da:	f856 5b04 	ldr.w	r5, [r6], #4
 80070de:	600e      	str	r6, [r1, #0]
 80070e0:	d514      	bpl.n	800710c <_printf_i+0x1ac>
 80070e2:	07d9      	lsls	r1, r3, #31
 80070e4:	bf44      	itt	mi
 80070e6:	f043 0320 	orrmi.w	r3, r3, #32
 80070ea:	6023      	strmi	r3, [r4, #0]
 80070ec:	b91d      	cbnz	r5, 80070f6 <_printf_i+0x196>
 80070ee:	6823      	ldr	r3, [r4, #0]
 80070f0:	f023 0320 	bic.w	r3, r3, #32
 80070f4:	6023      	str	r3, [r4, #0]
 80070f6:	2310      	movs	r3, #16
 80070f8:	e7b0      	b.n	800705c <_printf_i+0xfc>
 80070fa:	6823      	ldr	r3, [r4, #0]
 80070fc:	f043 0320 	orr.w	r3, r3, #32
 8007100:	6023      	str	r3, [r4, #0]
 8007102:	2378      	movs	r3, #120	; 0x78
 8007104:	4828      	ldr	r0, [pc, #160]	; (80071a8 <_printf_i+0x248>)
 8007106:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800710a:	e7e3      	b.n	80070d4 <_printf_i+0x174>
 800710c:	065e      	lsls	r6, r3, #25
 800710e:	bf48      	it	mi
 8007110:	b2ad      	uxthmi	r5, r5
 8007112:	e7e6      	b.n	80070e2 <_printf_i+0x182>
 8007114:	4616      	mov	r6, r2
 8007116:	e7bb      	b.n	8007090 <_printf_i+0x130>
 8007118:	680b      	ldr	r3, [r1, #0]
 800711a:	6826      	ldr	r6, [r4, #0]
 800711c:	6960      	ldr	r0, [r4, #20]
 800711e:	1d1d      	adds	r5, r3, #4
 8007120:	600d      	str	r5, [r1, #0]
 8007122:	0635      	lsls	r5, r6, #24
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	d501      	bpl.n	800712c <_printf_i+0x1cc>
 8007128:	6018      	str	r0, [r3, #0]
 800712a:	e002      	b.n	8007132 <_printf_i+0x1d2>
 800712c:	0671      	lsls	r1, r6, #25
 800712e:	d5fb      	bpl.n	8007128 <_printf_i+0x1c8>
 8007130:	8018      	strh	r0, [r3, #0]
 8007132:	2300      	movs	r3, #0
 8007134:	6123      	str	r3, [r4, #16]
 8007136:	4616      	mov	r6, r2
 8007138:	e7ba      	b.n	80070b0 <_printf_i+0x150>
 800713a:	680b      	ldr	r3, [r1, #0]
 800713c:	1d1a      	adds	r2, r3, #4
 800713e:	600a      	str	r2, [r1, #0]
 8007140:	681e      	ldr	r6, [r3, #0]
 8007142:	6862      	ldr	r2, [r4, #4]
 8007144:	2100      	movs	r1, #0
 8007146:	4630      	mov	r0, r6
 8007148:	f7f9 f882 	bl	8000250 <memchr>
 800714c:	b108      	cbz	r0, 8007152 <_printf_i+0x1f2>
 800714e:	1b80      	subs	r0, r0, r6
 8007150:	6060      	str	r0, [r4, #4]
 8007152:	6863      	ldr	r3, [r4, #4]
 8007154:	6123      	str	r3, [r4, #16]
 8007156:	2300      	movs	r3, #0
 8007158:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800715c:	e7a8      	b.n	80070b0 <_printf_i+0x150>
 800715e:	6923      	ldr	r3, [r4, #16]
 8007160:	4632      	mov	r2, r6
 8007162:	4649      	mov	r1, r9
 8007164:	4640      	mov	r0, r8
 8007166:	47d0      	blx	sl
 8007168:	3001      	adds	r0, #1
 800716a:	d0ab      	beq.n	80070c4 <_printf_i+0x164>
 800716c:	6823      	ldr	r3, [r4, #0]
 800716e:	079b      	lsls	r3, r3, #30
 8007170:	d413      	bmi.n	800719a <_printf_i+0x23a>
 8007172:	68e0      	ldr	r0, [r4, #12]
 8007174:	9b03      	ldr	r3, [sp, #12]
 8007176:	4298      	cmp	r0, r3
 8007178:	bfb8      	it	lt
 800717a:	4618      	movlt	r0, r3
 800717c:	e7a4      	b.n	80070c8 <_printf_i+0x168>
 800717e:	2301      	movs	r3, #1
 8007180:	4632      	mov	r2, r6
 8007182:	4649      	mov	r1, r9
 8007184:	4640      	mov	r0, r8
 8007186:	47d0      	blx	sl
 8007188:	3001      	adds	r0, #1
 800718a:	d09b      	beq.n	80070c4 <_printf_i+0x164>
 800718c:	3501      	adds	r5, #1
 800718e:	68e3      	ldr	r3, [r4, #12]
 8007190:	9903      	ldr	r1, [sp, #12]
 8007192:	1a5b      	subs	r3, r3, r1
 8007194:	42ab      	cmp	r3, r5
 8007196:	dcf2      	bgt.n	800717e <_printf_i+0x21e>
 8007198:	e7eb      	b.n	8007172 <_printf_i+0x212>
 800719a:	2500      	movs	r5, #0
 800719c:	f104 0619 	add.w	r6, r4, #25
 80071a0:	e7f5      	b.n	800718e <_printf_i+0x22e>
 80071a2:	bf00      	nop
 80071a4:	0800809d 	.word	0x0800809d
 80071a8:	080080ae 	.word	0x080080ae

080071ac <__sread>:
 80071ac:	b510      	push	{r4, lr}
 80071ae:	460c      	mov	r4, r1
 80071b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071b4:	f000 f8e2 	bl	800737c <_read_r>
 80071b8:	2800      	cmp	r0, #0
 80071ba:	bfab      	itete	ge
 80071bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80071be:	89a3      	ldrhlt	r3, [r4, #12]
 80071c0:	181b      	addge	r3, r3, r0
 80071c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80071c6:	bfac      	ite	ge
 80071c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80071ca:	81a3      	strhlt	r3, [r4, #12]
 80071cc:	bd10      	pop	{r4, pc}

080071ce <__swrite>:
 80071ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071d2:	461f      	mov	r7, r3
 80071d4:	898b      	ldrh	r3, [r1, #12]
 80071d6:	05db      	lsls	r3, r3, #23
 80071d8:	4605      	mov	r5, r0
 80071da:	460c      	mov	r4, r1
 80071dc:	4616      	mov	r6, r2
 80071de:	d505      	bpl.n	80071ec <__swrite+0x1e>
 80071e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071e4:	2302      	movs	r3, #2
 80071e6:	2200      	movs	r2, #0
 80071e8:	f000 f868 	bl	80072bc <_lseek_r>
 80071ec:	89a3      	ldrh	r3, [r4, #12]
 80071ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071f6:	81a3      	strh	r3, [r4, #12]
 80071f8:	4632      	mov	r2, r6
 80071fa:	463b      	mov	r3, r7
 80071fc:	4628      	mov	r0, r5
 80071fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007202:	f000 b817 	b.w	8007234 <_write_r>

08007206 <__sseek>:
 8007206:	b510      	push	{r4, lr}
 8007208:	460c      	mov	r4, r1
 800720a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800720e:	f000 f855 	bl	80072bc <_lseek_r>
 8007212:	1c43      	adds	r3, r0, #1
 8007214:	89a3      	ldrh	r3, [r4, #12]
 8007216:	bf15      	itete	ne
 8007218:	6560      	strne	r0, [r4, #84]	; 0x54
 800721a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800721e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007222:	81a3      	strheq	r3, [r4, #12]
 8007224:	bf18      	it	ne
 8007226:	81a3      	strhne	r3, [r4, #12]
 8007228:	bd10      	pop	{r4, pc}

0800722a <__sclose>:
 800722a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800722e:	f000 b813 	b.w	8007258 <_close_r>
	...

08007234 <_write_r>:
 8007234:	b538      	push	{r3, r4, r5, lr}
 8007236:	4d07      	ldr	r5, [pc, #28]	; (8007254 <_write_r+0x20>)
 8007238:	4604      	mov	r4, r0
 800723a:	4608      	mov	r0, r1
 800723c:	4611      	mov	r1, r2
 800723e:	2200      	movs	r2, #0
 8007240:	602a      	str	r2, [r5, #0]
 8007242:	461a      	mov	r2, r3
 8007244:	f7fa fd3b 	bl	8001cbe <_write>
 8007248:	1c43      	adds	r3, r0, #1
 800724a:	d102      	bne.n	8007252 <_write_r+0x1e>
 800724c:	682b      	ldr	r3, [r5, #0]
 800724e:	b103      	cbz	r3, 8007252 <_write_r+0x1e>
 8007250:	6023      	str	r3, [r4, #0]
 8007252:	bd38      	pop	{r3, r4, r5, pc}
 8007254:	2000025c 	.word	0x2000025c

08007258 <_close_r>:
 8007258:	b538      	push	{r3, r4, r5, lr}
 800725a:	4d06      	ldr	r5, [pc, #24]	; (8007274 <_close_r+0x1c>)
 800725c:	2300      	movs	r3, #0
 800725e:	4604      	mov	r4, r0
 8007260:	4608      	mov	r0, r1
 8007262:	602b      	str	r3, [r5, #0]
 8007264:	f7fa fd47 	bl	8001cf6 <_close>
 8007268:	1c43      	adds	r3, r0, #1
 800726a:	d102      	bne.n	8007272 <_close_r+0x1a>
 800726c:	682b      	ldr	r3, [r5, #0]
 800726e:	b103      	cbz	r3, 8007272 <_close_r+0x1a>
 8007270:	6023      	str	r3, [r4, #0]
 8007272:	bd38      	pop	{r3, r4, r5, pc}
 8007274:	2000025c 	.word	0x2000025c

08007278 <_fstat_r>:
 8007278:	b538      	push	{r3, r4, r5, lr}
 800727a:	4d07      	ldr	r5, [pc, #28]	; (8007298 <_fstat_r+0x20>)
 800727c:	2300      	movs	r3, #0
 800727e:	4604      	mov	r4, r0
 8007280:	4608      	mov	r0, r1
 8007282:	4611      	mov	r1, r2
 8007284:	602b      	str	r3, [r5, #0]
 8007286:	f7fa fd42 	bl	8001d0e <_fstat>
 800728a:	1c43      	adds	r3, r0, #1
 800728c:	d102      	bne.n	8007294 <_fstat_r+0x1c>
 800728e:	682b      	ldr	r3, [r5, #0]
 8007290:	b103      	cbz	r3, 8007294 <_fstat_r+0x1c>
 8007292:	6023      	str	r3, [r4, #0]
 8007294:	bd38      	pop	{r3, r4, r5, pc}
 8007296:	bf00      	nop
 8007298:	2000025c 	.word	0x2000025c

0800729c <_isatty_r>:
 800729c:	b538      	push	{r3, r4, r5, lr}
 800729e:	4d06      	ldr	r5, [pc, #24]	; (80072b8 <_isatty_r+0x1c>)
 80072a0:	2300      	movs	r3, #0
 80072a2:	4604      	mov	r4, r0
 80072a4:	4608      	mov	r0, r1
 80072a6:	602b      	str	r3, [r5, #0]
 80072a8:	f7fa fd41 	bl	8001d2e <_isatty>
 80072ac:	1c43      	adds	r3, r0, #1
 80072ae:	d102      	bne.n	80072b6 <_isatty_r+0x1a>
 80072b0:	682b      	ldr	r3, [r5, #0]
 80072b2:	b103      	cbz	r3, 80072b6 <_isatty_r+0x1a>
 80072b4:	6023      	str	r3, [r4, #0]
 80072b6:	bd38      	pop	{r3, r4, r5, pc}
 80072b8:	2000025c 	.word	0x2000025c

080072bc <_lseek_r>:
 80072bc:	b538      	push	{r3, r4, r5, lr}
 80072be:	4d07      	ldr	r5, [pc, #28]	; (80072dc <_lseek_r+0x20>)
 80072c0:	4604      	mov	r4, r0
 80072c2:	4608      	mov	r0, r1
 80072c4:	4611      	mov	r1, r2
 80072c6:	2200      	movs	r2, #0
 80072c8:	602a      	str	r2, [r5, #0]
 80072ca:	461a      	mov	r2, r3
 80072cc:	f7fa fd3a 	bl	8001d44 <_lseek>
 80072d0:	1c43      	adds	r3, r0, #1
 80072d2:	d102      	bne.n	80072da <_lseek_r+0x1e>
 80072d4:	682b      	ldr	r3, [r5, #0]
 80072d6:	b103      	cbz	r3, 80072da <_lseek_r+0x1e>
 80072d8:	6023      	str	r3, [r4, #0]
 80072da:	bd38      	pop	{r3, r4, r5, pc}
 80072dc:	2000025c 	.word	0x2000025c

080072e0 <memcpy>:
 80072e0:	440a      	add	r2, r1
 80072e2:	4291      	cmp	r1, r2
 80072e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80072e8:	d100      	bne.n	80072ec <memcpy+0xc>
 80072ea:	4770      	bx	lr
 80072ec:	b510      	push	{r4, lr}
 80072ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072f6:	4291      	cmp	r1, r2
 80072f8:	d1f9      	bne.n	80072ee <memcpy+0xe>
 80072fa:	bd10      	pop	{r4, pc}

080072fc <memmove>:
 80072fc:	4288      	cmp	r0, r1
 80072fe:	b510      	push	{r4, lr}
 8007300:	eb01 0402 	add.w	r4, r1, r2
 8007304:	d902      	bls.n	800730c <memmove+0x10>
 8007306:	4284      	cmp	r4, r0
 8007308:	4623      	mov	r3, r4
 800730a:	d807      	bhi.n	800731c <memmove+0x20>
 800730c:	1e43      	subs	r3, r0, #1
 800730e:	42a1      	cmp	r1, r4
 8007310:	d008      	beq.n	8007324 <memmove+0x28>
 8007312:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007316:	f803 2f01 	strb.w	r2, [r3, #1]!
 800731a:	e7f8      	b.n	800730e <memmove+0x12>
 800731c:	4402      	add	r2, r0
 800731e:	4601      	mov	r1, r0
 8007320:	428a      	cmp	r2, r1
 8007322:	d100      	bne.n	8007326 <memmove+0x2a>
 8007324:	bd10      	pop	{r4, pc}
 8007326:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800732a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800732e:	e7f7      	b.n	8007320 <memmove+0x24>

08007330 <_realloc_r>:
 8007330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007332:	4607      	mov	r7, r0
 8007334:	4614      	mov	r4, r2
 8007336:	460e      	mov	r6, r1
 8007338:	b921      	cbnz	r1, 8007344 <_realloc_r+0x14>
 800733a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800733e:	4611      	mov	r1, r2
 8007340:	f7fe bed8 	b.w	80060f4 <_malloc_r>
 8007344:	b922      	cbnz	r2, 8007350 <_realloc_r+0x20>
 8007346:	f7fe fe85 	bl	8006054 <_free_r>
 800734a:	4625      	mov	r5, r4
 800734c:	4628      	mov	r0, r5
 800734e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007350:	f000 f826 	bl	80073a0 <_malloc_usable_size_r>
 8007354:	42a0      	cmp	r0, r4
 8007356:	d20f      	bcs.n	8007378 <_realloc_r+0x48>
 8007358:	4621      	mov	r1, r4
 800735a:	4638      	mov	r0, r7
 800735c:	f7fe feca 	bl	80060f4 <_malloc_r>
 8007360:	4605      	mov	r5, r0
 8007362:	2800      	cmp	r0, #0
 8007364:	d0f2      	beq.n	800734c <_realloc_r+0x1c>
 8007366:	4631      	mov	r1, r6
 8007368:	4622      	mov	r2, r4
 800736a:	f7ff ffb9 	bl	80072e0 <memcpy>
 800736e:	4631      	mov	r1, r6
 8007370:	4638      	mov	r0, r7
 8007372:	f7fe fe6f 	bl	8006054 <_free_r>
 8007376:	e7e9      	b.n	800734c <_realloc_r+0x1c>
 8007378:	4635      	mov	r5, r6
 800737a:	e7e7      	b.n	800734c <_realloc_r+0x1c>

0800737c <_read_r>:
 800737c:	b538      	push	{r3, r4, r5, lr}
 800737e:	4d07      	ldr	r5, [pc, #28]	; (800739c <_read_r+0x20>)
 8007380:	4604      	mov	r4, r0
 8007382:	4608      	mov	r0, r1
 8007384:	4611      	mov	r1, r2
 8007386:	2200      	movs	r2, #0
 8007388:	602a      	str	r2, [r5, #0]
 800738a:	461a      	mov	r2, r3
 800738c:	f7fa fc7a 	bl	8001c84 <_read>
 8007390:	1c43      	adds	r3, r0, #1
 8007392:	d102      	bne.n	800739a <_read_r+0x1e>
 8007394:	682b      	ldr	r3, [r5, #0]
 8007396:	b103      	cbz	r3, 800739a <_read_r+0x1e>
 8007398:	6023      	str	r3, [r4, #0]
 800739a:	bd38      	pop	{r3, r4, r5, pc}
 800739c:	2000025c 	.word	0x2000025c

080073a0 <_malloc_usable_size_r>:
 80073a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073a4:	1f18      	subs	r0, r3, #4
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	bfbc      	itt	lt
 80073aa:	580b      	ldrlt	r3, [r1, r0]
 80073ac:	18c0      	addlt	r0, r0, r3
 80073ae:	4770      	bx	lr

080073b0 <checkint>:
 80073b0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80073b4:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80073b8:	429a      	cmp	r2, r3
 80073ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073bc:	dd2b      	ble.n	8007416 <checkint+0x66>
 80073be:	f240 4333 	movw	r3, #1075	; 0x433
 80073c2:	429a      	cmp	r2, r3
 80073c4:	dc25      	bgt.n	8007412 <checkint+0x62>
 80073c6:	1a9b      	subs	r3, r3, r2
 80073c8:	f1a3 0620 	sub.w	r6, r3, #32
 80073cc:	f04f 32ff 	mov.w	r2, #4294967295
 80073d0:	fa02 f606 	lsl.w	r6, r2, r6
 80073d4:	fa02 f403 	lsl.w	r4, r2, r3
 80073d8:	f1c3 0520 	rsb	r5, r3, #32
 80073dc:	4334      	orrs	r4, r6
 80073de:	fa22 f505 	lsr.w	r5, r2, r5
 80073e2:	432c      	orrs	r4, r5
 80073e4:	409a      	lsls	r2, r3
 80073e6:	ea20 0602 	bic.w	r6, r0, r2
 80073ea:	ea21 0704 	bic.w	r7, r1, r4
 80073ee:	ea56 0207 	orrs.w	r2, r6, r7
 80073f2:	f1a3 0420 	sub.w	r4, r3, #32
 80073f6:	f1c3 0220 	rsb	r2, r3, #32
 80073fa:	d10c      	bne.n	8007416 <checkint+0x66>
 80073fc:	40d8      	lsrs	r0, r3
 80073fe:	fa01 f302 	lsl.w	r3, r1, r2
 8007402:	4318      	orrs	r0, r3
 8007404:	40e1      	lsrs	r1, r4
 8007406:	4308      	orrs	r0, r1
 8007408:	f000 0301 	and.w	r3, r0, #1
 800740c:	f1c3 0002 	rsb	r0, r3, #2
 8007410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007412:	2002      	movs	r0, #2
 8007414:	e7fc      	b.n	8007410 <checkint+0x60>
 8007416:	2000      	movs	r0, #0
 8007418:	e7fa      	b.n	8007410 <checkint+0x60>
 800741a:	0000      	movs	r0, r0
 800741c:	0000      	movs	r0, r0
	...

08007420 <pow>:
 8007420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007424:	ed2d 8b0a 	vpush	{d8-d12}
 8007428:	b09b      	sub	sp, #108	; 0x6c
 800742a:	ed8d 0b02 	vstr	d0, [sp, #8]
 800742e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007432:	ed8d 1b00 	vstr	d1, [sp]
 8007436:	ea4f 5915 	mov.w	r9, r5, lsr #20
 800743a:	e9dd 6700 	ldrd	r6, r7, [sp]
 800743e:	f109 30ff 	add.w	r0, r9, #4294967295
 8007442:	f240 71fd 	movw	r1, #2045	; 0x7fd
 8007446:	4288      	cmp	r0, r1
 8007448:	46cc      	mov	ip, r9
 800744a:	ea4f 5817 	mov.w	r8, r7, lsr #20
 800744e:	d806      	bhi.n	800745e <pow+0x3e>
 8007450:	f3c8 010a 	ubfx	r1, r8, #0, #11
 8007454:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 8007458:	297f      	cmp	r1, #127	; 0x7f
 800745a:	f240 81ab 	bls.w	80077b4 <pow+0x394>
 800745e:	19b1      	adds	r1, r6, r6
 8007460:	9104      	str	r1, [sp, #16]
 8007462:	eb47 0107 	adc.w	r1, r7, r7
 8007466:	9105      	str	r1, [sp, #20]
 8007468:	9904      	ldr	r1, [sp, #16]
 800746a:	f111 31ff 	adds.w	r1, r1, #4294967295
 800746e:	460a      	mov	r2, r1
 8007470:	9905      	ldr	r1, [sp, #20]
 8007472:	f141 31ff 	adc.w	r1, r1, #4294967295
 8007476:	460b      	mov	r3, r1
 8007478:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 800747c:	f06f 0001 	mvn.w	r0, #1
 8007480:	4299      	cmp	r1, r3
 8007482:	bf08      	it	eq
 8007484:	4290      	cmpeq	r0, r2
 8007486:	d260      	bcs.n	800754a <pow+0x12a>
 8007488:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800748c:	4313      	orrs	r3, r2
 800748e:	d11a      	bne.n	80074c6 <pow+0xa6>
 8007490:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 8007494:	1923      	adds	r3, r4, r4
 8007496:	930c      	str	r3, [sp, #48]	; 0x30
 8007498:	eb42 0302 	adc.w	r3, r2, r2
 800749c:	930d      	str	r3, [sp, #52]	; 0x34
 800749e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80074a2:	4bcf      	ldr	r3, [pc, #828]	; (80077e0 <pow+0x3c0>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	428b      	cmp	r3, r1
 80074a8:	bf08      	it	eq
 80074aa:	4282      	cmpeq	r2, r0
 80074ac:	f080 8265 	bcs.w	800797a <pow+0x55a>
 80074b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80074b4:	ed9d 6b00 	vldr	d6, [sp]
 80074b8:	ee37 0b06 	vadd.f64	d0, d7, d6
 80074bc:	b01b      	add	sp, #108	; 0x6c
 80074be:	ecbd 8b0a 	vpop	{d8-d12}
 80074c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074c6:	49c7      	ldr	r1, [pc, #796]	; (80077e4 <pow+0x3c4>)
 80074c8:	2000      	movs	r0, #0
 80074ca:	428d      	cmp	r5, r1
 80074cc:	bf08      	it	eq
 80074ce:	4284      	cmpeq	r4, r0
 80074d0:	d10b      	bne.n	80074ea <pow+0xca>
 80074d2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80074d6:	19b3      	adds	r3, r6, r6
 80074d8:	930e      	str	r3, [sp, #56]	; 0x38
 80074da:	eb42 0302 	adc.w	r3, r2, r2
 80074de:	930f      	str	r3, [sp, #60]	; 0x3c
 80074e0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80074e4:	4bbe      	ldr	r3, [pc, #760]	; (80077e0 <pow+0x3c0>)
 80074e6:	2200      	movs	r2, #0
 80074e8:	e7dd      	b.n	80074a6 <pow+0x86>
 80074ea:	1921      	adds	r1, r4, r4
 80074ec:	9106      	str	r1, [sp, #24]
 80074ee:	eb45 0105 	adc.w	r1, r5, r5
 80074f2:	9107      	str	r1, [sp, #28]
 80074f4:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80074f8:	49bb      	ldr	r1, [pc, #748]	; (80077e8 <pow+0x3c8>)
 80074fa:	2000      	movs	r0, #0
 80074fc:	42a1      	cmp	r1, r4
 80074fe:	bf08      	it	eq
 8007500:	4298      	cmpeq	r0, r3
 8007502:	d3d5      	bcc.n	80074b0 <pow+0x90>
 8007504:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007508:	428c      	cmp	r4, r1
 800750a:	bf08      	it	eq
 800750c:	4283      	cmpeq	r3, r0
 800750e:	d1cf      	bne.n	80074b0 <pow+0x90>
 8007510:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8007514:	49b5      	ldr	r1, [pc, #724]	; (80077ec <pow+0x3cc>)
 8007516:	2000      	movs	r0, #0
 8007518:	428c      	cmp	r4, r1
 800751a:	bf08      	it	eq
 800751c:	4283      	cmpeq	r3, r0
 800751e:	f000 822c 	beq.w	800797a <pow+0x55a>
 8007522:	49b3      	ldr	r1, [pc, #716]	; (80077f0 <pow+0x3d0>)
 8007524:	f04f 30ff 	mov.w	r0, #4294967295
 8007528:	42a1      	cmp	r1, r4
 800752a:	bf08      	it	eq
 800752c:	4298      	cmpeq	r0, r3
 800752e:	ea6f 0307 	mvn.w	r3, r7
 8007532:	bf34      	ite	cc
 8007534:	2201      	movcc	r2, #1
 8007536:	2200      	movcs	r2, #0
 8007538:	0fdb      	lsrs	r3, r3, #31
 800753a:	429a      	cmp	r2, r3
 800753c:	f040 821a 	bne.w	8007974 <pow+0x554>
 8007540:	ed9d 7b00 	vldr	d7, [sp]
 8007544:	ee27 0b07 	vmul.f64	d0, d7, d7
 8007548:	e7b8      	b.n	80074bc <pow+0x9c>
 800754a:	1923      	adds	r3, r4, r4
 800754c:	9308      	str	r3, [sp, #32]
 800754e:	eb45 0305 	adc.w	r3, r5, r5
 8007552:	9309      	str	r3, [sp, #36]	; 0x24
 8007554:	9b08      	ldr	r3, [sp, #32]
 8007556:	f113 33ff 	adds.w	r3, r3, #4294967295
 800755a:	9310      	str	r3, [sp, #64]	; 0x40
 800755c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800755e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8007562:	9311      	str	r3, [sp, #68]	; 0x44
 8007564:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007568:	4299      	cmp	r1, r3
 800756a:	bf08      	it	eq
 800756c:	4290      	cmpeq	r0, r2
 800756e:	d22d      	bcs.n	80075cc <pow+0x1ac>
 8007570:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007574:	2c00      	cmp	r4, #0
 8007576:	f175 0300 	sbcs.w	r3, r5, #0
 800757a:	ee27 0b07 	vmul.f64	d0, d7, d7
 800757e:	da16      	bge.n	80075ae <pow+0x18e>
 8007580:	4630      	mov	r0, r6
 8007582:	4639      	mov	r1, r7
 8007584:	f7ff ff14 	bl	80073b0 <checkint>
 8007588:	2801      	cmp	r0, #1
 800758a:	d110      	bne.n	80075ae <pow+0x18e>
 800758c:	eeb1 0b40 	vneg.f64	d0, d0
 8007590:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8007594:	4323      	orrs	r3, r4
 8007596:	d10c      	bne.n	80075b2 <pow+0x192>
 8007598:	2e00      	cmp	r6, #0
 800759a:	f177 0300 	sbcs.w	r3, r7, #0
 800759e:	da8d      	bge.n	80074bc <pow+0x9c>
 80075a0:	b01b      	add	sp, #108	; 0x6c
 80075a2:	ecbd 8b0a 	vpop	{d8-d12}
 80075a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075aa:	f000 bc61 	b.w	8007e70 <__math_divzero>
 80075ae:	2000      	movs	r0, #0
 80075b0:	e7ee      	b.n	8007590 <pow+0x170>
 80075b2:	2e00      	cmp	r6, #0
 80075b4:	f177 0300 	sbcs.w	r3, r7, #0
 80075b8:	da80      	bge.n	80074bc <pow+0x9c>
 80075ba:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80075be:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80075c2:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80075c6:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 80075ca:	e777      	b.n	80074bc <pow+0x9c>
 80075cc:	2c00      	cmp	r4, #0
 80075ce:	f175 0300 	sbcs.w	r3, r5, #0
 80075d2:	da35      	bge.n	8007640 <pow+0x220>
 80075d4:	4630      	mov	r0, r6
 80075d6:	4639      	mov	r1, r7
 80075d8:	f7ff feea 	bl	80073b0 <checkint>
 80075dc:	b940      	cbnz	r0, 80075f0 <pow+0x1d0>
 80075de:	ed9d 0b02 	vldr	d0, [sp, #8]
 80075e2:	b01b      	add	sp, #108	; 0x6c
 80075e4:	ecbd 8b0a 	vpop	{d8-d12}
 80075e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ec:	f000 bc58 	b.w	8007ea0 <__math_invalid>
 80075f0:	2801      	cmp	r0, #1
 80075f2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80075f6:	bf14      	ite	ne
 80075f8:	2000      	movne	r0, #0
 80075fa:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 80075fe:	461d      	mov	r5, r3
 8007600:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 8007604:	f3c8 030a 	ubfx	r3, r8, #0, #11
 8007608:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 800760c:	2a7f      	cmp	r2, #127	; 0x7f
 800760e:	d933      	bls.n	8007678 <pow+0x258>
 8007610:	4974      	ldr	r1, [pc, #464]	; (80077e4 <pow+0x3c4>)
 8007612:	2000      	movs	r0, #0
 8007614:	428d      	cmp	r5, r1
 8007616:	bf08      	it	eq
 8007618:	4284      	cmpeq	r4, r0
 800761a:	f000 81ae 	beq.w	800797a <pow+0x55a>
 800761e:	f240 32bd 	movw	r2, #957	; 0x3bd
 8007622:	4293      	cmp	r3, r2
 8007624:	d80e      	bhi.n	8007644 <pow+0x224>
 8007626:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800762a:	ed9d 7b00 	vldr	d7, [sp]
 800762e:	42a9      	cmp	r1, r5
 8007630:	bf08      	it	eq
 8007632:	42a0      	cmpeq	r0, r4
 8007634:	bf34      	ite	cc
 8007636:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 800763a:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 800763e:	e73d      	b.n	80074bc <pow+0x9c>
 8007640:	2000      	movs	r0, #0
 8007642:	e7df      	b.n	8007604 <pow+0x1e4>
 8007644:	42a9      	cmp	r1, r5
 8007646:	bf08      	it	eq
 8007648:	42a0      	cmpeq	r0, r4
 800764a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800764e:	bf2c      	ite	cs
 8007650:	2301      	movcs	r3, #1
 8007652:	2300      	movcc	r3, #0
 8007654:	4590      	cmp	r8, r2
 8007656:	bf8c      	ite	hi
 8007658:	f04f 0800 	movhi.w	r8, #0
 800765c:	f04f 0801 	movls.w	r8, #1
 8007660:	4543      	cmp	r3, r8
 8007662:	f04f 0000 	mov.w	r0, #0
 8007666:	f000 80af 	beq.w	80077c8 <pow+0x3a8>
 800766a:	b01b      	add	sp, #108	; 0x6c
 800766c:	ecbd 8b0a 	vpop	{d8-d12}
 8007670:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007674:	f000 bbf4 	b.w	8007e60 <__math_oflow>
 8007678:	f1bc 0f00 	cmp.w	ip, #0
 800767c:	d10e      	bne.n	800769c <pow+0x27c>
 800767e:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80077d8 <pow+0x3b8>
 8007682:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007686:	ee26 7b07 	vmul.f64	d7, d6, d7
 800768a:	ec57 6b17 	vmov	r6, r7, d7
 800768e:	4b59      	ldr	r3, [pc, #356]	; (80077f4 <pow+0x3d4>)
 8007690:	2100      	movs	r1, #0
 8007692:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8007696:	1874      	adds	r4, r6, r1
 8007698:	eb42 0503 	adc.w	r5, r2, r3
 800769c:	2300      	movs	r3, #0
 800769e:	18e3      	adds	r3, r4, r3
 80076a0:	4b55      	ldr	r3, [pc, #340]	; (80077f8 <pow+0x3d8>)
 80076a2:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80076a6:	eb45 0303 	adc.w	r3, r5, r3
 80076aa:	1519      	asrs	r1, r3, #20
 80076ac:	ee03 1a10 	vmov	s6, r1
 80076b0:	0d1e      	lsrs	r6, r3, #20
 80076b2:	2100      	movs	r1, #0
 80076b4:	f3c3 3246 	ubfx	r2, r3, #13, #7
 80076b8:	0536      	lsls	r6, r6, #20
 80076ba:	1a63      	subs	r3, r4, r1
 80076bc:	9312      	str	r3, [sp, #72]	; 0x48
 80076be:	eb65 0306 	sbc.w	r3, r5, r6
 80076c2:	9313      	str	r3, [sp, #76]	; 0x4c
 80076c4:	4b4d      	ldr	r3, [pc, #308]	; (80077fc <pow+0x3dc>)
 80076c6:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 80076ca:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80076ce:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 80076d2:	eea5 6b07 	vfma.f64	d6, d5, d7
 80076d6:	ed93 7b00 	vldr	d7, [r3]
 80076da:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 80076de:	ed93 4b02 	vldr	d4, [r3, #8]
 80076e2:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 80076e6:	eea3 5b07 	vfma.f64	d5, d3, d7
 80076ea:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 80076ee:	ee36 9b05 	vadd.f64	d9, d6, d5
 80076f2:	ee35 5b49 	vsub.f64	d5, d5, d9
 80076f6:	eea3 7b04 	vfma.f64	d7, d3, d4
 80076fa:	ed93 4b04 	vldr	d4, [r3, #16]
 80076fe:	ee35 5b06 	vadd.f64	d5, d5, d6
 8007702:	ee37 7b05 	vadd.f64	d7, d7, d5
 8007706:	ee26 4b04 	vmul.f64	d4, d6, d4
 800770a:	ed93 3b08 	vldr	d3, [r3, #32]
 800770e:	ee26 0b04 	vmul.f64	d0, d6, d4
 8007712:	eeb0 8b40 	vmov.f64	d8, d0
 8007716:	ee94 8b06 	vfnms.f64	d8, d4, d6
 800771a:	ed93 4b06 	vldr	d4, [r3, #24]
 800771e:	ee26 ab00 	vmul.f64	d10, d6, d0
 8007722:	ee39 1b00 	vadd.f64	d1, d9, d0
 8007726:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800772a:	eea6 4b03 	vfma.f64	d4, d6, d3
 800772e:	ee39 9b41 	vsub.f64	d9, d9, d1
 8007732:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 8007736:	ee37 8b08 	vadd.f64	d8, d7, d8
 800773a:	ee39 9b00 	vadd.f64	d9, d9, d0
 800773e:	eea6 3b02 	vfma.f64	d3, d6, d2
 8007742:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8007746:	ee38 9b09 	vadd.f64	d9, d8, d9
 800774a:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 800774e:	eea6 2b0c 	vfma.f64	d2, d6, d12
 8007752:	ed9d 6b00 	vldr	d6, [sp]
 8007756:	eea0 3b02 	vfma.f64	d3, d0, d2
 800775a:	eea0 4b03 	vfma.f64	d4, d0, d3
 800775e:	eeaa 9b04 	vfma.f64	d9, d10, d4
 8007762:	ee31 7b09 	vadd.f64	d7, d1, d9
 8007766:	ee26 6b07 	vmul.f64	d6, d6, d7
 800776a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800776e:	eeb0 3b46 	vmov.f64	d3, d6
 8007772:	ee31 1b47 	vsub.f64	d1, d1, d7
 8007776:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800777a:	ee31 9b09 	vadd.f64	d9, d1, d9
 800777e:	ed9d 6b00 	vldr	d6, [sp]
 8007782:	f3c3 570a 	ubfx	r7, r3, #20, #11
 8007786:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 800778a:	193c      	adds	r4, r7, r4
 800778c:	2c3e      	cmp	r4, #62	; 0x3e
 800778e:	ee96 3b07 	vfnms.f64	d3, d6, d7
 8007792:	eea6 3b09 	vfma.f64	d3, d6, d9
 8007796:	d934      	bls.n	8007802 <pow+0x3e2>
 8007798:	428c      	cmp	r4, r1
 800779a:	da0d      	bge.n	80077b8 <pow+0x398>
 800779c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80077a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80077a4:	ee37 0b00 	vadd.f64	d0, d7, d0
 80077a8:	2800      	cmp	r0, #0
 80077aa:	f43f ae87 	beq.w	80074bc <pow+0x9c>
 80077ae:	eeb1 0b40 	vneg.f64	d0, d0
 80077b2:	e683      	b.n	80074bc <pow+0x9c>
 80077b4:	2000      	movs	r0, #0
 80077b6:	e771      	b.n	800769c <pow+0x27c>
 80077b8:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 80077bc:	d920      	bls.n	8007800 <pow+0x3e0>
 80077be:	2a00      	cmp	r2, #0
 80077c0:	f173 0300 	sbcs.w	r3, r3, #0
 80077c4:	f6bf af51 	bge.w	800766a <pow+0x24a>
 80077c8:	b01b      	add	sp, #108	; 0x6c
 80077ca:	ecbd 8b0a 	vpop	{d8-d12}
 80077ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d2:	f000 bb3d 	b.w	8007e50 <__math_uflow>
 80077d6:	bf00      	nop
 80077d8:	00000000 	.word	0x00000000
 80077dc:	43300000 	.word	0x43300000
 80077e0:	fff00000 	.word	0xfff00000
 80077e4:	3ff00000 	.word	0x3ff00000
 80077e8:	ffe00000 	.word	0xffe00000
 80077ec:	7fe00000 	.word	0x7fe00000
 80077f0:	7fdfffff 	.word	0x7fdfffff
 80077f4:	fcc00000 	.word	0xfcc00000
 80077f8:	c0196aab 	.word	0xc0196aab
 80077fc:	080080c0 	.word	0x080080c0
 8007800:	460f      	mov	r7, r1
 8007802:	4e65      	ldr	r6, [pc, #404]	; (8007998 <pow+0x578>)
 8007804:	ed9d 4b02 	vldr	d4, [sp, #8]
 8007808:	ed96 6b02 	vldr	d6, [r6, #8]
 800780c:	ed96 7b00 	vldr	d7, [r6]
 8007810:	eeb0 5b46 	vmov.f64	d5, d6
 8007814:	eea4 5b07 	vfma.f64	d5, d4, d7
 8007818:	ed8d 5b00 	vstr	d5, [sp]
 800781c:	ee35 6b46 	vsub.f64	d6, d5, d6
 8007820:	eeb0 5b44 	vmov.f64	d5, d4
 8007824:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007828:	ed96 7b04 	vldr	d7, [r6, #16]
 800782c:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 8007830:	eea6 5b07 	vfma.f64	d5, d6, d7
 8007834:	eeb0 7b45 	vmov.f64	d7, d5
 8007838:	ed96 5b06 	vldr	d5, [r6, #24]
 800783c:	1849      	adds	r1, r1, r1
 800783e:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 8007842:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 8007846:	eea6 7b05 	vfma.f64	d7, d6, d5
 800784a:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 800784e:	ee33 3b07 	vadd.f64	d3, d3, d7
 8007852:	ee23 6b03 	vmul.f64	d6, d3, d3
 8007856:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 800785a:	ed96 5b08 	vldr	d5, [r6, #32]
 800785e:	ee33 7b07 	vadd.f64	d7, d3, d7
 8007862:	1814      	adds	r4, r2, r0
 8007864:	0365      	lsls	r5, r4, #13
 8007866:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 800786a:	eea3 5b04 	vfma.f64	d5, d3, d4
 800786e:	eea6 7b05 	vfma.f64	d7, d6, d5
 8007872:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 8007876:	ee26 6b06 	vmul.f64	d6, d6, d6
 800787a:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 800787e:	2000      	movs	r0, #0
 8007880:	eb10 0a04 	adds.w	sl, r0, r4
 8007884:	eea3 5b04 	vfma.f64	d5, d3, d4
 8007888:	eb45 0b0c 	adc.w	fp, r5, ip
 800788c:	eea6 7b05 	vfma.f64	d7, d6, d5
 8007890:	2f00      	cmp	r7, #0
 8007892:	d16a      	bne.n	800796a <pow+0x54a>
 8007894:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 8007898:	4639      	mov	r1, r7
 800789a:	ea50 0301 	orrs.w	r3, r0, r1
 800789e:	f04f 0300 	mov.w	r3, #0
 80078a2:	d115      	bne.n	80078d0 <pow+0x4b0>
 80078a4:	eb1a 0303 	adds.w	r3, sl, r3
 80078a8:	ee0b 3a10 	vmov	s22, r3
 80078ac:	4b3b      	ldr	r3, [pc, #236]	; (800799c <pow+0x57c>)
 80078ae:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8007980 <pow+0x560>
 80078b2:	eb4b 0303 	adc.w	r3, fp, r3
 80078b6:	ee0b 3a90 	vmov	s23, r3
 80078ba:	eea7 bb0b 	vfma.f64	d11, d7, d11
 80078be:	ee2b 0b00 	vmul.f64	d0, d11, d0
 80078c2:	b01b      	add	sp, #108	; 0x6c
 80078c4:	ecbd 8b0a 	vpop	{d8-d12}
 80078c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078cc:	f000 bb00 	b.w	8007ed0 <__math_check_oflow>
 80078d0:	eb1a 0303 	adds.w	r3, sl, r3
 80078d4:	930a      	str	r3, [sp, #40]	; 0x28
 80078d6:	4b32      	ldr	r3, [pc, #200]	; (80079a0 <pow+0x580>)
 80078d8:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80078dc:	eb4b 0303 	adc.w	r3, fp, r3
 80078e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80078e2:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80078e6:	ee27 6b05 	vmul.f64	d6, d7, d5
 80078ea:	ee35 7b06 	vadd.f64	d7, d5, d6
 80078ee:	eeb0 3bc7 	vabs.f64	d3, d7
 80078f2:	eeb4 3bc4 	vcmpe.f64	d3, d4
 80078f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078fa:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8007988 <pow+0x568>
 80078fe:	d52b      	bpl.n	8007958 <pow+0x538>
 8007900:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007904:	ee35 5b47 	vsub.f64	d5, d5, d7
 8007908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800790c:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8007910:	ee35 6b06 	vadd.f64	d6, d5, d6
 8007914:	bf48      	it	mi
 8007916:	eeb0 4b43 	vmovmi.f64	d4, d3
 800791a:	ee37 3b04 	vadd.f64	d3, d7, d4
 800791e:	ee34 5b43 	vsub.f64	d5, d4, d3
 8007922:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007926:	ee37 7b06 	vadd.f64	d7, d7, d6
 800792a:	ee37 7b03 	vadd.f64	d7, d7, d3
 800792e:	ee37 7b44 	vsub.f64	d7, d7, d4
 8007932:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800793a:	d105      	bne.n	8007948 <pow+0x528>
 800793c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800793e:	463a      	mov	r2, r7
 8007940:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8007944:	ec43 2b17 	vmov	d7, r2, r3
 8007948:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 800794c:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 8007950:	ee26 6b00 	vmul.f64	d6, d6, d0
 8007954:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 8007958:	ee27 0b00 	vmul.f64	d0, d7, d0
 800795c:	b01b      	add	sp, #108	; 0x6c
 800795e:	ecbd 8b0a 	vpop	{d8-d12}
 8007962:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007966:	f000 baaa 	b.w	8007ebe <__math_check_uflow>
 800796a:	ec4b ab10 	vmov	d0, sl, fp
 800796e:	eea7 0b00 	vfma.f64	d0, d7, d0
 8007972:	e5a3      	b.n	80074bc <pow+0x9c>
 8007974:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8007990 <pow+0x570>
 8007978:	e5a0      	b.n	80074bc <pow+0x9c>
 800797a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800797e:	e59d      	b.n	80074bc <pow+0x9c>
 8007980:	00000000 	.word	0x00000000
 8007984:	7f000000 	.word	0x7f000000
 8007988:	00000000 	.word	0x00000000
 800798c:	00100000 	.word	0x00100000
	...
 8007998:	08009178 	.word	0x08009178
 800799c:	c0f00000 	.word	0xc0f00000
 80079a0:	3fe00000 	.word	0x3fe00000
 80079a4:	00000000 	.word	0x00000000

080079a8 <atan>:
 80079a8:	b538      	push	{r3, r4, r5, lr}
 80079aa:	eeb0 7b40 	vmov.f64	d7, d0
 80079ae:	ee17 5a90 	vmov	r5, s15
 80079b2:	4b73      	ldr	r3, [pc, #460]	; (8007b80 <atan+0x1d8>)
 80079b4:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80079b8:	429c      	cmp	r4, r3
 80079ba:	dd13      	ble.n	80079e4 <atan+0x3c>
 80079bc:	4b71      	ldr	r3, [pc, #452]	; (8007b84 <atan+0x1dc>)
 80079be:	429c      	cmp	r4, r3
 80079c0:	dc03      	bgt.n	80079ca <atan+0x22>
 80079c2:	d107      	bne.n	80079d4 <atan+0x2c>
 80079c4:	ee10 3a10 	vmov	r3, s0
 80079c8:	b123      	cbz	r3, 80079d4 <atan+0x2c>
 80079ca:	ee37 7b07 	vadd.f64	d7, d7, d7
 80079ce:	eeb0 0b47 	vmov.f64	d0, d7
 80079d2:	bd38      	pop	{r3, r4, r5, pc}
 80079d4:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8007b10 <atan+0x168>
 80079d8:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8007b18 <atan+0x170>
 80079dc:	2d00      	cmp	r5, #0
 80079de:	fe36 7b07 	vselgt.f64	d7, d6, d7
 80079e2:	e7f4      	b.n	80079ce <atan+0x26>
 80079e4:	4b68      	ldr	r3, [pc, #416]	; (8007b88 <atan+0x1e0>)
 80079e6:	429c      	cmp	r4, r3
 80079e8:	dc11      	bgt.n	8007a0e <atan+0x66>
 80079ea:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80079ee:	429c      	cmp	r4, r3
 80079f0:	dc0a      	bgt.n	8007a08 <atan+0x60>
 80079f2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80079f6:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8007b20 <atan+0x178>
 80079fa:	ee30 6b06 	vadd.f64	d6, d0, d6
 80079fe:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a06:	dce2      	bgt.n	80079ce <atan+0x26>
 8007a08:	f04f 33ff 	mov.w	r3, #4294967295
 8007a0c:	e013      	b.n	8007a36 <atan+0x8e>
 8007a0e:	f000 f8c5 	bl	8007b9c <fabs>
 8007a12:	4b5e      	ldr	r3, [pc, #376]	; (8007b8c <atan+0x1e4>)
 8007a14:	429c      	cmp	r4, r3
 8007a16:	dc4f      	bgt.n	8007ab8 <atan+0x110>
 8007a18:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007a1c:	429c      	cmp	r4, r3
 8007a1e:	dc41      	bgt.n	8007aa4 <atan+0xfc>
 8007a20:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8007a24:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8007a28:	2300      	movs	r3, #0
 8007a2a:	eea0 6b07 	vfma.f64	d6, d0, d7
 8007a2e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8007a32:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8007a36:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8007b28 <atan+0x180>
 8007a3a:	ee27 4b07 	vmul.f64	d4, d7, d7
 8007a3e:	ee24 5b04 	vmul.f64	d5, d4, d4
 8007a42:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8007b30 <atan+0x188>
 8007a46:	eea5 3b06 	vfma.f64	d3, d5, d6
 8007a4a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8007b38 <atan+0x190>
 8007a4e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8007a52:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8007b40 <atan+0x198>
 8007a56:	eea6 3b05 	vfma.f64	d3, d6, d5
 8007a5a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8007b48 <atan+0x1a0>
 8007a5e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8007a62:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8007b50 <atan+0x1a8>
 8007a66:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8007b58 <atan+0x1b0>
 8007a6a:	eea6 3b05 	vfma.f64	d3, d6, d5
 8007a6e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8007b60 <atan+0x1b8>
 8007a72:	eea5 2b06 	vfma.f64	d2, d5, d6
 8007a76:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8007b68 <atan+0x1c0>
 8007a7a:	eea2 6b05 	vfma.f64	d6, d2, d5
 8007a7e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8007b70 <atan+0x1c8>
 8007a82:	eea6 2b05 	vfma.f64	d2, d6, d5
 8007a86:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8007b78 <atan+0x1d0>
 8007a8a:	1c5a      	adds	r2, r3, #1
 8007a8c:	eea2 6b05 	vfma.f64	d6, d2, d5
 8007a90:	ee26 6b05 	vmul.f64	d6, d6, d5
 8007a94:	eea3 6b04 	vfma.f64	d6, d3, d4
 8007a98:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007a9c:	d121      	bne.n	8007ae2 <atan+0x13a>
 8007a9e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007aa2:	e794      	b.n	80079ce <atan+0x26>
 8007aa4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	ee30 6b47 	vsub.f64	d6, d0, d7
 8007aae:	ee30 0b07 	vadd.f64	d0, d0, d7
 8007ab2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8007ab6:	e7be      	b.n	8007a36 <atan+0x8e>
 8007ab8:	4b35      	ldr	r3, [pc, #212]	; (8007b90 <atan+0x1e8>)
 8007aba:	429c      	cmp	r4, r3
 8007abc:	da0b      	bge.n	8007ad6 <atan+0x12e>
 8007abe:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007ac2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007ac6:	ee30 5b47 	vsub.f64	d5, d0, d7
 8007aca:	eea0 6b07 	vfma.f64	d6, d0, d7
 8007ace:	2302      	movs	r3, #2
 8007ad0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8007ad4:	e7af      	b.n	8007a36 <atan+0x8e>
 8007ad6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8007ada:	2303      	movs	r3, #3
 8007adc:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8007ae0:	e7a9      	b.n	8007a36 <atan+0x8e>
 8007ae2:	4a2c      	ldr	r2, [pc, #176]	; (8007b94 <atan+0x1ec>)
 8007ae4:	492c      	ldr	r1, [pc, #176]	; (8007b98 <atan+0x1f0>)
 8007ae6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8007aea:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8007aee:	ed93 5b00 	vldr	d5, [r3]
 8007af2:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007af6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007afa:	ed92 6b00 	vldr	d6, [r2]
 8007afe:	2d00      	cmp	r5, #0
 8007b00:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007b04:	bfb8      	it	lt
 8007b06:	eeb1 7b47 	vneglt.f64	d7, d7
 8007b0a:	e760      	b.n	80079ce <atan+0x26>
 8007b0c:	f3af 8000 	nop.w
 8007b10:	54442d18 	.word	0x54442d18
 8007b14:	3ff921fb 	.word	0x3ff921fb
 8007b18:	54442d18 	.word	0x54442d18
 8007b1c:	bff921fb 	.word	0xbff921fb
 8007b20:	8800759c 	.word	0x8800759c
 8007b24:	7e37e43c 	.word	0x7e37e43c
 8007b28:	e322da11 	.word	0xe322da11
 8007b2c:	3f90ad3a 	.word	0x3f90ad3a
 8007b30:	24760deb 	.word	0x24760deb
 8007b34:	3fa97b4b 	.word	0x3fa97b4b
 8007b38:	a0d03d51 	.word	0xa0d03d51
 8007b3c:	3fb10d66 	.word	0x3fb10d66
 8007b40:	c54c206e 	.word	0xc54c206e
 8007b44:	3fb745cd 	.word	0x3fb745cd
 8007b48:	920083ff 	.word	0x920083ff
 8007b4c:	3fc24924 	.word	0x3fc24924
 8007b50:	5555550d 	.word	0x5555550d
 8007b54:	3fd55555 	.word	0x3fd55555
 8007b58:	52defd9a 	.word	0x52defd9a
 8007b5c:	bfadde2d 	.word	0xbfadde2d
 8007b60:	2c6a6c2f 	.word	0x2c6a6c2f
 8007b64:	bfa2b444 	.word	0xbfa2b444
 8007b68:	af749a6d 	.word	0xaf749a6d
 8007b6c:	bfb3b0f2 	.word	0xbfb3b0f2
 8007b70:	fe231671 	.word	0xfe231671
 8007b74:	bfbc71c6 	.word	0xbfbc71c6
 8007b78:	9998ebc4 	.word	0x9998ebc4
 8007b7c:	bfc99999 	.word	0xbfc99999
 8007b80:	440fffff 	.word	0x440fffff
 8007b84:	7ff00000 	.word	0x7ff00000
 8007b88:	3fdbffff 	.word	0x3fdbffff
 8007b8c:	3ff2ffff 	.word	0x3ff2ffff
 8007b90:	40038000 	.word	0x40038000
 8007b94:	08009108 	.word	0x08009108
 8007b98:	08009128 	.word	0x08009128

08007b9c <fabs>:
 8007b9c:	ec51 0b10 	vmov	r0, r1, d0
 8007ba0:	ee10 2a10 	vmov	r2, s0
 8007ba4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007ba8:	ec43 2b10 	vmov	d0, r2, r3
 8007bac:	4770      	bx	lr
	...

08007bb0 <trunc>:
 8007bb0:	ee10 1a90 	vmov	r1, s1
 8007bb4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007bb8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8007bbc:	2b13      	cmp	r3, #19
 8007bbe:	b530      	push	{r4, r5, lr}
 8007bc0:	dc0d      	bgt.n	8007bde <trunc+0x2e>
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	bfa7      	ittee	ge
 8007bc6:	4811      	ldrge	r0, [pc, #68]	; (8007c0c <trunc+0x5c>)
 8007bc8:	4118      	asrge	r0, r3
 8007bca:	2200      	movlt	r2, #0
 8007bcc:	f001 4300 	andlt.w	r3, r1, #2147483648	; 0x80000000
 8007bd0:	bfa4      	itt	ge
 8007bd2:	2200      	movge	r2, #0
 8007bd4:	ea21 0300 	bicge.w	r3, r1, r0
 8007bd8:	ec43 2b10 	vmov	d0, r2, r3
 8007bdc:	bd30      	pop	{r4, r5, pc}
 8007bde:	2b33      	cmp	r3, #51	; 0x33
 8007be0:	dd05      	ble.n	8007bee <trunc+0x3e>
 8007be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007be6:	d1f9      	bne.n	8007bdc <trunc+0x2c>
 8007be8:	ee30 0b00 	vadd.f64	d0, d0, d0
 8007bec:	e7f6      	b.n	8007bdc <trunc+0x2c>
 8007bee:	f04f 33ff 	mov.w	r3, #4294967295
 8007bf2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8007bf6:	fa23 f202 	lsr.w	r2, r3, r2
 8007bfa:	ee10 3a10 	vmov	r3, s0
 8007bfe:	ee10 5a90 	vmov	r5, s1
 8007c02:	ea23 0402 	bic.w	r4, r3, r2
 8007c06:	ec45 4b10 	vmov	d0, r4, r5
 8007c0a:	e7e7      	b.n	8007bdc <trunc+0x2c>
 8007c0c:	000fffff 	.word	0x000fffff

08007c10 <atan2>:
 8007c10:	f000 b82e 	b.w	8007c70 <__ieee754_atan2>
 8007c14:	0000      	movs	r0, r0
	...

08007c18 <sqrt>:
 8007c18:	b508      	push	{r3, lr}
 8007c1a:	ed2d 8b04 	vpush	{d8-d9}
 8007c1e:	eeb0 8b40 	vmov.f64	d8, d0
 8007c22:	f000 f8f3 	bl	8007e0c <__ieee754_sqrt>
 8007c26:	4b10      	ldr	r3, [pc, #64]	; (8007c68 <sqrt+0x50>)
 8007c28:	f993 3000 	ldrsb.w	r3, [r3]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	d011      	beq.n	8007c54 <sqrt+0x3c>
 8007c30:	eeb4 8b48 	vcmp.f64	d8, d8
 8007c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c38:	d60c      	bvs.n	8007c54 <sqrt+0x3c>
 8007c3a:	ed9f 9b09 	vldr	d9, [pc, #36]	; 8007c60 <sqrt+0x48>
 8007c3e:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8007c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c46:	d505      	bpl.n	8007c54 <sqrt+0x3c>
 8007c48:	f7fe f9c2 	bl	8005fd0 <__errno>
 8007c4c:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8007c50:	2321      	movs	r3, #33	; 0x21
 8007c52:	6003      	str	r3, [r0, #0]
 8007c54:	ecbd 8b04 	vpop	{d8-d9}
 8007c58:	bd08      	pop	{r3, pc}
 8007c5a:	bf00      	nop
 8007c5c:	f3af 8000 	nop.w
	...
 8007c68:	20000100 	.word	0x20000100
 8007c6c:	00000000 	.word	0x00000000

08007c70 <__ieee754_atan2>:
 8007c70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c72:	ee11 6a10 	vmov	r6, s2
 8007c76:	ee11 0a90 	vmov	r0, s3
 8007c7a:	4273      	negs	r3, r6
 8007c7c:	4f60      	ldr	r7, [pc, #384]	; (8007e00 <__ieee754_atan2+0x190>)
 8007c7e:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8007c82:	4333      	orrs	r3, r6
 8007c84:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007c88:	42bb      	cmp	r3, r7
 8007c8a:	ed8d 0b00 	vstr	d0, [sp]
 8007c8e:	d80b      	bhi.n	8007ca8 <__ieee754_atan2+0x38>
 8007c90:	e9dd c500 	ldrd	ip, r5, [sp]
 8007c94:	f1cc 0100 	rsb	r1, ip, #0
 8007c98:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007c9c:	ea41 010c 	orr.w	r1, r1, ip
 8007ca0:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 8007ca4:	42b9      	cmp	r1, r7
 8007ca6:	d906      	bls.n	8007cb6 <__ieee754_atan2+0x46>
 8007ca8:	ed9d 7b00 	vldr	d7, [sp]
 8007cac:	ee37 7b01 	vadd.f64	d7, d7, d1
 8007cb0:	ed8d 7b00 	vstr	d7, [sp]
 8007cb4:	e054      	b.n	8007d60 <__ieee754_atan2+0xf0>
 8007cb6:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 8007cba:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8007cbe:	4331      	orrs	r1, r6
 8007cc0:	d104      	bne.n	8007ccc <__ieee754_atan2+0x5c>
 8007cc2:	b003      	add	sp, #12
 8007cc4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007cc8:	f7ff be6e 	b.w	80079a8 <atan>
 8007ccc:	1784      	asrs	r4, r0, #30
 8007cce:	f004 0402 	and.w	r4, r4, #2
 8007cd2:	ea53 010c 	orrs.w	r1, r3, ip
 8007cd6:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 8007cda:	d109      	bne.n	8007cf0 <__ieee754_atan2+0x80>
 8007cdc:	2c02      	cmp	r4, #2
 8007cde:	d069      	beq.n	8007db4 <__ieee754_atan2+0x144>
 8007ce0:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8007dc8 <__ieee754_atan2+0x158>
 8007ce4:	ed9d 6b00 	vldr	d6, [sp]
 8007ce8:	2c03      	cmp	r4, #3
 8007cea:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8007cee:	e7df      	b.n	8007cb0 <__ieee754_atan2+0x40>
 8007cf0:	ea52 0106 	orrs.w	r1, r2, r6
 8007cf4:	d107      	bne.n	8007d06 <__ieee754_atan2+0x96>
 8007cf6:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8007dd0 <__ieee754_atan2+0x160>
 8007cfa:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8007dd8 <__ieee754_atan2+0x168>
 8007cfe:	2d00      	cmp	r5, #0
 8007d00:	fe26 7b07 	vselge.f64	d7, d6, d7
 8007d04:	e7d4      	b.n	8007cb0 <__ieee754_atan2+0x40>
 8007d06:	42ba      	cmp	r2, r7
 8007d08:	d10f      	bne.n	8007d2a <__ieee754_atan2+0xba>
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	f104 34ff 	add.w	r4, r4, #4294967295
 8007d10:	d107      	bne.n	8007d22 <__ieee754_atan2+0xb2>
 8007d12:	2c02      	cmp	r4, #2
 8007d14:	d851      	bhi.n	8007dba <__ieee754_atan2+0x14a>
 8007d16:	4b3b      	ldr	r3, [pc, #236]	; (8007e04 <__ieee754_atan2+0x194>)
 8007d18:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8007d1c:	ed94 7b00 	vldr	d7, [r4]
 8007d20:	e7c6      	b.n	8007cb0 <__ieee754_atan2+0x40>
 8007d22:	2c02      	cmp	r4, #2
 8007d24:	d84c      	bhi.n	8007dc0 <__ieee754_atan2+0x150>
 8007d26:	4b38      	ldr	r3, [pc, #224]	; (8007e08 <__ieee754_atan2+0x198>)
 8007d28:	e7f6      	b.n	8007d18 <__ieee754_atan2+0xa8>
 8007d2a:	42bb      	cmp	r3, r7
 8007d2c:	d0e3      	beq.n	8007cf6 <__ieee754_atan2+0x86>
 8007d2e:	1a9b      	subs	r3, r3, r2
 8007d30:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8007d34:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007d38:	da16      	bge.n	8007d68 <__ieee754_atan2+0xf8>
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	da01      	bge.n	8007d42 <__ieee754_atan2+0xd2>
 8007d3e:	323c      	adds	r2, #60	; 0x3c
 8007d40:	db17      	blt.n	8007d72 <__ieee754_atan2+0x102>
 8007d42:	ed9d 7b00 	vldr	d7, [sp]
 8007d46:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8007d4a:	f7ff ff27 	bl	8007b9c <fabs>
 8007d4e:	f7ff fe2b 	bl	80079a8 <atan>
 8007d52:	ed8d 0b00 	vstr	d0, [sp]
 8007d56:	2c01      	cmp	r4, #1
 8007d58:	d00e      	beq.n	8007d78 <__ieee754_atan2+0x108>
 8007d5a:	2c02      	cmp	r4, #2
 8007d5c:	d014      	beq.n	8007d88 <__ieee754_atan2+0x118>
 8007d5e:	b9f4      	cbnz	r4, 8007d9e <__ieee754_atan2+0x12e>
 8007d60:	ed9d 0b00 	vldr	d0, [sp]
 8007d64:	b003      	add	sp, #12
 8007d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d68:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8007dd0 <__ieee754_atan2+0x160>
 8007d6c:	ed8d 7b00 	vstr	d7, [sp]
 8007d70:	e7f1      	b.n	8007d56 <__ieee754_atan2+0xe6>
 8007d72:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8007de0 <__ieee754_atan2+0x170>
 8007d76:	e7f9      	b.n	8007d6c <__ieee754_atan2+0xfc>
 8007d78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d7c:	9901      	ldr	r1, [sp, #4]
 8007d7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d82:	e9cd 2300 	strd	r2, r3, [sp]
 8007d86:	e7eb      	b.n	8007d60 <__ieee754_atan2+0xf0>
 8007d88:	ed9d 6b00 	vldr	d6, [sp]
 8007d8c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8007de8 <__ieee754_atan2+0x178>
 8007d90:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007d94:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8007df0 <__ieee754_atan2+0x180>
 8007d98:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007d9c:	e788      	b.n	8007cb0 <__ieee754_atan2+0x40>
 8007d9e:	ed9d 6b00 	vldr	d6, [sp]
 8007da2:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8007de8 <__ieee754_atan2+0x178>
 8007da6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007daa:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8007df0 <__ieee754_atan2+0x180>
 8007dae:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007db2:	e77d      	b.n	8007cb0 <__ieee754_atan2+0x40>
 8007db4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8007df0 <__ieee754_atan2+0x180>
 8007db8:	e77a      	b.n	8007cb0 <__ieee754_atan2+0x40>
 8007dba:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8007df8 <__ieee754_atan2+0x188>
 8007dbe:	e777      	b.n	8007cb0 <__ieee754_atan2+0x40>
 8007dc0:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8007de0 <__ieee754_atan2+0x170>
 8007dc4:	e774      	b.n	8007cb0 <__ieee754_atan2+0x40>
 8007dc6:	bf00      	nop
 8007dc8:	54442d18 	.word	0x54442d18
 8007dcc:	c00921fb 	.word	0xc00921fb
 8007dd0:	54442d18 	.word	0x54442d18
 8007dd4:	3ff921fb 	.word	0x3ff921fb
 8007dd8:	54442d18 	.word	0x54442d18
 8007ddc:	bff921fb 	.word	0xbff921fb
	...
 8007de8:	33145c07 	.word	0x33145c07
 8007dec:	3ca1a626 	.word	0x3ca1a626
 8007df0:	54442d18 	.word	0x54442d18
 8007df4:	400921fb 	.word	0x400921fb
 8007df8:	54442d18 	.word	0x54442d18
 8007dfc:	3fe921fb 	.word	0x3fe921fb
 8007e00:	7ff00000 	.word	0x7ff00000
 8007e04:	08009148 	.word	0x08009148
 8007e08:	08009160 	.word	0x08009160

08007e0c <__ieee754_sqrt>:
 8007e0c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8007e10:	4770      	bx	lr

08007e12 <with_errno>:
 8007e12:	b513      	push	{r0, r1, r4, lr}
 8007e14:	4604      	mov	r4, r0
 8007e16:	ed8d 0b00 	vstr	d0, [sp]
 8007e1a:	f7fe f8d9 	bl	8005fd0 <__errno>
 8007e1e:	ed9d 0b00 	vldr	d0, [sp]
 8007e22:	6004      	str	r4, [r0, #0]
 8007e24:	b002      	add	sp, #8
 8007e26:	bd10      	pop	{r4, pc}

08007e28 <xflow>:
 8007e28:	b082      	sub	sp, #8
 8007e2a:	b158      	cbz	r0, 8007e44 <xflow+0x1c>
 8007e2c:	eeb1 7b40 	vneg.f64	d7, d0
 8007e30:	ed8d 7b00 	vstr	d7, [sp]
 8007e34:	ed9d 7b00 	vldr	d7, [sp]
 8007e38:	2022      	movs	r0, #34	; 0x22
 8007e3a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007e3e:	b002      	add	sp, #8
 8007e40:	f7ff bfe7 	b.w	8007e12 <with_errno>
 8007e44:	eeb0 7b40 	vmov.f64	d7, d0
 8007e48:	e7f2      	b.n	8007e30 <xflow+0x8>
 8007e4a:	0000      	movs	r0, r0
 8007e4c:	0000      	movs	r0, r0
	...

08007e50 <__math_uflow>:
 8007e50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007e58 <__math_uflow+0x8>
 8007e54:	f7ff bfe8 	b.w	8007e28 <xflow>
 8007e58:	00000000 	.word	0x00000000
 8007e5c:	10000000 	.word	0x10000000

08007e60 <__math_oflow>:
 8007e60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007e68 <__math_oflow+0x8>
 8007e64:	f7ff bfe0 	b.w	8007e28 <xflow>
 8007e68:	00000000 	.word	0x00000000
 8007e6c:	70000000 	.word	0x70000000

08007e70 <__math_divzero>:
 8007e70:	b082      	sub	sp, #8
 8007e72:	2800      	cmp	r0, #0
 8007e74:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007e78:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8007e7c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8007e80:	ed8d 7b00 	vstr	d7, [sp]
 8007e84:	ed9d 0b00 	vldr	d0, [sp]
 8007e88:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8007e98 <__math_divzero+0x28>
 8007e8c:	2022      	movs	r0, #34	; 0x22
 8007e8e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8007e92:	b002      	add	sp, #8
 8007e94:	f7ff bfbd 	b.w	8007e12 <with_errno>
	...

08007ea0 <__math_invalid>:
 8007ea0:	eeb0 7b40 	vmov.f64	d7, d0
 8007ea4:	eeb4 7b47 	vcmp.f64	d7, d7
 8007ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eac:	ee30 6b40 	vsub.f64	d6, d0, d0
 8007eb0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8007eb4:	d602      	bvs.n	8007ebc <__math_invalid+0x1c>
 8007eb6:	2021      	movs	r0, #33	; 0x21
 8007eb8:	f7ff bfab 	b.w	8007e12 <with_errno>
 8007ebc:	4770      	bx	lr

08007ebe <__math_check_uflow>:
 8007ebe:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8007ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ec6:	d102      	bne.n	8007ece <__math_check_uflow+0x10>
 8007ec8:	2022      	movs	r0, #34	; 0x22
 8007eca:	f7ff bfa2 	b.w	8007e12 <with_errno>
 8007ece:	4770      	bx	lr

08007ed0 <__math_check_oflow>:
 8007ed0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8007ef0 <__math_check_oflow+0x20>
 8007ed4:	eeb0 7bc0 	vabs.f64	d7, d0
 8007ed8:	eeb4 7b46 	vcmp.f64	d7, d6
 8007edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ee0:	dd02      	ble.n	8007ee8 <__math_check_oflow+0x18>
 8007ee2:	2022      	movs	r0, #34	; 0x22
 8007ee4:	f7ff bf95 	b.w	8007e12 <with_errno>
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	f3af 8000 	nop.w
 8007ef0:	ffffffff 	.word	0xffffffff
 8007ef4:	7fefffff 	.word	0x7fefffff

08007ef8 <_init>:
 8007ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007efa:	bf00      	nop
 8007efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007efe:	bc08      	pop	{r3}
 8007f00:	469e      	mov	lr, r3
 8007f02:	4770      	bx	lr

08007f04 <_fini>:
 8007f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f06:	bf00      	nop
 8007f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f0a:	bc08      	pop	{r3}
 8007f0c:	469e      	mov	lr, r3
 8007f0e:	4770      	bx	lr
